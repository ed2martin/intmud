classe mens_tabela
# Usado em mens e mensjog
const o_@g = "$"
const o_d = arg0 === "D" ? "\da" : "\db"
const o_e = arg0 === "E" ? "\dc" : "\dd"
const o_f = arg0 === "F" ? "\de" : "\df"
const o_g = arg0 === "G" ? "\dg" : "\dh"
#
const x_a = "De"
const x_a@_a@_ = "Da "
const x_a@_as@_ = "Das "
const x_a@_o@_ = "Do "
const x_a@_os@_ = "Dos "
const x_b = "de"
const x_b@_a@_ = "da "
const x_b@_as@_ = "das "
const x_b@_o@_ = "do "
const x_b@_os@_ = "dos "
const x_c = "Em"
const x_c@_a@_ = "Na "
const x_c@_as@_ = "Nas "
const x_c@_o@_ = "No "
const x_c@_os@_ = "Nos "
const x_d = "em"
const x_d@_a@_ = "na "
const x_d@_as@_ = "nas "
const x_d@_o@_ = "no "
const x_d@_os@_ = "nos "
#
const x_e = "De"
const x_e@_a@_ = "Da "
const x_e@_as@_ = "Das "
const x_e@_o@_ = "Do "
const x_e@_os@_ = "Dos "
const x_e@_uma@_ = "Da "
const x_e@_umas@_ = "Das "
const x_e@_um@_ = "Do "
const x_e@_uns@_ = "Dos "
const x_f = "de"
const x_f@_a@_ = "da "
const x_f@_as@_ = "das "
const x_f@_o@_ = "do "
const x_f@_os@_ = "dos "
const x_f@_uma@_ = "da "
const x_f@_umas@_ = "das "
const x_f@_um@_ = "do "
const x_f@_uns@_ = "dos "
const x_g = "Em"
const x_g@_a@_ = "Na "
const x_g@_as@_ = "Nas "
const x_g@_o@_ = "No "
const x_g@_os@_ = "Nos "
const x_g@_uma@_ = "Na "
const x_g@_umas@_ = "Nas "
const x_g@_um@_ = "No "
const x_g@_uns@_ = "Nos "
const x_h = "em"
const x_h@_a@_ = "na "
const x_h@_as@_ = "nas "
const x_h@_o@_ = "no "
const x_h@_os@_ = "nos "
const x_h@_uma@_ = "na "
const x_h@_umas@_ = "nas "
const x_h@_um@_ = "no "
const x_h@_uns@_ = "nos "
#
const o_animal = txtcopiamai(mens_cfg:m_animal, intchr(arg0) < 95 ? "A" : "")
const o_animais = txtcopiamai(mens_cfg:m_animais, intchr(arg0) < 95 ? "A" : "")
const o_genero@qanimal = txtcopiamai(mens_cfg:m_genero_animal, intchr(arg0) < 95 ? "A" : "")
const o_o@qanimal = o_genero@qanimal(arg0) + " " + mens_cfg:m_animal
const o_um@qanimal = txtcopiamai(mens_cfg:m_um_animal, intchr(arg0) < 95 ? "A" : "")
const o_seus@qanimais = txtcopiamai(mens_cfg:m_seus_animais, intchr(arg0) < 95 ? "A" : "")
const o_nenhum@qanimal = txtcopiamai(mens_cfg:m_nenhum_animal, intchr(arg0) < 95 ? "A" : "")
const o_capturar = txtcopiamai(mens_cfg:m_capturar, intchr(arg0) < 95 ? "A" : "")
const o_num@qanimais = config:animal1

func o_cmd@qanimal
  prog p
  p.iniherdainv("h_cmd_animal")
  ret txtcopiamai(txt(p.texto, 4) ?? arg0, intchr(arg0) < 95 ? "A" : "")


classe mens
herda mens_tabela
ref perso # Personagem que está enviando a mensagem
ref alvo # Personagem ou objeto alvo da ação
ref obj1 # Primeiro objeto
ref obj2 # Segundo objeto
ref r # Objeto que vai receber a mensagem
txt512 mens # Mensagem usada em $M
txt100 o_1 # Texto de $1
txt100 o_2 # Texto de $2
txt100 o_3 # Texto de $3
txt100 o_4 # Texto de $4
txt100 o_5 # Texto de $5
const iniclasse = !$[arg0] && criar(arg0)

func removesom # Remove códigos de som de textotxt arg0
  textopos p = arg0.ini
  enquanto p.txtproc("\d=") >= 0
    refvar ini = p.txtproc("\d=")
    refvar som = txt(txt1(p.texto(ini, 80)), 2)
    p.mudar("", ini, inttotal(som) + 3)
  efim

func p # Define os personagens
  perso = arg0, alvo = arg1, obj1 = arg2, obj2 = arg3

func tp # Texto de personagem: atalho para função p seguido da função txt
  perso = arg1, alvo = arg2, obj1 = arg3, obj2 = arg4
  r = arg1.dono.perso && arg1.perso ? arg1.dono : arg1
  ret vartrocacod(vartrocacod(arg0, "$", "o_"), "\d", "x_")

func mp # Mensagem de personagem: atalho para função p seguido da função msg
  se arg1.sock
    perso = arg1, alvo = arg2, obj1 = arg3, obj2 = arg4
    r = arg1.dono.perso && arg1.perso ? arg1.dono : arg1
    r.msg(vartrocacod(vartrocacod(arg0, "$", "o_"), "\d", "x_"))
  fimse

func txt # Prepara e retorna mensagem
# arg0=mensagem, arg1=a quem se destina a mensagem
  r = arg1
  ret vartrocacod(vartrocacod(arg0, "$", "o_"), "\d", "x_")

func msg # Envia mensagem para um personagem
# arg0=mensagem, arg1=a quem se destina a mensagem
  se arg1.sock
    r = arg1.dono.perso && arg1.perso ? arg1.dono : arg1
    r.msg(vartrocacod(vartrocacod(arg0, "$", "o_"), "\d", "x_"))
  fimse

func msgvis # Envia mensagem se estiver acordado e vendo personagem perso
# arg0=mensagem, arg1=a quem se destina a mensagem
  se arg1.sock && arg1.posicao > 4 && perso.visivel(arg1)
    r = arg1.dono.perso && arg1.perso ? arg1.dono : arg1
    r.msg(vartrocacod(vartrocacod(arg0, "$", "o_"), "\d", "x_"))
  fimse

func msgsomvis # Envia mensagem/som se estiver acordado e vendo personagem perso
# arg0=mensagem, arg1=nome do som, arg2=a quem se destina a mensagem
  se arg2.sock && arg2.posicao > 4 && perso.visivel(arg2)
    r = arg2.dono.perso && arg2.perso ? arg2.dono : arg2
    r.msgsom(arg1)
    r.msg(vartrocacod(vartrocacod(arg0, "$", "o_"), "\d", "x_"))
  fimse

func msgvisdir # Envia mensagem estiver acordado e vendo personagem perso
# arg0=mensagem, arg1=a quem se destina a mensagem
# arg2=mensagem da direção, quando arg1 e perso não estiverem na mesma sala
  se arg1.sock && arg1.posicao > 4 && perso.visivel(arg1)
    r = arg1.dono.perso && arg1.perso ? arg1.dono : arg1
    refvar dono = perso.dono.perso ? perso.dono.dono : perso.dono
    refvar dir = r.dono != dono ? arg2
    r.msg(txt(dir) + vartrocacod(vartrocacod(arg0, "$", "o_"), "\d", "x_"))
  fimse

func msginv # Envia mensagem se estiver acordado
# arg0=mensagem, arg1=a quem se destina a mensagem
  se arg1.sock && arg1.posicao > 4
    r = arg1.dono.perso && arg1.perso ? arg1.dono : arg1
    r.msg(vartrocacod(vartrocacod(arg0, "$", "o_"), "\d", "x_"))
  fimse

func msgsominv # Envia mensagem/som se estiver acordado
# arg0=mensagem, arg1=nome do som, arg2=a quem se destina a mensagem
  se arg2.sock && arg2.posicao > 4
    r = arg2.dono.perso && arg2.perso ? arg2.dono : arg2
    r.msgsom(arg1)
    r.msg(vartrocacod(vartrocacod(arg0, "$", "o_"), "\d", "x_"))
  fimse

func msginvdir # Envia mensagem se estiver acordado
# arg0=mensagem, arg1=a quem se destina a mensagem
# arg2=mensagem da direção, quando arg1 e perso não estiverem na mesma sala
  se arg1.sock && arg1.posicao > 4
    r = arg1.dono.perso && arg1.perso ? arg1.dono : arg1
    refvar dono = perso.dono.perso ? perso.dono.dono : perso.dono
    refvar dir = r.dono != dono ? arg2
    r.msg(txt(dir) + vartrocacod(vartrocacod(arg0, "$", "o_"), "\d", "x_"))
  fimse

func mtodos1 # Mensagem só para quem estiver acordado
# arg0 = mensagem para todos
  refvar dono = perso.dono.perso ? perso.dono.dono : perso.dono
  ret !(dono.socktot && arg0), nulo
  listaobj l0
  epara l0.addfim(dono.dentro2), l0, l0.ini.remove
    msginv(arg0, l0.objini)
  efim

func mtodos2 # Mensagem só para quem estiver acordado
# arg0 = mensagem para personagem, arg1 = mensagem para outros
  refvar dono = perso.dono.perso ? perso.dono.dono : perso.dono
  ret !dono.socktot, nulo
  arg0 && msginv(arg0, perso)
  ret !arg1, nulo
  listaobj l0
  l0.addfim(dono.dentro2)
  epara l0.remove(perso), l0, l0.ini.remove
    msginv(arg1, l0.objini)
  efim

func mtodos3 # Mensagem só para quem estiver acordado
# arg0,arg1,arg2 = mensagens para personagem, alvo e outros
  refvar dono = perso.dono.perso ? perso.dono.dono : perso.dono
  ret !dono.socktot, nulo
  arg0 && msginv(arg0, perso)
  arg1 && perso != alvo && msginv(arg1, alvo)
  ret !arg2, nulo
  listaobj l0
  l0.addfim(dono.dentro2)
  epara l0.remove(perso, alvo), l0, l0.ini.remove
    msginv(arg2, l0.objini)
  efim

func mtodos1som # Mensagem e som só para quem estiver acordado
# arg0 = mensagem para todos, arg1=nome do som
  refvar dono = perso.dono.perso ? perso.dono.dono : perso.dono
  ret !(dono.socktot && arg0), nulo
  listaobj l0
  epara l0.addfim(dono.dentro2), l0, l0.ini.remove
    msgsominv(arg0, arg1, l0.objini)
  efim

func mtodos2som # Mesmo que mtodos1som, porém não envia mensagem para o personagem
# arg0 = mensagem para todos, arg1=nome do som
  refvar dono = perso.dono.perso ? perso.dono.dono : perso.dono
  ret !(dono.socktot && arg0), nulo
  listaobj l0
  l0.addfim(dono.dentro2)
  epara l0.remove(perso), l0, l0.ini.remove
    msgsominv(arg0, arg1, l0.objini)
  efim

func mtodos3dir # Mensagem só para quem estiver acordado
# arg0,arg1,arg2 = mensagens para personagem, alvo e outros
# arg3 = direção do personagem ao alvo, quando não estão na mesma sala
  refvar persocontr = perso.dono.perso ? perso.dono : perso
  refvar alvocontr = alvo.dono.perso ? alvo.dono : alvo
  refvar persodono = persocontr.dono
  refvar alvodono = alvocontr.dono
  ret !alvodono || alvodono == persodono, mtodos3(arg0, arg1, arg2)
  ret !(persodono.socktot || alvodono.socktot), nulo
  refvar t1 = txt(misc:d3[arg3])
  refvar t2 = txt(misc:d4[arg3])
  arg0 && msginv(t1 + arg0, persocontr)
  arg1 && persodono != alvodono && msginv(t2 + arg1, alvocontr)
  ret !arg2, nulo
  listaobj l0
  l0.addfim(persodono.dentro2)
  epara l0.remove(persocontr, alvocontr), l0, l0.ini.remove
    msginv(t1 + arg2, l0.objini)
  efim
  l0.addfim(alvodono.dentro2)
  epara l0.remove(persocontr, alvocontr), l0, l0.ini.remove
    msginv(t2 + arg2, l0.objini)
  efim

func mvis1 # Mensagem só para quem pode ver o personagem e estiver acordado
# arg0 = mensagem para todos
  refvar contr = perso.dono.perso ? perso.dono : perso
  ret !(contr.dono.socktot && arg0), nulo
  msginv(arg0, contr)
  listaobj l0
  l0.addfim(contr.dono.dentro2)
  epara l0.remove(contr), l0, l0.ini.remove
    msgvis(arg0, l0.objini)
  efim

func mvis2 # Mensagem só para quem pode ver o personagem e estiver acordado
# arg0 = mensagem para personagem, arg1 = mensagem para outros
  refvar contr = perso.dono.perso ? perso.dono : perso
  ret !contr.dono.socktot, nulo
  arg0 && msginv(arg0, contr)
  ret !arg1, nulo
  listaobj l0
  l0.addfim(contr.dono.dentro2)
  epara l0.remove(contr), l0, l0.ini.remove
    msgvis(arg1, l0.objini)
  efim

func mvis3 # Mensagem só para quem pode ver o personagem e estiver acordado
# arg0,arg1,arg2 = mensagens para personagem, alvo e outros
  refvar dono = perso.dono.perso ? perso.dono.dono : perso.dono
  ret !dono.socktot, nulo
  arg0 && msginv(arg0, perso)
  arg1 && perso != alvo && msginv(arg1, alvo)
  ret !arg2, nulo
  listaobj l0
  l0.addfim(dono.dentro2)
  epara l0.remove(perso, alvo), l0, l0.ini.remove
    msgvis(arg2, l0.objini)
  efim

func mvis1som # Mensagem e som só para quem pode ver o personagem e estiver acordado
# arg0 = mensagem para todos, arg1=nome do som
  refvar persocontr = perso.dono.perso ? perso.dono : perso
  ret !(persocontr.dono.socktot && arg0), nulo
  listaobj l0
  epara l0.addfim(persocontr.dono.dentro2), l0, l0.ini.remove
    msgsomvis(arg0, arg1, l0.objini)
  efim

func mvis2som # Mesmo que mvis1som, porém não envia mensagem para o personagem
# arg0 = mensagem para todos, arg1=nome do som
  refvar persocontr = perso.dono.perso ? perso.dono : perso
  ret !(persocontr.dono.socktot && arg0), nulo
  listaobj l0
  l0.addfim(persocontr.dono.dentro2)
  epara l0.remove(persocontr), l0, l0.ini.remove
    msgsomvis(arg0, arg1, l0.objini)
  efim

func mvis3dir # Mensagem só para quem pode ver o personagem e estiver acordado
# arg0,arg1,arg2 = mensagens para personagem, alvo e outros
# arg3 = direção do personagem ao alvo, quando não estão na mesma sala
  refvar persodono = perso.dono.perso ? perso.dono.dono : perso.dono
  refvar alvodono = alvo.dono.perso ? alvo.dono.dono : alvo.dono
  ret !alvodono || alvodono == persodono, mtodos3(arg0, arg1, arg2)
  ret !(persodono.socktot || alvodono.socktot), nulo
  refvar t1 = txt(misc:d3[arg3])
  refvar t2 = txt(misc:d4[arg3])
  arg0 && msginv(t1 + arg0, perso)
  arg1 && persodono != alvodono && msginv(t2 + arg1, alvo)
  ret !arg2, nulo
  listaobj l0
  l0.addfim(persodono.dentro2)
  epara l0.remove(persocontr), l0, l0.ini.remove
    msgvis(t1 + arg2, l0.objini)
  efim
  l0.addfim(alvodono.dentro2)
  epara l0.remove(alvocontr), l0, l0.ini.remove
    msgvis(t2 + arg2, l0.objini)
  efim

func mmud1 # Mensagem para todos do MUD
# arg0 = mensagem para todos
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    msg(arg0, item.obj.perso)
  efim

func mmudS # Mensagem para todos do MUD em outra sala
# arg0 = mensagem para todos
  ref s
  epara s = perso, s.dono, s = s.dono
  efim
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    epara r = item.obj.perso.dono, r.dono, r = r.dono
    efim
    r != s && msg(arg0, item.obj.perso)
  efim

func mmudtodos1 # Mensagem para todos que estiverem acordados no MUD
# arg0 = mensagem para todos
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    msginv(arg0, item.obj.perso)
  efim

func mmudtodosS # Mensagem para todos que estiverem acordados no MUD em outra sala
# arg0 = mensagem para todos
  ref s
  epara s = perso, s.dono, s = s.dono
  efim
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    epara r = item.obj.perso.dono, r.dono, r = r.dono
    efim
    r != s && msginv(arg0, item.obj.perso)
  efim

func marea1 # Mensagem para todos que estiverem na mesma área
# arg0 = mensagem para todos
  epara r = perso, r.dono, r = r.dono
  efim
  refvar area = r.s_area
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    epara r = item.obj.perso.dono, r.dono, r = r.dono
    efim
    r.s_area == area && msg(arg0, item.obj.perso)
  efim

func mareaS # Mensagem para todos que estiverem na mesma área mas em outra sala
# arg0 = mensagem para todos
  ref s
  epara s = perso, s.dono, s = s.dono
  efim
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    epara r = item.obj.perso.dono, r.dono, r = r.dono
    efim
    r.s_area == s.s_area && r != s && msg(arg0, item.obj.perso)
  efim

func mareatodos1 # Mensagem para quem está acordado na mesma área
# arg0 = mensagem para todos
  epara r = perso, r.dono, r = r.dono
  efim
  refvar area = r.s_area
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    epara r = item.obj.perso.dono, r.dono, r = r.dono
    efim
    r.s_area == area && msginv(arg0, item.obj.perso)
  efim

func mareatodosS # Mensagem para quem está acordado na mesma área mas em outra sala
# arg0 = mensagem para todos
  ref s
  epara s = perso, s.dono, s = s.dono
  efim
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    epara r = item.obj.perso.dono, r.dono, r = r.dono
    efim
    r.s_area == s.s_area && r != s && msginv(arg0, item.obj.perso)
  efim

func msala1 # Enviar mensagem para todos que estiverem na sala, mesmo dormindo
# arg0 = mensagem
  ret !(perso.socktot && arg0), nulo
  listaobj l0
  epara l0.addfim(perso.dentro2), l0, l0.ini.remove
    msg(arg0, l0.objini)
  efim

func msalatodos1 # Mensagem para todos que estiverem acordados na sala
# arg0 = mensagem
  ret !(perso.socktot && arg0), nulo
  listaobj l0
  epara l0.addfim(perso.dentro2), l0, l0.ini.remove
    msginv(arg0, l0.objini)
  efim

func mfalar2 # Mensagem de personagem falando
# arg0 = mensagem para personagem
# arg1 = mensagem para outros
# arg2 = o que o personagem falou ($m nas mensagens)
# arg3 = objeto que trata do idioma ($1 nas mensagens) ou null se língua comum
# arg4 = nome da variável que contém o histórico das mensagens
  refvar contr = perso.dono.perso ? perso.dono : perso
  ret !contr.dono.socktot, nulo
  refvar m1 = $miscbebida.msgperso(arg2, contr.p_bebida)
  uint8 sabe1 = !arg3 ? 100 : contr.var.[arg3.nomevar] * 17 # Quanto conhece
  o_1 = arg3.falar
  se arg0 && contr.sock && contr.posicao >= 4
    mens = sabe1 < 100 ? arg3.converte(m1, sabe1) : m1
    refvar m2 = este.txt(!sabe1 ? arg3.naoconhece ?? arg0, contr)
    contr.msg(m2)
    refvar e = contr.sock.var.[arg4]
    arg4 && (e = m2 + (e ? "\n") + txtsublin(e, 0, 29))
  fimse
  ret !arg1, nulo
  listaobj l0
  l0.addfim(contr.dono.dentro2)
  epara l0.remove(contr), l0, l0.ini.remove
    continuar !l0.objini.sock || l0.objini.posicao < 4
    refvar sabe2 = !arg3 ? 100 : intmin(sabe1, l0.objini.var.[arg3.nomevar] * 17)
    mens = sabe2 < 100 ? arg3.converte(m1, sabe2) : m1
    refvar m2 = este.txt(!sabe1 ? arg3.naoconhece ?? arg1, l0.objini)
    l0.objini.msg(m2)
    refvar e = l0.objini.sock.var.[arg4]
    arg4 && (e = m2 + (e ? "\n") + txtsublin(e, 0, 29))
  efim

func persomsg # Usado internamente, arg0 = mensagem de tu/ti
  ret r == perso, arg0
  ret !perso.visivel(r), perso.perso ? "alguém" : "alguma coisa"
  ret !perso.temdomador, perso.descnome2
  ret vartrocacod(perso.persodomador == r ? perso.descdono1 : perso.descdono2, "$", "perso_")

func alvomsg # Usado internamente, arg0 = mensagem de tu/ti
  ret r == alvo, arg0
  ret !alvo.visivel(r), alvo.perso ? "alguém" : "alguma coisa"
  ret !alvo.temdomador, alvo.descnome2
  ret vartrocacod(alvo.persodomador == r ? alvo.descdono1 : alvo.descdono2, "$", "alvo_")

func obj1msg # Usado internamente, arg0 = mensagem de tu/ti
  ret r == obj1, arg0
  ret !obj1.visivel(r), obj1.perso ? "alguém" : "alguma coisa"
  ret !obj1.temdomador, obj1.descnome2
  ret vartrocacod(obj1.persodomador == r ? obj1.descdono1 : obj1.descdono2, "$", "obj1_")

func obj2msg # Usado internamente, arg0 = mensagem de tu/ti
  ret r == obj2, arg0
  ret !obj2.visivel(r), obj2.perso ? "alguém" : "alguma coisa"
  ret !obj2.temdomador, obj2.descnome2
  ret vartrocacod(obj2.persodomador == r ? obj2.descdono1 : obj2.descdono2, "$", "obj2_")

const perso_p = perso.descnome2
const alvo_p = alvo.descnome2
const obj1_p = obj1.descnome2
const obj2_p = obj2.descnome2
const perso_d = perso.persodomador.visivel(r) ? perso.persodomador.descnome2 : "alguém"
const alvo_d = alvo.persodomador.visivel(r) ? alvo.persodomador.descnome2 : "alguém"
const obj1_d = obj1.persodomador.visivel(r) ? obj1.persodomador.descnome2 : "alguém"
const obj2_d = obj2.persodomador.visivel(r) ? obj2.persodomador.descnome2 : "alguém"
const perso_s = perso.msexo2 ? "seu" : "sua"
const alvo_s = alvo.msexo2 ? "seu" : "sua"
const obj1_s = obj1.msexo2 ? "seu" : "sua"
const obj2_s = obj2.msexo2 ? "seu" : "sua"
const perso_t = perso.msexo2 ? "teu" : "tua"
const alvo_t = alvo.msexo2 ? "teu" : "tua"
const obj1_t = obj1.msexo2 ? "teu" : "tua"
const obj2_t = obj2.msexo2 ? "teu" : "tua"
const perso_u = perso.msexo2 ? "o" : "a"
const alvo_u = alvo.msexo2 ? "o" : "a"
const obj1_u = obj1.msexo2 ? "o" : "a"
const obj2_u = obj2.msexo2 ? "o" : "a"
const perso_@g = "$"
const alvo_@g = "$"
const obj1_@g = "$"
const obj2_@g = "$"

func perso_q
  refvar d = perso.descnome2
  ret txtproclin("o\na\num\numa", txt1(d + "x")) < 0 ? d : txt2(d)

func alvo_q
  refvar d = alvo.descnome2
  ret txtproclin("o\na\num\numa", txt1(d + "x")) < 0 ? d : txt2(d)

func obj1_q
  refvar d = obj1.descnome2
  ret txtproclin("o\na\num\numa", txt1(d + "x")) < 0 ? d : txt2(d)

func obj2_q
  refvar d = obj2.descnome2
  ret txtproclin("o\na\num\numa", txt1(d + "x")) < 0 ? d : txt2(d)

const o_h = txtcopiamai(perso.msexo2 ? "um" : "uma", arg0)
const o_i = txtcopiamai(alvo.msexo2 ? "um" : "uma", arg0)
const o_j = txtcopiamai(obj1.msexo2 ? "um" : "uma", arg0)
const o_m = arg0 === "M" ? txtcopiamai(mens, "A") : mens
const o_s = txtcopiamai(perso.msexo2 ? "o" : "a", arg0)
const o_t = txtcopiamai(alvo.msexo2 ? "o" : "a", arg0)
const o_u = txtcopiamai(obj1.msexo2 ? "o" : "a", arg0)
const o_v = txtcopiamai(perso.msexo2 ? "e" : "a", arg0)
const o_w = txtcopiamai(alvo.msexo2 ? "e" : "a", arg0)
const o_x = txtcopiamai(obj1.msexo2 ? "e" : "a", arg0)
const o_p =  txtcopiamai(persomsg(config:mens_tu), arg0 === "P" ? "A" : "")
const o_a =  txtcopiamai(alvomsg(config:mens_tu), arg0 === "A" ? "A" : "")
const o_k =  txtcopiamai(obj1msg(config:mens_tu), arg0 === "K" ? "A" : "")
const o_l =  txtcopiamai(obj2msg(config:mens_tu), arg0 === "L" ? "A" : "")
const o_p1 = txtcopiamai(persomsg(config:mens_ti), arg0 === "P1" ? "A" : "")
const o_a1 = txtcopiamai(alvomsg(config:mens_ti), arg0 === "A1" ? "A" : "")
const o_k1 = txtcopiamai(obj1msg(config:mens_ti), arg0 === "K1" ? "A" : "")
const o_l1 = txtcopiamai(obj2msg(config:mens_ti), arg0 === "L1" ? "A" : "")

func o_q # Nome do personagem sem citar o dono
  se r == perso
    ret txtcopiamai(config:mens_tu, arg0)
  senao perso.visivel(r)
    ret arg0 === "Q" ? txtcopiamai(perso.descnome2, "A") : perso.descnome2
  fimse
  ret txtcopiamai(perso.perso ? "alguém" : "alguma coisa", arg0)

func o_q1 # Nome do personagem sem citar o dono
  se r == perso
    ret txtcopiamai(config:mens_ti, arg0)
  senao perso.visivel(r)
    ret arg0 === "Q1" ? txtcopiamai(perso.descnome2, "A") : perso.descnome2
  fimse
  ret txtcopiamai(perso.perso ? "alguém" : "alguma coisa", arg0)

func o_r # Nome do personagem no comando QUEM
  ret arg0 === "r", perso.sock ? perso.sock.nome : perso.nome
  ret txtcopiamai(perso.sock ? perso.sock.nome : perso.nome, "A")

func o_b # Nome do alvo sem citar o dono
  se r == alvo
    ret txtcopiamai(config:mens_tu, arg0)
  senao alvo.visivel(r)
    ret arg0 === "B" ? txtcopiamai(alvo.descnome2, "A") : alvo.descnome2
  fimse
  ret txtcopiamai(alvo.perso ? "alguém" : "alguma coisa", arg0)

func o_b1 # Nome do alvo sem citar o dono
  se r == alvo
    ret txtcopiamai(config:mens_ti, arg0)
  senao alvo.visivel(r)
    ret arg0 === "B1" ? txtcopiamai(alvo.descnome2, "A") : alvo.descnome2
  fimse
  ret txtcopiamai(alvo.perso ? "alguém" : "alguma coisa", arg0)

func o_c # Nome do alvo no comando QUEM
  ret arg0 === "c", alvo.sock ? alvo.sock.nome : alvo.nome
  ret txtcopiamai(alvo.sock ? alvo.sock.nome : alvo.nome, "A")

func o_o # Nome do primeiro objeto
  se r == obj1
    ret txtcopiamai(config:mens_tu, arg0)
  senao obj1.visivel(r)
    ret arg0 === "O" ? txtcopiamai(obj1.descnome2, "A") : obj1.descnome2
  fimse
  ret txtcopiamai(obj1.perso ? "alguém" : "alguma coisa", arg0)

func o_o1 # Nome do primeiro objeto
  se r == obj1
    ret txtcopiamai(config:mens_ti, arg0)
  senao obj1.visivel(r)
    ret arg0 === "O1" ? txtcopiamai(obj1.descnome2, "A") : obj1.descnome2
  fimse
  ret txtcopiamai(obj1.perso ? "alguém" : "alguma coisa", arg0)

func o_n # Nome do segundo objeto
  se r == obj2
    ret txtcopiamai(config:mens_tu, arg0)
  senao obj2.visivel(r)
    ret arg0 === "N" ? txtcopiamai(obj2.descnome2, "A") : obj2.descnome2
  fimse
  ret txtcopiamai(obj2.perso ? "alguém" : "alguma coisa", arg0)

func o_n1 # Nome do segundo objeto
  se r == obj2
    ret txtcopiamai(config:mens_ti, arg0)
  senao obj2.visivel(r)
    ret arg0 === "N1" ? txtcopiamai(obj2.descnome2, "A") : obj2.descnome2
  fimse
  ret txtcopiamai(obj2.perso ? "alguém" : "alguma coisa", arg0)


classe mensvis
herda mens
# Mesmo que a classe mens, porém considera-se os personagens e itens
# sempre visíveis (não mostra "alguém" ou "alguma coisa")

func persomsg # Usado internamente, arg0 = mensagem de tu/ti
  ret r == perso, arg0
  ret !perso.temdomador, perso.descnome2
  ret vartrocacod(perso.persodomador == r ? perso.descdono1 : perso.descdono2, "$", "perso_")

func alvomsg # Usado internamente, arg0 = mensagem de tu/ti
  ret r == alvo, arg0
  ret !alvo.temdomador, alvo.descnome2
  ret vartrocacod(alvo.persodomador == r ? alvo.descdono1 : alvo.descdono2, "$", "alvo_")

func obj1msg # Usado internamente, arg0 = mensagem de tu/ti
  ret r == obj1, arg0
  ret !obj1.temdomador, obj1.descnome2
  ret vartrocacod(obj1.persodomador == r ? obj1.descdono1 : obj1.descdono2, "$", "obj1_")

func obj2msg # Usado internamente, arg0 = mensagem de tu/ti
  ret r == obj2, arg0
  ret !obj2.temdomador, obj2.descnome2
  ret vartrocacod(obj2.persodomador == r ? obj2.descdono1 : obj2.descdono2, "$", "obj2_")

const perso_d = perso.persodomador.descnome2
const alvo_d = alvo.persodomador.descnome2
const obj1_d = obj1.persodomador.descnome2
const obj2_d = obj2.persodomador.descnome2

func o_q # Nome do personagem sem citar o dono
  ret r == perso, txtcopiamai(config:mens_tu, arg0)
  ret arg0 === "Q" ? txtcopiamai(perso.descnome2, "A") : perso.descnome2

func o_q1 # Nome do personagem sem citar o dono
  ret r == perso, txtcopiamai(config:mens_ti, arg0)
  ret arg0 === "Q1" ? txtcopiamai(perso.descnome2, "A") : perso.descnome2

func o_b # Nome do alvo sem citar o dono
  ret r == alvo, txtcopiamai(config:mens_tu, arg0)
  ret arg0 === "B" ? txtcopiamai(alvo.descnome2, "A") : alvo.descnome2

func o_b1 # Nome do alvo sem citar o dono
  ret r == alvo, txtcopiamai(config:mens_ti, arg0)
  ret arg0 === "B1" ? txtcopiamai(alvo.descnome2, "A") : alvo.descnome2

func o_o # Nome do primeiro objeto
  ret r == obj1, txtcopiamai(config:mens_tu, arg0)
  ret arg0 === "O" ? txtcopiamai(obj1.descnome2, "A") : obj1.descnome2

func o_o1 # Nome do primeiro objeto
  ret r == obj1, txtcopiamai(config:mens_ti, arg0)
  ret arg0 === "O1" ? txtcopiamai(obj1.descnome2, "A") : obj1.descnome2

func o_n # Nome do segundo objeto
  ret r == obj2, txtcopiamai(config:mens_tu, arg0)
  ret arg0 === "N" ? txtcopiamai(obj2.descnome2, "A") : obj2.descnome2

func o_n1 # Nome do segundo objeto
  ret r == obj2, txtcopiamai(config:mens_ti, arg0)
  ret arg0 === "N1" ? txtcopiamai(obj2.descnome2, "A") : obj2.descnome2


classe mensjog
herda mens_tabela
ref perso # Personagem
txt512 mens # Mensagem usada em $M
const iniclasse = !$[arg0] && criar(arg0)

func txt # Prepara e retorna mensagem
# arg0=mensagem, arg1=a quem se destina a mensagem
  perso = arg1
  ret vartrocacod(vartrocacod(arg0, "$", "o_"), "\d", "x_")

func msg # Envia mensagem
# arg0=mensagem, arg1=a quem se destina a mensagem
  perso = arg1
  arg1.msg(vartrocacod(vartrocacod(arg0, "$", "o_"), "\d", "x_"))

const o_1 = ""
const o_2 = ""
const o_3 = ""
const o_4 = ""
const o_5 = ""
const o_h = txtcopiamai(perso.msexo2 ? "um" : "uma", arg0)
const o_i = ""
const o_j = ""
const o_m = arg0 === "M" ? txtcopiamai(mens, "A") : mens
const o_s = txtcopiamai(perso.msexo2 ? "o" : "a", arg0)
const o_t = ""
const o_u = ""
const o_v = txtcopiamai(perso.msexo2 ? "e" : "a", arg0)
const o_w = ""
const o_x = ""
const o_a = ""

func o_p
  ret perso == perso.contr, txtcopiamai(config:mens_tu, arg0)
  ret txtcopiamai(perso.msexo2 ? "seu " : "sua ", arg0) + perso.nome

func o_p1
  ret perso == perso.contr, txtcopiamai(config:mens_ti, arg0)
  ret txtcopiamai(perso.msexo2 ? "seu " : "sua ", arg0) + perso.nome

func o_q # Nome do personagem sem citar o dono
  ret r == perso, txtcopiamai(config:mens_tu, arg0)
  ret arg0 === "Q" ? txtcopiamai(perso.descnome2, "A") : perso.descnome2

func o_q1 # Nome do personagem sem citar o dono
  ret r == perso, txtcopiamai(config:mens_ti, arg0)
  ret arg0 === "Q1" ? txtcopiamai(perso.descnome2, "A") : perso.descnome2

func o_r # Nome do personagem no comando QUEM
  ret arg0 === "r", perso.sock ? perso.sock.nome : perso.nome
  ret txtcopiamai(perso.sock ? perso.sock.nome : perso.nome, "A")

const o_b = "" # Nome do alvo sem citar o dono
const o_c = "" # Nome do alvo no comando QUEM
const o_o = "" # Nome do primeiro objeto
const o_n = "" # Nome do segundo objeto


classe mens_prompt
# Monta mensagem do prompt a partir do prompt e do personagem
# Chamar com:
# $mens_prompt.mens(mensagem, personagem)
#
ref p1 # O próprio personagem
ref p2 # O animal usado por p1
ref a1 # Quem está batalhando com o personagem
ref a2 # O animal de quem está batalhando com o personagem
const iniclasse = !$[arg0] && criar(arg0)

func mens
# arg0 = mensagem
# arg1 = personagem
  p1 = ref(arg1), p2 = ref(p1.persoesc)
  a1 = ref(p1.atkenv.objlista), a2 = ref(a1.persobat)
  ret vartroca(arg0, "%", "m_")

func m_d
  ret arg0 === "d", txt(misc:hora) + ":" + misc:min # Hora no MUD
  datahora d
  d.agora # Hora no servidor
  ret txt(d.hora) + ":" + d.min

const m_g = p1.var.z_moedas_
const m_h = arg0 === "h" ? p2.pvida : p2.pvidamax
const m_l = arg0 === "l" ? p2.pnivel : a2.pnivel
const m_m = arg0 === "m" ? p2.pmana : p2.pmanamax

func m_n
  se arg0 === "n" # Nome do seu personagem
    ret p1 == p2 ? p1.descnome2 : p2.descnome2 + " de " + p1.descnome2
  fimse # Nome do seu oponente
  ret a1 == a2 ? a1.descnome2 : a2.descnome2 + " de " + a1.descnome2

func m_o
  se !a2
  senao arg0 === "o" # Pontos de vida do oponente em porcentagem
    ret int(a2.pvida * 100 / a2.pvidamax)
  fimse # Pontos de vida do oponente em uma barra de 10 caracteres
  uint8 x
  x = int(a2.pvida * 10 / a2.pvidamax)
  ret x >= 10 ? ">>>>>>>>>>" : txtrepete(">", x) + txtrepete(" ", 10 - x)

func m_p
  se arg0 === "p" # Pontos de vida em porcentagem
    ret int(p2.pvida * 100 / p2.pvidamax)
  fimse # Pontos de vida em uma barra de 10 caracteres
  uint8 x
  x = int(p2.pvida * 10 / p2.pvidamax)
  ret x >= 10 ? ">>>>>>>>>>" : txtrepete(">", x) + txtrepete(" ", 10 - x)

func m_t # Conforme o sol: amanhecendo, manhã, tarde, anoitecendo, noite
  ret arg0 === "t", " "
  casovar misc:hora
  casose "6"
    ret "amanhecendo"
  casose "7"
  casose "8"
  casose "9"
  casose "10"
  casose "11"
    ret "manhã"
  casose "12"
  casose "13"
  casose "14"
  casose "15"
  casose "16"
    ret "tarde"
  casose "17"
    ret "escurecendo"
  casose
    ret "noite"
  casofim

const m_v = arg0 === "v" ? p2.pmove : p2.pmovemax
const m_x = arg0 === "x" ? p2.expatual : p2.expmax - p2.expatual
const m_z = arg0 === "z" ? "\n" : "%"
const m_b = "\b"
const m_c0 = "\c0"
const m_c1 = "\c1"
const m_c2 = "\c2"
const m_c3 = "\c3"
const m_c4 = "\c4"
const m_c5 = "\c5"
const m_c6 = "\c6"
const m_c7 = "\c7"
const m_c8 = "\c8"
const m_c9 = "\c9"
const m_ca = "\ca"
const m_cb = "\cb"
const m_cc = "\cc"
const m_cd = "\cd"
const m_ce = "\ce"
const m_cf = "\cf"
const m_cg = "\cg"
const m_ch = "\ch"
const m_ci = "\ci"
const m_cj = "\cj"
const m_ck = "\ck"
const m_cl = "\cl"
const m_f0 = "\d0"
const m_f1 = "\d1"
const m_f2 = "\d2"
const m_f3 = "\d3"
const m_f4 = "\d4"
const m_f5 = "\d5"
const m_f6 = "\d6"
const m_f7 = "\d7"


classe mens_porta
# Monta mensagem para avisar sobre portas abertas e fechadas
#
# Chamar com:
# $mens_porta.mens(mensagem, sala, direção)
#
# Exemplo:
# $mens_porta.mens("$P est$o fechad$a.", dono, "s")
#
# Caracteres usados na mensagem:
const info = "$A = a,o,as,os, conforme a porta\n\
$M = um texto vazio (no singular) ou \"m\" (no plural)\n\
$O = \"á\" (no singular) ou \"ão\" (no plural)\n\
$P = nome da porta"
#
txt100 n # Nome da porta
txt2 tsexo # Pode ser a,as,o,os
txt2 tplural # Pode ser á,ão
txt2 tm # Pode ser "" ou "m"
txt100 tnome # Nome da porta
const iniclasse = !$[arg0] && criar(arg0)

func mens
  tnome = arg1.portanome_[arg2]
  !tnome && !(tnome = $cmd_[arg2].m_porta) && (tnome = "uma porta")
  casovar arg1.portaartigo_[arg2]
  casose # Feminino singular
    tplural = "á", tsexo = "a", tm = ""
    sair
  casose "1" # Feminino plural
    tplural = "ão", tsexo = "as", tm = "m"
    sair
  casose "2" # Masculino plural
    tplural = "á", tsexo = "o", tm = ""
    sair
  casose "3" # Masculino plural
    tplural = "ão", tsexo = "os", tm = "m"
    sair
  casofim
  ret vartroca(arg0, "$", "m_")

const m_a = arg0 === "a" ? tsexo : txtcopiamai(tsexo, "A")
const m_m = arg0 === "m" ? tm : txtcopiamai(tm, "A")
const m_o = arg0 === "o" ? tplural : txtcopiamai(tplural, "A")
const m_p = arg0 === "p" ? tnome : txtcopiamai(tnome, "A")
