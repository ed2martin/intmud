classe h_comando_ataque_cfg
herda comando_comum
const m_nao_consegue = "Você ainda não consegue fazer isso."
const m_animal_nao_consegue = "$A ainda não consegue fazer isso."
const m_naover = "Você não vê $m."
const m_desmaiado = "$A está desmaiado$t."
const m_nao_desmaiado = "$A não está desmaiad$t."
const m_sem_efeito = comando_hab_cfg:m_sem_efeito # Pega de outro menu
const m_com_animal = "Primeiro escolha um animal."
const m_sem_animal = "Primeiro escolha seu personagem."
const m_hab_auto = "A habilidade $m não pode ser usada nos outros."
const m_mag_auto = "A magia $m não pode ser usada nos outros."
const m_tec_auto = "Esse item não pode ser usado nos outros."
const m_auto = "Em você mesm$s?"
const m_grupo = "Atacar outro integrante do grupo?"
const m_magia_falhou = "A magia falhou."
const m_lugar_pacifico1 = "Aqui é um lugar pacífico."
const m_lugar_pacifico2 = "O alvo está em um lugar pacífico."
const m_alvo_pacifico = "$A não quer brigar."
const m_perso_pacifico = "Você não quer brigar com $a."
const m_jog_pacifico = "Você não quer brigar com $a aqui."
const m_municao_jog = "Você está sem munição."
const m_municao_animal = "$A está sem munição."
const m_municao_arma = "$O está sem munição."
const m_municao_nao = "$O não possui munição."
const admordem = "m_nao_consegue m_animal_nao_consegue m_naover m_desmaiado\n\
m_nao_desmaiado m_com_animal m_sem_animal m_hab_auto m_mag_auto m_auto m_grupo\n\
m_magia_falhou m_lugar_pacifico1 m_lugar_pacifico2 m_alvo_pacifico\n\
m_perso_pacifico m_jog_pacifico m_municao_jog m_municao_animal m_municao_arma\n\
m_municao_nao"


classe comando_ataque
herda comando_hab, comando_danos
const objcmd = tipoalvo < 9 && arg0.persoesc.var.[nomevar] ? este
const cmdmenu = "ataque" # Editável via "menu_hab_ataque" e "menu_magia_ataque"
const nomevar = "" # Nome da variável que indica o quanto sabe do ataque
const aulapontos = config:a_aulapontos
const tipoalvo = 0 # Alvo
const tipoatk = 0 # Tipo de golpe
const a_montado = 1
const a_em_pe = 1
const a_bat_sentado = 1
const a_bat_montado = 1
const a_bat_em_pe = 1
const ataquemin = config:a_ataquemin # Força de ataque nível iniciante, 100 significa 100%
const ataquemax = config:a_ataquemax # Força de ataque nível perito, 100 significa 100%
const fatormin = config:a_fatormin
const fatormax = config:a_fatormax
const ataque1 = 0
const ataque1perso = 1
const ataque1arma = 1
const ataque1municao = 1
const ataque1item = 0
const ataque2 = config:a_ataque2
const ataque2perso = config:a_ataque2perso
const ataque2nivel = config:a_ataque2nivel
const atknivel = config:atknivel
const atkfalha = 1
const subprecisao = config:a_subprecisao
const vel = config:a_vel # Velocidade do golpe, 100 significa 100%
const a_prob1 = 100
const a_prob2 = 100
const a_prob3 = 100
const c_espera = config:atkespera # Tempo de esperar após usar esse comando
int32 mudavida # Para calcular mudança nos pontos de vida do alvo
int8 result # Resultado da batalha:
# 0=acertou o alvo, 1=não teve efeito, 2=errou o alvo, 3=esquivou, 4=cancelar ataque
ref arma1 # Arma usada
ref arma2 # Munição usada
const atk1_auto1 = "$P ataca $a, $m"
const atk1_perso1 = "$P ataca $a, $m"
const atk1_matou1 = "$P ataca e mata $a, $m"
const atk1_errou1 = "$P ataca $a, errou"
const atk1_nulo1 = "$P ataca $a, nada acontece"
#
# Ordem que deve organizar as constantes:
const admordem = "nomevar\n\
tipoalvo\n\
a_dormindo a_descansando a_sentado a_montado\n\
a_em_pe a_bat_sentado a_bat_montado a_bat_em_pe\n\
a_cond\n\
a_efeito1 a_efeito2 a_efeito3\n\
a_prob1 a_prob2 a_prob3\n\
a_mana1 a_mana2\n\
a_move1 a_move2\n\
a_remove\n\
a_vida1 a_vida2\n\
c_espera\n\
c_vida1 c_vida2\n\
c_mana1 c_mana2\n\
c_move1 c_move2\n\
ataquemin ataquemax\n\
fatormin fatormax\n\
ataque1 ataque1perso ataque1arma ataque1municao ataque1item\n\
ataque2 ataque2perso ataque2nivel atknivel\n\
aulaini aulafim aulapontos aularenascer\n\
depende\n\
atkfalha falha1 falha2\n\
addprecisao subprecisao\n\
armamove\n\
tipoefeitosim tipovestirsim tipovestirnao tipoinvsim tipoinvnao\n\
tipoarma\n\
tipoatk\n\
tipobonus\n\
tipoperso\n\
tipomunicao\n\
itemmunicao\n\
valor\n\
vel\n\
msgextra\n\
atk1_usar1 atk1_usar2 atk1_usar3\n\
atk1_auto1 atk1_auto2 atk1_perso1 atk1_perso2 atk1_perso3\n\
atk1_matou1 atk1_matou2 atk1_matou3\n\
atk1_errou1 atk1_errou2 atk1_errou3\n\
atk1_nulo1 atk1_nulo2 atk1_nulo3\n\
atk1_esquivou1 atk1_esquivou2 atk1_esquivou3\n\
atk2_usar1 atk2_usar2 atk2_usar3\n\
atk2_auto1 atk2_auto2 atk2_perso1 atk2_perso2 atk2_perso3\n\
atk2_matou1 atk2_matou2 atk2_matou3\n\
atk2_errou1 atk2_errou2 atk2_errou3\n\
atk2_nulo1 atk2_nulo2 atk2_nulo3\n\
atk2_esquivou1 atk2_esquivou2 atk2_esquivou3\n\
atk3_usar1 atk3_usar2 atk3_usar3\n\
atk3_auto1 atk3_auto2 atk3_perso1 atk3_perso2 atk3_perso3\n\
atk3_matou1 atk3_matou2 atk3_matou3\n\
atk3_errou1 atk3_errou2 atk3_errou3\n\
atk3_nulo1 atk3_nulo2 atk3_nulo3\n\
atk3_esquivou1 atk3_esquivou2 atk3_esquivou3\n\
atk4_usar1 atk4_usar2 atk4_usar3\n\
atk4_auto1 atk4_auto2 atk4_perso1 atk4_perso2 atk4_perso3\n\
atk4_matou1 atk4_matou2 atk4_matou3\n\
atk4_errou1 atk4_errou2 atk4_errou3\n\
atk4_nulo1 atk4_nulo2 atk4_nulo3\n\
atk4_esquivou1 atk4_esquivou2 atk4_esquivou3\n\
atk5_usar1 atk5_usar2 atk5_usar3\n\
atk5_auto1 atk5_auto2 atk5_perso1 atk5_perso2 atk5_perso3\n\
atk5_matou1 atk5_matou2 atk5_matou3\n\
atk5_errou1 atk5_errou2 atk5_errou3\n\
atk5_nulo1 atk5_nulo2 atk5_nulo3\n\
atk5_esquivou1 atk5_esquivou2 atk5_esquivou3"
#
const escr = escrhab(arg0, arg1)

func escrhab # Atacar alguém ou usar habilidade/magia não ofensiva em alguém
# arg0 = personagem
# arg1 = o que o personagem digitou; usado para obter o personagem alvo
# arg2 = item usado, ou nulo se não usou nenhum item
# arg3 = nível da magia, se usou algum item
# arg4 = texto "classe função" executada se usou a habilidade/magia
# exemplo, "a b" chama $a.b(arg0, arg1, arg2, arg3)
  ref alvo
  refvar perm = $perm_[arg0.jogperm]
  refvar m1 = txt1(txte(nomevar)) == "m" ? perm.usar_mag : perm.usar_hab
  refvar p = arg0.persoesc
  txt100 dir
  se m1
    ret arg0.msg(m1)
  senao p.pnivel < intpos(int(aulaini) - config:nrenascer * txt2(p.var.[nomevar]))
    ret p == arg0, $mens.mp(comando_ataque_cfg:m_nao_consegue, arg0)
    ret $mens.mp(comando_ataque_cfg:m_animal_nao_consegue, arg0, p)
  senao arg1 # Digitou o alvo
    int16 move
    listaitem i
    nomeobj n
    refvar arma1 = tipoarma ? ref(arg0.iempu.obj) : nulo
    refvar dist = int(arma1 ? arma1.armamove : armamove)
    dir = dist > 0 ? misc:d1[txt1(arg1)]
    se !misc:d3[dir] # Alvo está na mesma sala
      se arg1 != intpos(arg1) || config:animal1 < arg1 || !config:animal1
        n.ini(arg1, 1)
        epara i = arg0.dono.dentro2.ini, i, i.depois
          sair i.obj.visivel(arg0) && n.nome(i.obj.ident2)
        efim
        alvo = i.obj.persobat
      senao arg1 == "0"
        alvo = arg0
      senao
        uint8 num = arg1
        epara i = arg0.dentro2.ini, i, i.depois
          i.obj.perso && num--
          sair num == 0
        efim
        alvo = i.obj
      fimse
    senao txt2(arg1) # Um alvo específico em outra sala
      ref sala
      n.ini(txt2(arg1), 1)
      epara sala = arg0.dono, sala && move < dist, sala = sala.dirsala(dir)
        se move
          epara i = sala.dentro2.ini, i, i.depois
            sair i.obj.visivel(arg0) && n.nome(i.obj.ident2)
          efim
        fimse
        sair i.obj || int(sala.porta_[dir]) >= 2 # Achou o alvo ou porta fechada
        move += intmax(1, sala.dirsala(dir).s_atk_move)
      efim
      alvo = i.obj.persobat
    senao # Qualquer um em outra sala
      ref sala
      uint8 totalperso
      epara sala = arg0.dono, sala && move < dist, sala = sala.dirsala(dir)
        se move
          epara i = sala.dentro2.ini, i, i.depois
            i.obj.visivel(arg0) && totalperso++
          efim
        fimse
        se totalperso
          totalperso = rand(totalperso)
          epara i = sala.dentro2.ini, i, i.depois
            sair i.obj.visivel(arg0) && totalperso-- == 0
          efim
          sair
        fimse
        sair int(sala.porta_[dir]) >= 2 # Achou porta fechada
        move += intmax(1, sala.dirsala(dir).s_atk_move)
      efim
      alvo = i.obj.persobat
    fimse
    se !alvo
      $mens.mens = arg1
      ret $mens.mp(comando_ataque_cfg:m_naover, arg0)
    fimse
  senao tipoalvo >= 6 # Hab não agressiva: o alvo é o próprio personagem
    alvo = arg0.persobat
  senao arg2.f_tipo == 4 # Hab agressiva usando pergaminho
    alvo = arg0.atkenv.objlista
    (!alvo || alvo.dono != arg0.dono) && (alvo = arg0)
    alvo = alvo.persobat
  senao arg2.item # Hab agressiva usando outro item
    alvo = arg0.persobat
  senao # Hab agressiva sem usar um item: o alvo é quem está batalhando
    alvo = arg0.atkenv.objlista
    ret !alvo || alvo.dono != arg0.dono, arg0.msg("Atacar quem?")
    alvo = alvo.persobat
  fimse
  se arg2
    exechab(p, alvo, 0.5, arg3, arg2, dir, arg4)
  senao
    exechab(p, alvo, intpos(p.var.[nomevar]_ - 1) / 7, p.pnivel, arg2, dir, arg4)
  fimse
  arg0.p_espera < p.p_espera && (arg0.p_espera = p.p_espera)

func exechabperso # Personagem usa uma habilidade ou magia
# arg0 = quem está usando a habilidade ou magia
# arg1 = personagem alvo
  arg0 && arg1 && exechab(arg0, arg1, intpos(arg0.var.[nomevar] - 1) / 7, arg0.pnivel)

func exechab # Chamado quando personagem usa habilidade ou magia
# arg0 = quem está usando a habilidade ou magia
# arg1 = personagem alvo
# arg2 = quanto sabe da habilidade ou magia (0=iniciante até 1=perito)
# arg3 = nível da habilidade ou magia (=nível do personagem)
# arg4 = item usado (exemplo, um pergaminho), ou nulo se não usou nenhum item
# arg5 = direção do personagem ao alvo, se o alvo não estiver na mesma sala
# arg6 = texto "classe função" executada se usou a habilidade/magia
# exemplo, "a b" chama $a.b(arg0, arg1, arg2, arg3)
# Retorna: 0=cancelado, 1=interceptado por trigger, 2=ocorreu normalmente
  ret !checahab2(arg0, arg2, arg4), 0
  refvar contr0 = arg0.contr
  refvar contr1 = arg1.contr
# Checa condição do alvo
  se !a_cond
    se !arg1.pvidaok
      $mens.mp(comando_ataque_cfg:m_desmaiado, contr0, arg1)
      ret 0
    fimse
  senao a_cond == 1
    se arg1.pvidaok
      $mens.mp(comando_ataque_cfg:m_nao_desmaiado, contr0, arg1)
      ret 0
    fimse
  senao dono.s_semmagia && txt(nomevar, 0, 1) == "m"
    $mens.mp(comando_ataque_cfg:m_sem_efeito, contr0, arg1)
    ret 0
  fimse
# Obtém a arma usada
  refvar errmuni = execmunicao(arg0)
  se errmuni
    contr0.msg(errmuni)
    ret 0
  fimse
# Técnicas não agressivas
  listaobj l
  casovar tipoalvo
  casose "8"
  casose "7"
    se arg0 != arg1
      refvar tt = txt(nomevar, 0, 1)
      refvar msg = tt == "m" ? "m_mag_auto" : tt == "h" ? "m_hab_auto" : "m_tec_auto"
      $mens.mens = txt2(txte(nomevar))
      $mens.mp(comando_ataque_cfg:[msg], contr0, arg0)
      ret 0
    fimse
  casose "6"
    ret comando_ataque_cfg:cmd_alvo(arg0, arg1, este, nulo, 1), 1
    ret cmd_alvo(arg0, arg1, este, nulo, 1), 1
    epara l.addfim(contr0.evento), l, l.ini.remove
      ret l.objini.cmd_alvocontr(arg0, arg1, este, arg0), 1
    efim
    epara l.addfim(contr1.evento), l, l.ini.remove
      ret l.objini.cmd_alvocontr(arg0, arg1, este, arg1), 1
    efim
    epara l.addfim(arg0.evento), l, l.ini.remove
      ret l.objini.cmd_alvo(arg0, arg1, este, arg0, 1), 1
    efim
    epara l.addfim(arg0 != arg1 ? arg1.evento), l, l.ini.remove
      ret l.objini.cmd_alvo(arg0, arg1, este, arg1, 1), 1
    efim
    se !arg4.item
      custohab2(arg0, arg2)
      mensinicio(arg0, arg1)
    fimse
    arg6 && $[txt1(arg6)].[txt2(arg6)](arg0, arg1, arg2, arg3, arg4, arg5)
    tipomunicao == 2 && arma2.apagar(1)
    mudavida = 0
    se contr0.dono.s_semmagia && txt(nomevar, 0, 1) == "m"
      result = 1 # Sem efeito
    senao rand(100) < falha1 + arg2 * (falha2 - falha1)
      result = 2 # Errou o alvo
    senao
      result = 0 # Acertou o alvo
      efeitohab(arg0, arg1, arg2, arg3)
    fimse
    arg1.p_imortal && (arg1.pvida = intmax(arg1.pvida, arg1.pvidamax)) # Imortal
    mensgolpe(arg0, arg1, arg5)
    comando_ataque_cfg:cmd_alvofim(arg0, arg1, este, nulo, 1)
    cmd_alvofim(arg0, arg1, este, nulo, 1)
    epara l.addfim(arg0.evento), l, l.ini.remove
      l.objini.cmd_alvofim(arg0, arg1, este, arg0, 1)
    efim
    epara l.addfim(arg0 != arg1 ? arg1.evento), l, l.ini.remove
      l.objini.cmd_alvofim(arg0, arg1, este, arg1, 1)
    efim
    se tipoalvo == 8 && result == 0
      ref r
      txt100 acertou = arg0.descnome2
      listaobj outros
      contr0.listagrupo(outros)
      epara outros.remove(contr0), outros, outros.ini.remove
        r = outros.objini.persobat
        continuar r.dono != contr0.dono
        l.limpar
        continuar comando_ataque_cfg:cmd_alvo(arg0, r, este, nulo, 0)
        continuar cmd_alvo(arg0, r, este, nulo, 0)
        epara l.addfim(arg0.evento), l, l.ini.remove
          sair l.objini.cmd_alvo(arg0, r, este, arg0, 0)
        efim
        continuar l
        epara l.addfim(arg0 != arg1 ? arg1.evento), l, l.ini.remove
          sair l.objini.cmd_alvo(arg0, r, este, r, 0)
        efim
        continuar l
        acertou += ", " + txtcopiamai(r.contr.descnome2, "A")
        result = 0 # Acertou o alvo
        efeitohab(arg0, r, arg2, arg3)
        r.p_imortal && (r.pvida = intmax(r.pvida, r.pvidamax)) # Imortal
        mensgolpe2(arg0, r, arg5)
        comando_ataque_cfg:cmd_alvofim(arg0, r, este, nulo, 0)
        cmd_alvofim(arg0, r, este, nulo, 0)
        epara l.addfim(arg0.evento), l, l.ini.remove
          l.objini.cmd_alvofim(arg0, r, este, arg0, 0)
        efim
        epara l.addfim(r.evento), l, l.ini.remove
          l.objini.cmd_alvofim(arg0, r, este, r, 0)
        efim
      efim
      acertou = "Acertou: " + acertou
      epara l.addfim(contr0.dono.dentro2), l, l.ini.remove
        l.objini.msg(acertou)
      efim
    fimse
    arg1.pvidaok ? arg1.acertapos(1) : arg1.morreu(arg0)
    arg0 != arg1 && arg0.acertapos(1)
    ret 2
  casose "1" # Ataque que não pode ser ao próprio personagem
  casose "3"
  casose "5"
    sair arg0 != arg1
    $mens.mp(comando_ataque_cfg:m_auto, contr0)
    ret 0
  casofim
# Checa se pode atacar com animal/sem animal
  casovar contr0.p_animalatk
  casose "2"
    sair arg0 != contr0
    $mens.mp(comando_ataque_cfg:m_com_animal, contr0, contr1)
    ret 0
  casose "1"
    sair arg0 == contr0
    $mens.mp(comando_ataque_cfg:m_sem_animal, contr0, contr1)
    ret 0
  casofim
# Checa o alvo
  se arg0 != arg1 && contr0.mesmogrupo(contr1)
    $mens.mp(comando_ataque_cfg:m_grupo, contr0, contr1)
    ret 0
  senao !contr0.dono.s_luta
    refvar msg1 = arg4.item && !arg6 ? "m_magia_falhou" : "m_lugar_pacifico1"
    $mens.mp(comando_ataque_cfg:[msg1], contr0, contr1)
    ret 0
  senao !contr1.dono.s_luta
    refvar msg1 = arg4.item && !arg6 ? "m_magia_falhou" : "m_lugar_pacifico2"
    $mens.mp(comando_ataque_cfg:[msg1], contr0, contr1)
    ret 0
  senao !contr1.p_agressivo(arg0)
    $mens.mp(comando_ataque_cfg:m_alvo_pacifico, contr0, contr1)
    ret 0
  senao !contr0.p_agressivo(arg1)
    $mens.mp(comando_ataque_cfg:m_perso_pacifico, contr0, contr1)
    ret 0
  senao
    ref p0 = (contr0.tseguir == 3 ? contr0.iseguir.objlista : contr0) ?? contr0
    ref p1 = (contr1.tseguir == 3 ? contr1.iseguir.objlista : contr1) ?? contr1
    se p0.jog && p1.jog && (contr0.dono.s_luta == 1 || contr1.dono.s_luta == 1)
      se arg0 != arg1
        $mens.mp(comando_ataque_cfg:m_jog_pacifico, contr0, contr1)
        ret 0
      fimse
    fimse
    refvar m = contr0.p_atk_individual ?? contr1.p_atk_individual
    se m && (contr0.atkenv || contr1.atkenv)
      se !contr0.atkrec.possui(contr1) || !contr1.atkrec.possui(contr0)
        $mens.mp(m, contr0, contr1)
        ret 0
      fimse
    fimse
  fimse
# Dispara eventos do primeiro alvo
  ret comando_ataque_cfg:cmd_atacar(arg0, arg1, este, nulo, 1), 1
  ret cmd_atacar(arg0, arg1, este, nulo, 1), 1
  epara l.addfim(contr0.evento), l, l.ini.remove
    ret l.objini.cmd_atacarcontr(arg0, arg1, este, contr0), 1
  efim
  epara l.addfim(contr1.evento), l, l.ini.remove
    ret l.objini.cmd_atacarcontr(arg0, arg1, este, contr1), 1
  efim
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_atacar(arg0, arg1, este, arg0, 1), 1
  efim
  epara l.addfim(arg0 != arg1 ? arg1.evento), l, l.ini.remove
    ret l.objini.cmd_atacar(arg0, arg1, este, arg1, 1), 1
  efim
# Custo da hab/magia e checa se é permitido usar ataques
  se !arg4.item
    custohab2(arg0, arg2)
    mensinicio(arg0, arg1)
  fimse
  arg6 && $[txt1(arg6)].[txt2(arg6)](arg0, arg1, arg2, arg3, arg4, arg5)
  tipomunicao == 2 && arma2.apagar(1)
  se contr0.dono.s_semmagia && txt(nomevar, 0, 1) == "m"
    result = 1
    mensgolpe(arg0, arg1, arg5)
    arg0.acertapos(1)
    ret 2
  fimse
# Alvos secundários (somente ataques de área)
  se tipoalvo >= 2 && tipoalvo <= 5
    listaitem i
    listaobj outros
    contr0.listagrupo(outros)
    l.addfim(contr1.dono.dentro2)
    l.remove(contr0, contr1, outros)
    se contr0.jog && contr0.dono.s_luta < 2 # Sala não permite luta entre jogadores
      i = l.ini
      enquanto i
        ref p1 = (i.obj.tseguir == 3 ? i.obj.iseguir.objlista : i.obj) ?? i.obj
        p1.jog ? i.removedepois : i.depois
      efim
    fimse
    i = l.ini # Não atacar PNJs que ajudam e que pedem ajuda
    enquanto i
      se txt2(txte(contr0)) && txtproclin(i.obj.p_atk_ajuda, txt2(txte(contr0))) >= 0
        i.removedepois
      senao txt2(txte(i.obj)) && txtproclin(contr0.p_atk_ajuda, txt2(txte(i.obj))) >= 0
        i.removedepois
      senao # Animais soltos de outros personagens não são alvo secundário
        i.obj.contr == i.obj ? i.depois : i.removedepois
      fimse
    efim
  fimse
# Modificadores da força do ataque
  real2 atk
  casovar tipoalvo
  casose "2" # Todos dividindo o ataque
  casose "3"
    atk = 1 / (l.total + 1)
    sair
  casose "9" # Ataque automático
    atk = config:atkfor / 100
    sair
  casose # Outros ataques
    atk = 1
  casofim
# Checa a arma usada
  se arma1
    real2 carga = arma1.pesoden + arma1.pesoobj + arma1.pesovar
    carga = (arg0.pesoden - arg0.pesovest + carga * 4) / (arg0.pesomax + 1)
    se carga > 1.2 # Muito pesado
      atk /= carga < 1.4 ? 10 : 100
      contr0.msg("É muito peso!")
    senao carga > 1 # Um pouco pesado
      atk *= 5 - 4 * carga # se carga=1,atk*=1  se carga=1.2,atk*=0.2
      contr0.msg("Bastante peso!")
    fimse
  fimse
# Checa sede e fome
  atk /= (2 + $miscfome.f.[arg0.p_sede] + $miscfome.f.[arg0.p_fome]) / 2
# Coloca os personagens na sala se necessário
  se arg0.dono.perso && arg0.p_animal == 3
    prog p
    p.iniherdainv("h_cmd_soltar")
    refvar soltar = $[p.texto]
    refvar sala = contr0.dono
    arg0.mudadono(sala)
    $mens.p(contr0, arg0)
    $mens.mvis2(soltar.m_soltar_anim1, soltar.m_soltar_anim2)
    listaobj e
    soltar.cmd_soltouanim(contr0, sala, arg0)
    epara e.addfim(contr0.evento), e, e.ini.remove
      e.objini.cmd_soltouanim(contr0, sala, arg0, contr0)
    efim
    epara e.addfim(sala.evento), e, e.ini.remove
      e.objini.cmd_soltouanim(contr0, sala, arg0, sala)
    efim
    epara e.addfim(arg0.evento), e, e.ini.remove
      e.objini.cmd_soltouanim(contr0, sala, arg0, arg0)
    efim
  fimse
  se arg1.dono.perso && arg1.p_animal == 3
    prog p
    p.iniherdainv("h_cmd_soltar")
    refvar soltar = $[p.texto]
    refvar sala = contr1.dono
    arg1.mudadono(sala)
    $mens.p(contr1, arg1)
    $mens.mvis2(soltar.m_soltar_anim1, soltar.m_soltar_anim2)
    listaobj e
    soltar.cmd_soltouanim(contr1, sala, arg1)
    epara e.addfim(contr1.evento), e, e.ini.remove
      e.objini.cmd_soltouanim(contr1, sala, arg1, contr1)
    efim
    epara e.addfim(sala.evento), e, e.ini.remove
      e.objini.cmd_soltouanim(contr1, sala, arg1, sala)
    efim
    epara e.addfim(arg1.evento), e, e.ini.remove
      e.objini.cmd_soltouanim(contr1, sala, arg1, arg1)
    efim
  fimse
# Ataca o alvo escolhido
  listaobj e
  tipoalvo != 9 && velgolpe(arg0, arg1) # Tempo do golpe
  arg5 && (contr1.p_atacou_dir = misc:d2[arg5])
  se contr1.p_animalatk == 2 && arg1 == contr1 # Só luta com animal mas está sem animal
    arg0.batalhaini(arg1)
    result = 0 # Acertou
    mudavida = -arg1.pvida - arg1.pvidamax
    arg1.pvida += mudavida
  senao arg5 && arg1.p_atk_desvia
    arg0.batalhaini(arg1)
    result = 2 # Desvia
  senao
    execgolpe(arg0, arg1, arg2, arg3, arg4, atk) # Ataca
    arg1.pvida += mudavida
  fimse
  se result != 4
    !result && efeitohab(arg0, arg1, arg2, arg3) # Acertou: aplica os efeitos
    !result && (contr0.atkdanos += intpos(-mudavida))
    arg1.p_imortal && (arg1.pvida = intmax(arg1.pvida, arg1.pvidamax)) # Imortal
    mensgolpe(arg0, arg1, arg5)
    comando_ataque_cfg:cmd_atacou(arg0, arg1, este, nulo, 1)
    cmd_atacou(arg0, arg1, este, nulo, 1)
    epara e.addfim(arg0.evento), e, e.ini.remove
      e.objini.cmd_atacou(arg0, arg1, este, arg0, 1)
    efim
    epara e.addfim(arg0 != arg1 ? arg1.evento), e, e.ini.remove
      e.objini.cmd_atacou(arg0, arg1, este, arg1, 1)
    efim
    arg1.pvidaok ? arg1.acertapos(1) : arg1.morreu(arg0)
  fimse
# Ataca os alvos secundários
  ref r
  txt200 danos
  epara nulo, l, l.ini.remove
    continuar l.objini.perso < 2 # Não prossegue se for pacífico
    r = l.objini.persobat
    continuar !r.contr.p_agressivo(arg0)
    continuar comando_ataque_cfg:cmd_atacar(arg0, r, este, nulo, 0)
    continuar cmd_atacar(arg0, r, este, nulo, 0)
    e.limpar
    epara e.addfim(arg0.evento), e, e.ini.remove
      sair e.objini.cmd_atacar(arg0, r, este, arg0, 0)
    efim
    continuar e
    epara e.addfim(r.evento), e, e.ini.remove
      sair e.objini.cmd_atacar(arg0, r, este, r, 0)
    efim
    continuar e
    tipoalvo != 9 && velgolpe(arg0, r) # Tempo do golpe
    arg5 && (r.contr.p_atacou_dir = misc:d2[arg5])
    se r.contr.p_animalatk == 2 && r == r.contr # Só luta com animal mas está sem animal
      arg0.batalhaini(r)
      result = 0 # Acertou
      mudavida = -r.pvida - r.pvidamax
      r.pvida += mudavida
    senao arg5 && r.p_atk_desvia
      arg0.batalhaini(r)
      result = 2 # Desvia
    senao
      execgolpe(arg0, r, arg2, arg3, arg4, atk) # Ataca
      r.pvida += mudavida
      continuar result == 4
    fimse
    refvar acertou = !result
    acertou && efeitohab(arg0, r, arg2, arg3) # Acertou: aplica os efeitos
    r.p_imortal && (r.pvida = intmax(r.pvida, r.pvidamax)) # Imortal
    mensgolpe2(arg0, r, arg5)
    comando_ataque_cfg:cmd_atacou(arg0, r, este, nulo, 0)
    cmd_atacou(arg0, r, este, nulo, 0)
    epara e.addfim(arg0.evento), e, e.ini.remove
      e.objini.cmd_atacou(arg0, r, este, arg0, 0)
    efim
    epara e.addfim(r.evento), e, e.ini.remove
      e.objini.cmd_atacou(arg0, r, este, r, 0)
    efim
    se r.pvidaok
      acertou && (danos += ", " + txtcopiamai(r.descnome2, "A") + " " + mudavida)
      r.acertapos(1)
    senao
      !config:atkexpsecundario && arg0.batalhafim # Não ganha experiência matando esse alvo
      r.morreu(arg0)
    fimse
  efim
  e.limpar
  se danos
    danos = "Danos: " + txt(danos, 1)
    epara l.addfim(contr0.dono.dentro2), l, l.ini.remove
      l.objini.msg(danos)
    efim
  fimse
  arg0.acertapos(1)
  ret 2

func execmunicao # Obtém a arma usada: arma1 e arma2
# arg0 = personagem
# Retorna mensagem de erro ou "" se conseguiu obter a munição
  txt40 erro
  arma1 = tipoarma ? ref(arg0.iempu.obj) : nulo
  arma2 = nulo
  se !tipomunicao # Não usa munição
    ret ""
  senao !arma1 # Sem arma: munição no inventário
    int16 p_nivel = arg0.pnivel
    int8 p_renascer = arg0.renascer
    refvar lista = itemmunicao ? "i_" + txttroca(itemmunicao, "\n", "\ni_") : ""
    listaitem i
    epara i = arg0.dentro1.ini, i, i.depois
      continuar txtproclin(lista, i.obj) < 0
      sair p_nivel >= int(i.obj.pnivel) && p_renascer >= int(i.obj.renascer)
    efim
    arma2 = i.obj
    !arma2 && (erro = arg0 == contr.arg0 ? "m_municao_jog" : "m_municao_animal")
  senao arma1.armamunicao == 1 # Munição no inventário
    int16 p_nivel = arg0.pnivel
    int8 p_renascer = arg0.renascer
    refvar lista = arma1.i_municao ? "i_" + txttroca(arma1.i_municao, "\n", "\ni_") : ""
    listaitem i
    epara i = arg0.dentro1.ini, i, i.depois
      continuar txtproclin(lista, i.obj) < 0
      sair p_nivel >= int(i.obj.pnivel) && p_renascer >= int(i.obj.renascer)
    efim
    arma2 = i.obj
    !arma2 && (erro = arg0 == contr.arg0 ? "m_municao_jog" : "m_municao_animal")
  senao arma1.armamunicao == 2 # Munição na arma
    arma2 = arma1.dentro1.objini
    !arma2 && (erro = "m_municao_arma")
  senao # Ataque requer munição mas a arma não usa munição
    erro = "m_municao_nao"
  fimse
  ret !erro, ""
  $mens.p(arg0.contr, arg0, arma1)
  ret $mens.txt(comando_ataque_cfg:[erro], arg0.contr)

func efeitohab # Efeito da habilidade ou magia sobre o alvo
# arg0 = quem lançou a habilidade ou magia
# arg1 = personagem alvo
# arg2 = quanto sabe da habilidade ou magia (0=iniciante até 1=perito)
# arg3 = nível da habilidade ou magia (=nível do personagem)
# Nota: Altera mudavida conforme pontos de vida alterados
  a_efeito1 && criar("e_" + a_efeito1, arg1, rand(100) < a_prob1 ? arg3 : -1)
  a_efeito2 && criar("e_" + a_efeito2, arg1, rand(100) < a_prob2 ? arg3 : -1)
  a_efeito3 && criar("e_" + a_efeito3, arg1, rand(100) < a_prob3 ? arg3 : -1)
  se a_remove
    textotxt t
    epara t.addfim(a_remove), t.linhas, apagar(arg1.dentro2.objini("e_" + t.remove))
    efim
  fimse
  real2 valor
  valor = (a_move1 + a_move2 * arg3) * (0.5 + arg2)
  valor && (arg1.pmove = intmin(arg1.pmove + valor, intmax(arg1.pmove, arg1.pmovemax)))
  valor = (a_mana1 + a_mana2 * arg3) * (0.5 + arg2)
  valor && (arg1.pmana = intmin(arg1.pmana + valor, intmax(arg1.pmana, arg1.pmanamax)))
  ret !(valor = (a_vida1 + a_vida2 * arg3) * (0.5 + arg2)), nulo
  refvar vida = int(arg1.pvida)
  arg1.pvida = intmin(vida + valor, intmax(arg1.pvida, arg1.pvidamax))
  mudavida += arg1.pvida - vida

func velgolpe # Acerta o tempo de espera conforme o golpe
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# vel = velocidade do golpe
  refvar p_espera = arg0.contr.p_espera
  se arg0.pveloc <= 0 || vel <= 0
    p_espera = intmax(p_espera, config:atkmtempo)
  senao
    refvar t1 = config:atkmtempo * arg1.pveloc * 70 / (arg0.pveloc * vel)
    refvar t2 = intmax(2, intmin(config:atkmtempo, t1))
    p_espera = intmax(p_espera, t2)
  fimse

func execgolpe # Calcula o resultado de um ataque e coloca em result e mudavida
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# arg2 = quanto sabe da habilidade ou magia (0=iniciante até 1=perito)
# arg3 = nível da habilidade ou magia (=nível do personagem)
# arg4 = item usado (exemplo, um pergaminho), ou nulo se não usou nenhum item
# arg5 = modificadores de fome, sede e dividir o ataque, 0=não calcular danos
# tipoatk = tipo de ataque, arma1 = arma usada, arma2 = munição usada
  real2 dano
  real2 danoadd
  uint8 danotipo
# Checa se pode realmente atacar
  result = 4, mudavida = 0, dano = 1
  listaobj l
  ret cmd_atkenv(arg0, arg1, este, dano, danoadd, danotipo), nulo
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_atkenv(arg0, arg1, este, dano, danoadd, danotipo), nulo
  efim
  epara l.addfim(arg1.evento), l, l.ini.remove
    ret l.objini.cmd_atkrec(arg0, arg1, este, dano, danoadd, danotipo), nulo
  efim
# Indica que atacou, recebe experiência se vencer
  arg0.batalhaini(arg1)
  se arg0.podepegar && arg1.contr.var.o_agenda # Coloca na agenda
    refvar v1 = arg1.contr.var.a_[arg0.nome]
    !v1 && (v1 = 1)
  fimse
# Checa se acertou o alvo
  result = rand(1, 20)
  se rand(100) < falha1 + arg2 * (falha2 - falha1)
    result = 2
    ret
  senao !atkfalha
  senao arma1 && rand(100) < arma1.var.z_armafalha_
    result = 2
    ret
  senao arma2 && rand(100) < arma2.var.z_armafalha_
    result = 2
    ret
  senao result == 20 || arg1.posicao <= 4 || danotipo == 1 # Acertou automaticamente
  senao result == 1 # Errou o alvo automaticamente
    result = 3
    ret
  senao arg0.jog && rand($miscfome.bebeatk, $miscfome.cheio) < arg0.p_bebida
    result = 2
    ret
  senao arg1.jog && rand($miscfome.bebeatk, $miscfome.cheio) < arg1.p_bebida # Embriagado
  senao # Checa se acertou
    real2 v
    v = result + arg0.precisao + addprecisao + arma1.var.z_armaaddprecisao_ - arg1.evasao
    se arg1.visivel(arg0)
      refvar p = arg0.p_precisaover
      v -= subprecisao * (p !== nulo ? p : $t_[arg0.tipo1].p_precisaover) / 100
    senao
      refvar p = arg0.p_precisaoinv
      v -= subprecisao * (p !== nulo ? p : $t_[arg0.tipo1].p_precisaoinv) / 100
    fimse
    result = 2
    ret v <= 0, nulo
  fimse
# Indica que acertou o alvo
  result = 0
# Checa bônus ao combinar o tipo de ataque com o tipo de defesa
  dano *= arg0.atktipo.[2 + tipoatk] * arg1.deftipo.[2 + tipoatk]
  se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
    dano *= arg0.atktipo.1 * arg1.deftipo.1
  senao
    dano *= arg0.atktipo.0 * arg1.deftipo.0
  fimse
  se !dano # Imune (dano == 0)
    result = 1
    ret
  senao !arg5 # Não calcular os danos (arg5 = 0)
    ret
  fimse
# Checa força do ataque conforme o nível de conhecimento
  dano *= ataquemin + (ataquemax - ataquemin) * arg2
# Checa bônus do personagem
  se tipobonus
    refvar tbonus = txte(tipobonus)
    se arg0.tipo1 && txtproclin(tbonus, arg0.tipo1) >= 0
      dano *= 1.5
    senao arg0.tipo2 && txtproclin(tbonus, arg0.tipo2) >= 0
      dano *= 1.5
    senao arg0.tipo3 && txtproclin(tbonus, arg0.tipo3) >= 0
      dano *= 1.5
    fimse
  fimse
# Calcula dano de acordo com ataques do personagem, da arma e da munição
  refvar arma = ataque1arma * rand(arma1.var.z_armamin_, arma1.var.z_armamax_)
  refvar muni = ataque1municao * rand(arma2.var.z_armamin_, arma2.var.z_armamax_)
  refvar item = ataque1item * rand(arg4.var.z_armamin_, arg4.var.z_armamax_)
  se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
    dano *= ataque1 + ataque1perso * arg0.atkesp + arma + muni + item
    dano *= ataque2 + ataque2perso * arg0.atkesp + ataque2nivel * arg3
    dano /= arg1.defesp * rand(fatormin, fatormax)
  senao
    dano *= ataque1 + ataque1perso * arg0.atknorm + arma + muni + item
    dano *= ataque2 + ataque2perso * arg0.atknorm + ataque2nivel * arg3
    dano /= arg1.defnorm * rand(fatormin, fatormax)
  fimse
# Diferença de nível
  se atknivel >= (arma1 ? 2 : 1)
    dano *= 1 + (arg0.pnivel - arg1.pnivel) / (arg0.pnivel + arg1.pnivel + 10)
  fimse
# Modificadores de posição
  casovar arg1.posicao
  casose "0" # Morto
  casose "1" # Mortalmente ferido
  casose "2" # Incapacitado
    dano *= 2.666
    sair
  casose "3" # Muito fraco
    dano *= 2.333
    sair
  casose "4" # dormindo
    dano *= 2
    sair
  casose "5" # descansando
    dano *= 1.666
    sair
  casose "6" # sentado
    dano *= 1.333
    sair
  casofim
# Atualiza pontos de vida conforme os danos (pelo menos 1 de dano)
  mudavida = -intmax(1, danoadd + dano * arg5)

func mensinicio # Envia mensagem inicial da habilidade ou magia
# arg0 = personagem que está usando a habilidade ou magia
# arg1 = personagem alvo
  txt512 lin.3
  $mens.p(arg0, arg1, arma1, arma2)
  ret !menssub(lin, "usar"), nulo
  ret arg0 == arg1, $mens.mtodos2(lin.0, lin.2)
  $mens.mtodos3(lin.0, lin.1, lin.2)

func mensgolpe # Envia mensagens de alvo principal de acordo com o resultado do ataque
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# arg2 = direção do personagem ao alvo, se o alvo não estiver na mesma sala
  $mens.p(arg0, arg1, arma1, arma2)
  txt512 lin.3
  casovar result
  casose "0" # Acertou o alvo
    $mens.mens = mudavida
    se !arg1.pvidaok # Se morreu
      ret !menssub(lin, "matou"), nulo
      ret $mens.mtodos3dir(lin.0, lin.1, lin.2, arg2)
    senao arg0 == arg1 # Se o alvo for o próprio personagem
      ret !menssub(lin, "auto"), nulo
      ret $mens.mtodos3dir(lin.0, lin.1, lin.1, arg2)
    senao # Outros casos
      ret !menssub(lin, "perso"), nulo
      ret $mens.mtodos3dir(lin.0, lin.1, lin.2, arg2)
    fimse
  casose "1" # Não teve efeito
    ret !menssub(lin, "nulo"), nulo
    ret $mens.mtodos3dir(lin.0, lin.1, lin.2, arg2)
  casose "2" # Errou o alvo
    ret !menssub(lin, "errou"), nulo
    ret $mens.mtodos3dir(lin.0, lin.1, lin.2, arg2)
  casose "3" # O alvo desviou
    ret !(menssub(lin, "esquivou") || menssub(lin, "errou")), nulo
    ret $mens.mtodos3dir(lin.0, lin.1, lin.2, arg2)
  casofim

func mensgolpe2 # Envia mensagens de alvo secundário de acordo com o resultado do ataque
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# arg2 = direção do personagem ao alvo, se o alvo não estiver na mesma sala
  $mens.p(arg0, arg1, arma1, arma2)
  txt512 lin.3
  casovar result
  casose "0" # Acertou o alvo
    $mens.mens = mudavida
    se arg1.pvidaok
      ret !arg1.contr.sock || !menssub(lin, "perso"), nulo
      ret $mens.msginvdir(lin.1, arg1.contr, arg2)
    senao
      ret !menssub(lin, "matou"), nulo
      ret $mens.mtodos3dir(lin.0, lin.1, lin.2, arg2)
    fimse
  casose "1" # Não teve efeito
    ret !(arg1.contr.sock && menssub(lin, "nulo")), nulo
    ret $mens.msginvdir(lin.1, arg1.contr, arg2)
  casose "2" # Errou o alvo
    ret !(arg1.contr.sock && menssub(lin, "errou")), nulo
    ret $mens.msginvdir(lin.1, arg1.contr, arg2)
  casose "3" # O alvo desviou
    ret !(arg1.contr.sock && (menssub(lin, "esquivou") || menssub(lin, "errou"))), nulo
    ret $mens.msginvdir(lin.1, arg1.contr, arg2)
  casofim

func menssub # Usado em mensgolpe
# arg0 = variável txt512 lin.3
# arg1 = nome da variável a obter
  txt20 lin
  atk1_[arg1]1 && (lin += "1")
  atk2_[arg1]1 && (lin += "2")
  atk3_[arg1]1 && (lin += "3")
  atk4_[arg1]1 && (lin += "4")
  atk5_[arg1]1 && (lin += "5")
  ret !lin, 0
  lin = "atk" + txt(lin, rand(inttotal(lin)), 1) + "_" + arg1
  arg0.0 = [lin]1
  arg0.1 = [lin]2 ?? arg0.0
  arg0.2 = [lin]3 ?? arg0.0
  ret 1


classe menu_comando_ataque
herda comando_menu_econfig
const titulo = "Habilidades e magias comuns"
const menufim = "menu_econfig_msg"
const classe = "comando_ataque_cfg"
#
const nome1 = "Nível insuficiente perso"
const tipo1 = "opc_linha"
const vari1 = "m_nao_consegue"
#
const nome2 = "Nível insuficiente animal"
const tipo2 = "opc_linha"
const vari2 = "m_animal_nao_consegue"
#
const nome3 = "Sem alvo"
const tipo3 = "opc_linha"
const vari3 = "m_naover"
#
const nome4 = "Alvo desmaiado"
const tipo4 = "opc_linha"
const vari4 = "m_desmaiado"
#
const nome5 = "Alvo não está desmaiado"
const tipo5 = "opc_linha"
const vari5 = "m_nao_desmaiado"
#
const nome6 = "Só luta com animal"
const tipo6 = "opc_linha"
const vari6 = "m_com_animal"
#
const nome7 = "Só luta sem animal"
const tipo7 = "opc_linha"
const vari7 = "m_sem_animal"
#
const nome8 = "Hab somente personagem"
const tipo8 = "opc_linha"
const vari8 = "m_hab_auto"
#
const nome9 = "Magia somente personagem"
const tipo9 = "opc_linha"
const vari9 = "m_mag_auto"
#
const nome10 = "Técnica somente personagem"
const tipo10 = "opc_linha"
const vari10 = "m_tec_auto"
#
const nome11 = "No próprio personagem"
const tipo11 = "opc_linha"
const vari11 = "m_auto"
#
const nome12 = "Atacar grupo"
const tipo12 = "opc_linha"
const vari12 = "m_grupo"
#
const nome13 = "Magia em lugar pacífico"
const info13 = "Atacar usando um item (exemplo, um pergaminho) em um lugar pacífico"
const tipo13 = "opc_linha"
const vari13 = "m_magia_falhou"
#
const nome14 = "Perso em lugar pacífico"
const tipo14 = "opc_linha"
const vari14 = "m_lugar_pacifico1"
#
const nome15 = "Alvo em lugar pacífico"
const tipo15 = "opc_linha"
const vari15 = "m_lugar_pacifico2"
#
const nome16 = "Alvo é pacífico"
const tipo16 = "opc_linha"
const vari16 = "m_alvo_pacifico"
#
const nome17 = "Perso é pacífico"
const tipo17 = "opc_linha"
const vari17 = "m_perso_pacifico"
#
const nome18 = "Sem luta entre jogadores"
const info18 = "Atacar outro jogador em um lugar que não permite jogador contra jogador"
const tipo18 = "opc_linha"
const vari18 = "m_jog_pacifico"
#
const nome19 = "Personagem sem muniçao"
const tipo19 = "opc_linha"
const vari19 = "m_municao_jog"
#
const nome20 = "Animal sem muniçao"
const tipo20 = "opc_linha"
const vari20 = "m_municao_animal"
#
const nome21 = "Arma sem muniçao"
const tipo21 = "opc_linha"
const vari21 = "m_municao_arma"
#
const nome22 = "Arma não usa muniçao"
const tipo22 = "opc_linha"
const vari22 = "m_municao_nao"
