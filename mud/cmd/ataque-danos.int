classe comando_danos
# Informações sobre danos de um ataque
# Usado em comandos_ataque

func danosgolpe # Obtém informações sobre os danos que o ataque causaria
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# arg2 = textotxt aonde colocar as informações
# arg3 = nível da habilidade ou magia (=nível do personagem)
# arg4 = item usado
  int8 num
  txt512 lin # Texto usado temporariamente
  real2 temp1 # Número usado temporariamente
  real2 temp2 # Número usado temporariamente
  real2 dano = 1
  real2 danomultip = 1
  real2 danoadd
  uint8 danotipo
  real2 danomin = 1 # Menor dano = dano * danomin * força
  real2 danomax = 1 # Maior dano = dano * danomax * força
  real2 ataquemedio # Força, de ataquemin a ataquemax, conforme o quanto conhece
  txt50 aulas = txtsublin(misc:aulas, arg0.var.[nomevar]_, 1)
# Obtém arma e munição
  refvar errmuni = execmunicao(arg0)
  ret errmuni, arg2.addfim(errmuni)
# Obtém ataquemedio (de ataquemin a ataquemax) e aulas
  se arg4
    ataquemedio = 0.5, aulas = "com item"
  senao tipoalvo == 9
    ataquemedio = 0.5, aulas = "ataque automático"
  senao (ataquemedio = (arg0.var.[nomevar]_ - 1) / 7) < 0
    arg2.addfim("Nenhum dano, não conhece o ataque")
    ret danosg_envmsg(arg0, arg1, arg2, arg4)
  fimse
  ataquemedio = ataquemin + (ataquemax - ataquemin) * ataquemedio
  arg2.addfim("\c3Danos:\c7")
# Eventos (triggers)
  listaobj l
  se cmd_atkenv(arg0, arg1, este, danomultip, danoadd, danotipo)
    arg2.addfim("Nenhum dano, cmd_atkenv do ataque cancelou o ataque")
    ret danosg_envmsg(arg0, arg1, arg2, arg4)
  fimse
  epara l.addfim(arg0.evento), l, l.ini.remove
    continuar !l.objini.cmd_atkenv(arg0, arg1, este, danomultip, danoadd, danotipo)
    arg2.addfim("Nenhum dano, cmd_atkenv de " + l.objini + " cancelou o ataque")
    ret danosg_envmsg(arg0, arg1, arg2, arg4)
  efim
  epara l.addfim(arg1.evento), l, l.ini.remove
    continuar !l.objini.cmd_atkrec(arg0, arg1, este, danomultip, danoadd, danotipo)
    arg2.addfim("Nenhum dano, cmd_atkrec de " + l.objini + " cancelou o ataque")
    ret danosg_envmsg(arg0, arg1, arg2, arg4)
  efim
# Força
  arg2.addfim(txt(++num) + ". Força " + aulas + ": \b" + ataquemedio)
  arg2.addfim("   Força: " + ataquemin + " a " + ataquemax)
# Ataque automático
  se tipoalvo == 9
    arg2.addfim(txt(++num) + ". Ataque automático: \bmultiplica por " + config:atkfor / 100)
    dano *= config:atkfor / 100
  fimse
# Peso da arma
  se arma1
    real2 carga = arma1.pesoden + arma1.pesoobj + arma1.pesovar
    carga = (arg0.pesoden - arg0.pesovest + carga * 4) / (arg0.pesomax + 1)
    se carga > 1.2 # Muito pesado
      carga = carga < 1.4 ? 10 : 100
      dano /= carga
      arg2.addfim(txt(++num) + ". É muito peso: \bdivide por " + carga)
    senao carga > 1 # Um pouco pesado
      carga = 5 - 4 * carga # se carga=1,atk*=1  se carga=1.2,atk*=0.2
      dano *= carga
      arg2.addfim(txt(++num) + ". Bastante peso: \bmultiplica por " + carga)
    fimse
  fimse
# Fome e sede
  refvar fome = (2 + $miscfome.f.[arg0.p_sede] + $miscfome.f.[arg0.p_fome]) / 2
  se fome != 1
    arg2.addfim(txt(++num) + ". Fome e sede: \bdivide por " + fome)
  fimse
# Tipo
  temp1 = arg0.atktipo.[2 + tipoatk] * arg1.deftipo.[2 + tipoatk]
  se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
    temp1 *= arg0.atktipo.1 * arg1.deftipo.1
  senao
    temp1 *= arg0.atktipo.0 * arg1.deftipo.0
  fimse
  lin = txtsublin(config:atknomes, int(tipoatk), 1)
  arg2.addfim(txt(++num) + ". Tipo " + lin + ": \bmultiplica por " + temp1)
  dano *= temp1
# Tipo normal ou especial
  se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
    temp1 = arg0.atktipo.1 * arg1.deftipo.1
    arg2.addfim(txt(++num) + ". Tipo especial: \bmultiplica por " + temp1)
  senao
    temp1 = arg0.atktipo.0 * arg1.deftipo.0
    arg2.addfim(txt(++num) + ". Tipo normal: \bmultiplica por " + temp1)
  fimse
  danos *= temp1
# Bônus do personagem
  se tipobonus
    refvar tbonus = txte(tipobonus)
    se arg0.tipo1 && txtproclin(tbonus, arg0.tipo1) >= 0
      dano *= 1.5
      arg2.addfim(txt(++num) + ". Bônus " + arg0.tipo1 + ": \bmultiplica por 1.5")
    senao arg0.tipo2 && txtproclin(tbonus, arg0.tipo2) >= 0
      dano *= 1.5
      arg2.addfim(txt(++num) + ". Bônus " + arg0.tipo2 + ": \bmultiplica por 1.5")
    senao arg0.tipo3 && txtproclin(tbonus, arg0.tipo3) >= 0
      dano *= 1.5
      arg2.addfim(txt(++num) + ". Bônus " + arg0.tipo3 + ": \bmultiplica por 1.5")
    fimse
  fimse
# Variável Ataque1 na fórmula
  temp1 = temp2 = 0
  lin = ""
  se ataque1
    lin += "\n   No ataque: " + ataque1
    temp1 = temp2 = ataque1
  fimse
  se ataque1perso
    refvar valor = misc:atkesp(tipoatk) ? arg0.atkesp : arg0.atknorm
    lin += "\n   No personagem: " + valor + (ataque1perso != 1 ? "*" + ataque1perso)
    temp1 += valor * ataque1perso
    temp2 += valor * ataque1perso
  fimse
  se ataque1arma && arma1
    refvar m = ataque1arma == 1 ? "" : "*" + ataque1arma
    lin += "\n   Na arma: " + arma1.var.z_armamin_ + m + " a " + arma1.var.z_armamax_ + m
    temp1 += arma1.var.z_armamin_ * ataque1arma
    temp2 += arma1.var.z_armamax_ * ataque1arma
  fimse
  se ataque1municao && arma2
    refvar m = ataque1municao == 1 ? "" : "*" + ataque1municao
    lin += "\n   Na munição: " + arma2.var.z_armamin_ + m + " a " + arma2.var.z_armamax_ + m
    temp1 += arma2.var.z_armamin_ * ataque1municao
    temp2 += arma2.var.z_armamax_ * ataque1municao
  fimse
  se ataque1item && arg4
    refvar m = ataque1item == 1 ? "" : "*" + ataque1item
    lin += "\n   Na munição: " + arg4.var.z_armamin_ + m + " a " + arg4.var.z_armamax_ + m
    temp1 += arg4.var.z_armamin_ * ataque1item
    temp2 += arg4.var.z_armamax_ * ataque1item
  fimse
  se temp1 == temp2
    arg2.addfim(txt(++num) + ". Ataque1: \bmultiplica por " + temp1 + lin)
  senao
    arg2.addfim(txt(++num) + ". Ataque1: \bmultiplica por " + temp1 + " a " + temp2 + lin)
  fimse
  danomin *= temp1
  danomax *= temp2
# Variável Ataque2 na fórmula
  temp1 = 0
  lin = ""
  se ataque2
    lin += "\n   No ataque: " + ataque2
    temp1 = ataque2
  fimse
  se ataque2perso
    refvar valor = misc:atkesp(tipoatk) ? arg0.atkesp : arg0.atknorm
    lin += "\n   No personagem: " + valor + (ataque2perso != 1 ? "*" + ataque2perso)
    temp1 += valor * ataque2perso
  fimse
  se ataque2nivel
    lin += "\n   No nível: " + arg3 + (ataque2nivel != 1 ? "*" + ataque2nivel)
    temp1 += arg3 * ataque2nivel
  fimse
  arg2.addfim(txt(++num) + ". Ataque2: \bmultiplica por " + temp1 + lin)
  dano *= temp1
# Defesa
  temp1 = misc:atkesp(tipoatk) ? arg1.defesp : arg1.defnorm
  dano /= temp1
  arg2.addfim(txt(++num) + ". Defesa: \bdivide por " + temp1)
# Fator
  lin = txt(++num) + ". Fator: \bdivide por " + fatormin
  arg2.addfim(lin + (fatormin != fatormax ? " a " + fatormax))
  danomax /= fatormin
  danomin /= fatormax
# Diferença de nível
  se atknivel >= (arma1 ? 2 : 1)
    temp1 = 1 + (arg0.pnivel - arg1.pnivel) / (arg0.pnivel + arg1.pnivel + 10)
    dano *= temp1
    arg2.addfim(txt(++num) + ". Diferença de nível: \bmultiplica por " + temp1)
  fimse
# Modificadores de posição
  casovar arg1.posicao
  casose "0" # Morto
  casose "1" # Mortalmente ferido
  casose "2" # Incapacitado
    dano *= 2.666
    arg2.addfim(txt(++num) + ". Posição indefeso: \bmultiplica por 2.666")
    sair
  casose "3" # Muito fraco
    dano *= 2.333
    arg2.addfim(txt(++num) + ". Posição muito fraco: \bmultiplica por 2.333")
    sair
  casose "4" # dormindo
    dano *= 2
    arg2.addfim(txt(++num) + ". Posição dormindo: \bmultiplica por 2")
    sair
  casose "5" # descansando
    dano *= 1.666
    arg2.addfim(txt(++num) + ". Posição descansando: \bmultiplica por 1.666")
    sair
  casose "6" # sentado
    dano *= 1.333
    arg2.addfim(txt(++num) + ". Posição sentado: \bmultiplica por 1.333")
    sair
  casofim
# Mudar dano via trigger
  danomultip != 1 && arg2.addfim(txt(++num) + ". Eventos: \bmultiplica por " + danomultip)
  danoadd && arg2.addfim(txt(++num) + ". Eventos: \bsoma " + danoadd)
  dano *= danomultip
# Cálculo do tempo de espera após cada golpe
  arg2.addfim("\c3Tempo em décimos de segundo:\c7")
  refvar tempoespera = danosg_espera(arg0, arg1, arg2)
# Taxa de acerto
  arg2.addfim("\c3Taxa de acerto:\c7")
  refvar acerto = danosg_precisao(arg0, arg1, arg2, danotipo)
  arg2.addini("Taxa de acerto: \b" + acerto + "%")
  arg2.addini("Tempo de espera: \b" + int(tempoespera) / 10 + " seg.")
# Danos
  refvar danosporseg = acerto / tempoespera / 10
  lin = ""
  se ataquemedio >= 0
    temp1 = danomin * dano * ataquemedio + danoadd
    temp2 = danomax * dano * ataquemedio + danoadd
    lin = "\nDanos " + aulas + ": \b" + danosg_sub(temp1, temp2, danosporseg)
  fimse
  temp1 = danomin * dano * ataquemin + danoadd
  temp2 = danomax * dano * ataquemin + danoadd
  lin += "\nDanos Iniciante: \b" + danosg_sub(temp1, temp2, danosporseg)
  temp1 = danomin * dano * ataquemax + danoadd
  temp2 = danomax * dano * ataquemax + danoadd
  lin += "\nDanos Perito: \b" + danosg_sub(temp1, temp2, danosporseg)
  arg2.addini(txt(lin, 1))
# Mensagem
  ret danosg_envmsg(arg0, arg1, arg2, arg4)

func danosg_envmsg
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# arg2 = textotxt aonde colocar as informações
# arg3 = item usado
# Cabeçalho
  txt512 lin = "\c6" + txtmaimin(txt(nomevar, 2)) + ":\c7 " + arg0.descnome2
  lin += " ataca " + arg1.descnome2
  se arma1 || arma2
    lin += "\n" + (arma1 ? "Arma: " + arma1.descnome2) + (arma1 && arma2 ? "   ")
    lin += arma2 ? "Munição: " + arma2.descnome2
  fimse
  arg3 && (lin += "\nItem: " + arg3.descnome2)
  arg2.addini(lin)
# Acerta posições dos textos
  textopos pos
  epara pos = arg2.ini, pos.lin, pos.depois
    refvar ind = pos.txtproc("\b")
    ind > 0 && ind < 24 && pos.mudar(txtesp(24 - ind), ind, 1)
  efim

func danosg_sub
# arg0 = danos mínimo por golpe
# arg1 = danos máximo por golpe
# arg0 * arg2 = danos mínimo por segundo
# arg1 * arg2 = danos máximo por segundo
  ret !(arg0 || arg1), "Nenhum"
  refvar dmin = int(intpos(arg0 - 1)) + 1
  refvar dmax = int(intpos(arg1 - 1)) + 1
  refvar extra = "   (" + int((dmin + dmax) * arg2 / 2) + " por segundo)"
  ret dmin == dmax, txt(dmin) + extra
  ret txt(dmin) + " a " + dmax + extra

func danosg_espera # Retorna o tempo de espera após cada golpe, em décimos de segundo
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# arg2 = textotxt aonde colocar as informações
  int8 num
  real2 tempoespera
  se tipoalvo == 9
    arg2.addfim(txt(++num) + ". Ataque automático: \b" + config:atktempo)
    tempoespera = config:atktempo
  senao arg0.pveloc <= 0
    arg2.addfim(txt(++num) + ". Vel. personagem: \b" + arg0.pveloc)
    arg2.addfim(txt(++num) + ". Resultado: \b" + config:atkmtempo)
    tempoespera = config:atkmtempo
  senao vel <= 0
    arg2.addfim(txt(++num) + ". Velocidade golpe: \b" + vel)
    arg2.addfim(txt(++num) + ". Resultado: \b" + config:atkmtempo)
    tempoespera = config:atkmtempo
  senao
    arg2.addfim(txt(++num) + ". Tempo do turno: \b" + config:atkmtempo)
    arg2.addfim(txt(++num) + ". Vel. alvo: \bmultiplica por " + arg1.pveloc)
    arg2.addfim(txt(++num) + ". Fator fixo: \bmultiplica por 70")
    arg2.addfim(txt(++num) + ". Vel. personagem: \bdivide por " + arg0.pveloc)
    arg2.addfim(txt(++num) + ". Vel. golpe: \bdivide por " + vel)
    tempoespera = config:atkmtempo * arg1.pveloc * 70 / (arg0.pveloc * vel)
    arg2.addfim(txt(++num) + ". Resultado: \b" + tempoespera)
    se tempoespera < config:atkespera
      arg2.addfim(txt(++num) + ". Limite mínimo: \b" + config:atkespera)
      tempoespera = config:atkespera
    senao tempoespera > config:atkmtempo
      arg2.addfim(txt(++num) + ". Limite máximo: \b" + config:atkmtempo)
      tempoespera = config:atkmtempo
    fimse
  fimse
  ret tempoespera

func danosg_precisao # Retorna a taxa de acerto (em porcentagem, de 0 a 100)
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# arg2 = textotxt aonde colocar as informações
# arg3 = danotipo (1=alvo imobilizado)
  int8 num
  real2 pr_acerto # taxa de acerto
  real2 pr_indef # taxa indefinida
  real2 valor
  txt100 lin
  refvar falha = falha1 + (falha2 - falha1) * intpos(arg0.var.[nomevar]_ - 1) / 7
  se falha >= 100
    arg2.addfim(txt(++num) + ". Falha do golpe: \bSempre falha")
    ret 0
  senao
    pr_indef = 100
    lin = danosg_erro(pr_acerto, pr_indef, falha)
    arg2.addfim(txt(++num) + ". Falha do golpe: \b" + lin)
  fimse
  ret !atkfalha, int(pr_acerto * 100) / 100
  se arma1
    lin = danosg_erro(pr_acerto, pr_indef, arma1.var.z_armafalha_)
    arg2.addfim(txt(++num) + ". Falha arma: \b" + lin)
  fimse
  se arma2
    lin = danosg_erro(pr_acerto, pr_indef, arma2.var.z_armafalha_)
    arg2.addfim(txt(++num) + ". Falha munição: \b" + lin)
  fimse
  se arg3 == 1
    arg2.addfim(txt(++num) + ". Eventos:\b100% de acerto")
    pr_acerto += pr_indef
  senao arg1.posicao <= 4
    arg2.addfim(txt(++num) + ". Alvo está dormindo:\b100% de acerto")
    pr_acerto += pr_indef
  senao
    valor = pr_indef
    lin = danosg_erro(pr_acerto, pr_indef, 5)
    arg2.addfim(txt(++num) + ". Dado de 20 faces 1: \b" + lin)
    pr_indef = valor
    lin = danosg_acerto(pr_acerto, pr_indef, 5)
    arg2.addfim(txt(++num) + ". Dado de 20 faces 20: \b" + lin)
    pr_indef = valor - valor / 10
    refvar bmin = $miscfome.bebeatk
    refvar bmax = $miscfome.cheio
    valor = danosg_rand(bmin, bmax, arg0.jog ? arg0.p_bebida : 0)
    lin = danosg_erro(pr_acerto, pr_indef, valor)
    arg2.addfim(txt(++num) + ". Embriaguez perso: \b" + lin)
    valor = danosg_rand(bmin, bmax, arg1.jog ? arg1.p_bebida : 0)
    lin = danosg_acerto(pr_acerto, pr_indef, valor)
    arg2.addfim(txt(++num) + ". Embriaguez alvo: \b" + lin)
    valor = 2 + arg0.precisao + addprecisao + arma1.var.z_armaaddprecisao_ - arg1.evasao
    arg2.addfim(txt(++num) + ". Dado de 20 faces: \b2 a 19")
    arg2.addfim(txt(++num) + ". Precisão perso: \bsoma " + arg0.precisao)
    arg2.addfim(txt(++num) + ". Precisão golpe: \bsoma " + 1 * arg0.addprecisao)
    se arma1
      arg2.addfim(txt(++num) + ". Precisão arma: \bsoma " + arma1.var.z_armaaddprecisao_)
    fimse
    se arg1.visivel(arg0)
      refvar p1 = arg0.p_precisaover
      refvar p2 = (p1 !== nulo ? p1 : $t_[arg0.tipo1].p_precisaover)
      refvar p3 = subprecisao * p2 / 100
      valor -= p3
      arg2.addfim(txt(++num) + ". Alvo visível: \bsubtrai " + p3)
      arg2.addfim("   Precisão ver (personagem): " + p2 + "%")
      arg2.addfim("   Precisão não ver (ataque): " + subprecisao)
    senao
      refvar p1 = arg0.p_precisaoinv
      refvar p2 = (p1 !== nulo ? p1 : $t_[arg0.tipo1].p_precisaoinv)
      refvar p3 = subprecisao * p2 / 100
      valor -= p3
      arg2.addfim(txt(++num) + ". Alvo invisível: \bsubtrai " + p3)
      arg2.addfim("   Precisão não ver (personagem): " + p2 + "%")
      arg2.addfim("   Precisão não ver (ataque): " + subprecisao)
    fimse
    arg2.addfim(txt(++num) + ". Evasão alvo: \bsubtrai " + arg1.evasao)
    lin = ". Acerta se " + valor + " a " + (valor + 17) + " >= 0: \b"
    valor = int(10000 + 10000 * valor / 18) / 100
    arg2.addfim(txt(++num) + lin + danosg_acerto(pr_acerto, pr_indef, valor))
  fimse
  pr_acerto = int(pr_acerto * 100) / 100
  arg2.addfim(txt(++num) + ". Resultado:\b" + pr_acerto + "% de acerto")
  ret pr_acerto

func danosg_acerto # Acerta porcentagem de acerto e retorna texto correspondente
# arg0 = taxa de acerto (0 a 100)
# arg1 = taxa a definir (0 a 100)
# arg2 = porcentagem de acerto (0 a 100)
  refvar p1 = intpos(arg2 > 100 ? 100 : arg2)
  refvar p2 = p1 * arg1 / 100
  refvar total = int(arg1 * 100) / 100
  arg0 += p2, arg1 -= p2
  ret !p1, "0% de acerto"
  ret txt(p1) + "% de acerto (vezes " + total + "% = " + int(p2 * 100) / 100 + "%)"

func danosg_erro # Acerta porcentagem de erro e retorna texto correspondente
# arg0 = taxa de acerto (0 a 100)
# arg1 = taxa a definir (0 a 100)
# arg2 = porcentagem de erro (0 a 100)
  refvar p1 = intpos(arg2 > 100 ? 100 : arg2)
  refvar p2 = p1 * arg1 / 100
  refvar total = int(arg1 * 100) / 100
  arg1 -= p2
  ret !p1, "0% de erro"
  ret txt(p1) + "% de erro (vezes " + total + "% = " + int(p2 * 100) / 100 + "%)"

func danosg_rand # Retorna a porcentagem de acerto, de 0 a 100
# arg0 = rand mínimo
# arg1 = rand máximo
# arg2 = valor mínimo para acertar
  ret arg2 < arg0, 0
  ret arg2 >= arg1, 100
  ret 100 * (arg2 - arg0) / (arg1 - arg0)
