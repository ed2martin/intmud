classe h_cmd_abrir
herda comando_comum
const objmenu = $m_cmd_abrir
const objtipo = 2 # Pode renomear
const posic = 5
#
const m_ajuda = "-t\n-s <objeto ou direção>\nAbre um objeto ou uma porta."
const m_sem_args = "Abrir o quê?"
const m_naover = "Você não vê $m."
const m_item_aberto = "$O já está abert$u."
const m_item_trancado = "$O está trancad$u."
const m_item_nao = "Não foi possível abrir $o."
const m_item_abriu1 = "Você abriu $a."
const m_item_abriu2 = "$P abriu $a."
const m_porta_sem = "Não há porta nessa direção."
const m_porta_aberta = "$P já est$o abert$a." # Conforme mens_porta:info
const m_porta_trancada = "$P est$o trancad$a." # Conforme mens_porta:info
const m_porta_abriu1 = "Você abriu $m."
const m_porta_abriu2 = "$P abriu $m."
const m_porta_abriu3 = "$M abriu."
const m_porta_abriu4 = "$M Abriram."
const admordem = "m_ajuda m_sem_args m_naover m_item_aberto m_item_trancado\n\
m_item_nao m_item_abriu1 m_item_abriu2 m_porta_sem m_porta_aberta m_porta_trancada\n\
m_porta_abriu1 m_porta_abriu2 m_porta_abriu3 m_porta_abriu4"

func escr
  refvar perm_msg = $perm_[arg0.jogperm].abrir
  ret perm_msg, $mensjog.msg(perm_msg, arg0)
  txt10 dir
  dir = misc:d1[arg1]
  dir ? escrdir(arg0, dir) : escrobj(arg0, arg1)

func escrobj # Abrir um item
# arg0 = personagem
# arg1 = nome do item
# Procura o item
  ret !arg1, $mensjog.msg(m_sem_args, arg0)
  ref r = misc:itemdono(arg0, arg1) ?? misc:itemdentro(arg0, arg1)
  $mens.mens = arg1
  ret !r, $mens.mp(m_naover, arg0)
# Checa se está aberto
  casovar r.i_aberto
  casose "2"
    ret $mens.mp(m_item_aberto, arg0, nulo, r)
  casose "4"
    ret $mens.mp(m_item_trancado, arg0, nulo, r)
  casose
    ret $mens.mp(m_item_nao, arg0, nulo, r)
  casose "3"
  casose "5"
  casofim
# Gera eventos
  ret cmd_abrirobj(arg0, r), nulo
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_abrirobj(arg0, r, arg0), nulo
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    ret l.objini.cmd_abrirobj(arg0, r, r), nulo
  efim
# Abre o item
  r.i_aberto = 2
  $mens.p(arg0, r)
  $mens.mtodos2(r.i_abriuitem1 ?? m_item_abriu1, r.i_abriuitem2 ?? m_item_abriu2)
  cmd_abriuobj(arg0, r)
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_abriuobj(arg0, r, arg0)
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    l.objini.cmd_abriuobj(arg0, r, r)
  efim

func escrdir # Abrir uma porta
# arg0 = personagem
# arg1 = nome da direção
# Checa se porta existe
  ret !arg0.dono.dir_[arg1](arg0), $mensjog.msg(m_porta_sem, arg0)
# Checa se está aberto
  casovar 3 & arg0.dono.porta_[arg1]
  casose
    ret $mensjog.msg(m_porta_sem, arg0)
  casose "1"
    ret arg0.msg($mens_porta.mens(m_porta_aberta, arg0.dono, arg1))
  casose "3"
    ret arg0.msg($mens_porta.mens(m_porta_trancada, arg0.dono, arg1))
  casose "2"
  casofim
# Gera eventos
  ret cmd_abrirdir(arg0, arg0.dono, arg1), nulo
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_abrirdir(arg0, arg0.dono, arg1, arg0), nulo
  efim
  epara l.addfim(arg0.dono.evento), l, l.ini.remove
    ret l.objini.cmd_abrirdir(arg0, arg0.dono, arg1, arg0.dono), nulo
  efim
# Abre a porta
  $mens.p(arg0)
  arg0.dono.mudaporta3(arg1, 1) # Abre a porta
  cmd_abriudir(arg0, arg0.dono, arg1)
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_abriudir(arg0, arg0.dono, arg1, arg0)
  efim
  epara l.addfim(arg0.dono.evento), l, l.ini.remove
    l.objini.cmd_abriudir(arg0, arg0.dono, arg1, arg0.dono)
  efim


classe h_cmd_fechar
herda comando_comum
const objmenu = $m_cmd_fechar
const objtipo = 2 # Pode renomear
const posic = 5
#
const m_ajuda = "-t\n-s <objeto ou direção>\nFecha um objeto ou uma porta."
const m_sem_args = "fechar o quê?"
const m_naover = "Você não vê $m."
const m_item_fechado = "$O já está fechad$u."
const m_item_nao = "Não foi possível fechar $o."
const m_item_fechou1 = "Você fechou $a."
const m_item_fechou2 = "$P fechou $a."
const m_porta_sem = "Não há porta nessa direção."
const m_porta_fechada = "$P já est$o fechad$a." # Conforme mens_porta:info
const m_porta_fechou1 = "Você fechou $m."
const m_porta_fechou2 = "$P fechou $m."
const m_porta_fechou3 = "$M fechou."
const m_porta_fechou4 = "$M fecharam."
const admordem = "m_ajuda m_sem_args m_naover m_item_fechado m_item_nao\n\
m_item_fechou1 m_item_fechou2 m_porta_sem m_porta_fechada m_porta_fechou1\n\
m_porta_fechou2 m_porta_fechou3 m_porta_fechou4"

func escr
  refvar perm_msg = $perm_[arg0.jogperm].abrir
  ret perm_msg, $mensjog.msg(perm_msg, arg0)
  txt10 dir
  dir = misc:d1[arg1]
  dir ? escrdir(arg0, dir) : escrobj(arg0, arg1)

func escrobj # Fechar um item
# arg0 = personagem
# arg1 = nome do item
# Procura o item
  ret !arg1, $mensjog.msg(m_sem_args, arg0)
  ref r = misc:itemdono(arg0, arg1) ?? misc:itemdentro(arg0, arg1)
  $mens.mens = arg1
  ret !r, $mens.mp(m_naover, arg0)
# Checa se está fechado
  casovar r.i_aberto
  casose "3"
  casose "4"
    ret $mens.mp(m_item_fechado, arg0, nulo, r)
  casose
    ret $mens.mp(m_item_nao, arg0, nulo, r)
  casose "2"
  casose "5"
  casofim
# Gera eventos
  ret cmd_fecharobj(arg0, r), nulo
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_fecharobj(arg0, r, arg0), nulo
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    ret l.objini.cmd_fecharobj(arg0, r, r), nulo
  efim
# Fecha o item
  r.i_aberto = r.i_tranc == 2 ? 4 : 3
  $mens.p(arg0, r)
  $mens.mtodos2(r.i_fechouitem1 ?? m_item_fechou1, r.i_fechouitem2 ?? m_item_fechou2)
  cmd_fechouobj(arg0, r)
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_fechouobj(arg0, r, arg0)
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    l.objini.cmd_fechouobj(arg0, r, r)
  efim

func escrdir # Fechar uma porta
# arg0 = personagem
# arg1 = nome da direção
# Checa se porta existe
  ret !arg0.dono.dir_[arg1](arg0), $mensjog.msg(m_porta_sem, arg0)
# Checa se está fechado
  casovar 3 & arg0.dono.porta_[arg1]
  casose
    ret $mensjog.msg(m_porta_sem, arg0)
  casose "2"
  casose "3"
    ret arg0.msg($mens_porta.mens(m_porta_fechada, arg0.dono, arg1))
  casose "1"
  casofim
# Gera eventos
  ret cmd_fechardir(arg0, arg0.dono, arg1), nulo
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_fechardir(arg0, arg0.dono, arg1, arg0), nulo
  efim
  epara l.addfim(arg0.dono.evento), l, l.ini.remove
    ret l.objini.cmd_fechardir(arg0, arg0.dono, arg1, arg0.dono), nulo
  efim
  ret !arg0.dono.dir_[arg1](arg0), $mensjog.msg(m_porta_sem, arg0)
# Fecha a porta
  $mens.p(arg0)
  se arg0.dono.tranc_[arg1](arg0) == 2
    arg0.dono.mudaporta3(arg1, 3) # Tranca
  senao
    arg0.dono.mudaporta3(arg1, 2) # Fecha
  fimse
  cmd_fechoudir(arg0, arg0.dono, arg1)
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_fechoudir(arg0, arg0.dono, arg1, arg0)
  efim
  epara l.addfim(arg0.dono.evento), l, l.ini.remove
    l.objini.cmd_fechoudir(arg0, arg0.dono, arg1, arg0.dono)
  efim


classe m_cmd_abrir
herda comando_menu_cmd
#
const nome1 = "Ajuda"
const tipo1 = "opc_texto"
const vari1 = "m_ajuda"
#
const nome2 = "Sem argumentos"
const tipo2 = "opc_linha"
const vari2 = "m_sem_args"
#
const nome3 = "Sem alvo"
const tipo3 = "opc_linha"
const vari3 = "m_naover"
#
const nome4 = "Item aberto"
const tipo4 = "opc_linha"
const vari4 = "m_item_aberto"
#
const nome5 = "Item trancado"
const tipo5 = "opc_linha"
const vari5 = "m_item_trancado"
#
const nome6 = "Não é possível"
const tipo6 = "opc_linha"
const vari6 = "m_item_nao"
#
const nome7 = "Abriu item perso"
const tipo7 = "opc_linha"
const vari7 = "m_item_abriu1"
#
const nome8 = "Abriu item outros"
const tipo8 = "opc_linha"
const vari8 = "m_item_abriu2"
#
const nome9 = "Sem porta"
const tipo9 = "opc_linha"
const vari9 = "m_porta_sem"
#
const nome10 = "Porta aberta"
const info10 = mens_porta:info
const tipo10 = "opc_linha"
const vari10 = "m_porta_aberta"
#
const nome11 = "Porta trancada"
const info11 = mens_porta:info
const tipo11 = "opc_linha"
const vari11 = "m_porta_trancada"
#
const nome12 = "Abriu porta perso"
const tipo12 = "opc_linha"
const vari12 = "m_porta_abriu1"
#
const nome13 = "Abriu porta outros"
const tipo13 = "opc_linha"
const vari13 = "m_porta_abriu2"
#
const nome14 = "Abriu no singular"
const tipo14 = "opc_linha"
const vari14 = "m_porta_abriu3"
#
const nome15 = "Abriu no plural"
const tipo15 = "opc_linha"
const vari15 = "m_porta_abriu4"

classe m_cmd_fechar
herda comando_menu_cmd
#
const nome1 = "Ajuda"
const tipo1 = "opc_texto"
const vari1 = "m_ajuda"
#
const nome2 = "Sem argumentos"
const tipo2 = "opc_linha"
const vari2 = "m_sem_args"
#
const nome3 = "Sem alvo"
const tipo3 = "opc_linha"
const vari3 = "m_naover"
#
const nome4 = "Item fechado"
const tipo4 = "opc_linha"
const vari4 = "m_item_fechado"
#
const nome5 = "Não é possível"
const tipo5 = "opc_linha"
const vari5 = "m_item_nao"
#
const nome6 = "Fechou item perso"
const tipo6 = "opc_linha"
const vari6 = "m_item_fechou1"
#
const nome7 = "Fechou item outros"
const tipo7 = "opc_linha"
const vari7 = "m_item_fechou2"
#
const nome8 = "Sem porta"
const tipo8 = "opc_linha"
const vari8 = "m_porta_sem"
#
const nome9 = "Porta fechada"
const info9 = mens_porta:info
const tipo9 = "opc_linha"
const vari9 = "m_porta_fechada"
#
const nome10 = "Fechou porta perso"
const tipo10 = "opc_linha"
const vari10 = "m_porta_fechou1"
#
const nome11 = "Fechou porta outros"
const tipo11 = "opc_linha"
const vari11 = "m_porta_fechou2"
#
const nome12 = "Fechou no singular"
const tipo12 = "opc_linha"
const vari12 = "m_porta_fechou3"
#
const nome13 = "Fechou no plural"
const tipo13 = "opc_linha"
const vari13 = "m_porta_fechou4"
