classe comando_identificar
herda comando_hab, opc_atribcomum
const txtajuda = "\c3" + misc:nomevar(nomevar) + "\b\n" + msgextra
const cmdmenu = "identif" # Editável via "menu_hab_identif" e "menu_magia_identif"
const a_montado = 1
const a_em_pe = 1
const tipoalvo = 6 # Não agressivo
const c_espera = 15 # Tempo de esperar após usar esse comando
textovar var
#
# Ordem que deve organizar as constantes:
const admordem = "nomevar\n\
a_dormindo a_descansando a_sentado a_montado\n\
a_em_pe a_bat_sentado a_bat_montado a_bat_em_pe\n\
c_espera\n\
c_vida1 c_vida2\n\
c_mana1 c_mana2\n\
c_move1 c_move2\n\
aulaini aulafim aulapontos aularenascer\n\
depende\n\
falha1 falha2\n\
tipoefeitosim tipovestirsim tipovestirnao tipoinvsim tipoinvnao\n\
tipoarma\n\
tipoperso\n\
valor\n\
msgextra msgini1 msgini2\n\
msgperso1 msgperso2 msgperso3 msgobj1 msgobj2\n\
msgerrou1 msgerrou2 msgnulo1 msgnulo2"
#
const escr = escrhab(arg0, arg1)
const aulapontos = config:a_a_aulapontos

func escrhab
# arg0 = personagem
# arg1 = o que o personagem digitou; usado para obter o item ou personagem alvo
# arg2 = item usado, ou nulo se não usou nenhum item
  ret !arg1, arg0.msg("Identificar o quê?")
  ret !checahab1(arg0.persobat, arg2), nulo
  listaobj l
  l.addfim(arg0.dono.dentro1, arg0.dono.dentro2, arg0.dentro1)
  $mens.mens = arg1
  ref r = misc:itemlista(arg0, arg1, l)
  ret !r, $mens.mp("Você não vê $m.", arg0)
# Eventos
  l.limpar
  ret cmd_ident(arg0, r), nulo
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_ident(arg0, r, arg0), nulo
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    ret l.objini.cmd_ident(arg0, r, r), nulo
  efim
# Checa se pode identificar
  se !arg2.item
    custohab1(arg0.persobat)
    $mens.p(arg0) + $mens.mvis2(msgini1, msgini2)
  fimse
  arg0.acertapos(1) # Porque os pontos de vida podem ter mudado
  se arg0.dono.s_semmagia && txt(nomevar, 0, 1) == "m"
    ret $mens.p(arg0) + $mens.mvis2(msgnulo1, msgnulo2)
  senao arg0.atkenv # Checa se está batalhando
    ret $mens.p(arg0) + $mens.mvis2(msgerrou1, msgerrou2)
  senao rand(100) < falha1 + (falha2 - falha1) * intpos(arg0.var.[nomevar]_ - 1) / 7
    ret $mens.p(arg0) + $mens.mvis2(msgerrou1, msgerrou2)
  fimse
  se r.perso
    $mens.p(arg0, r)
    $mens.mvis3(msgperso1, msgperso2, msgperso3)
  senao
    $mens.p(arg0, nulo, r)
    $mens.mvis2(msgobj1, msgobj2)
  fimse
# Identifica
  textotxt t
  txtident(arg0, r, t)
# Eventos
  cmd_msg_ident(arg0, r, t)
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_msg_ident(arg0, r, t, arg0)
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    l.objini.cmd_msg_ident(arg0, r, t, r)
  efim
# Envia mensagem
  t.linhas && arg0.msg2(t.remove(1000))
  arg0.acertapos(1) # Porque os pontos de vida podem ter mudado

func txtident # Adiciona informações de item ou personagem em um textotxt
# arg0 = personagem que está solicitando as informações
# arg1 = item ou personagem sendo identificado
# arg2 = textotxt aonde colocar as informações
  txt512 lin
# Identificar personagem
  se arg1.perso
    refvar persobat = arg1.persobat
    lin = txtcopiamai(persobat.descnome2, "A")
    se arg1 != persobat
      lin += " de " + arg1.descnome2, arg1 = persobat
    fimse
    lin += ", nível " + arg1.pnivel
    arg1.prenascer && (lin += ", R" + arg1.prenascer)
    refvar v1 = !arg1.msexo2 ? $t_[arg1.tipo1].nome2 ?? $t_[arg1.tipo1].nome
    refvar v2 = !arg1.msexo2 ? $t_[arg1.tipo2].nome2 ?? $t_[arg1.tipo2].nome
    refvar v3 = !arg1.msexo2 ? $t_[arg1.tipo3].nome2 ?? $t_[arg1.tipo3].nome
    lin += (v1 ? ", " + v1 : "") + (v2 ? ", " + v2) + (v3 ? ", " + v3)
    arg2.addfim(lin)
    refvar m = txt(arg1.descident(arg0))
    m && arg2.addfim(m)
    ret
  fimse
# Nível do item
  se arg1.pnivel || arg1.prenascer
    lin = "É um objeto do nível " + arg1.pnivel
    arg1.prenascer && (lin += ", R" + arg1.prenascer)
    arg2.addfim(lin + ".")
  fimse
# Peso e valor
  lin = ""
  se !arg1.i_escondepeso
    refvar peso = arg1.pesoobj + arg1.pesoden + arg1.pesovar
    lin = " e pesa " + (peso < 10000 ? txt(peso) + "g" : txt(peso / 1000) + "Kg")
  fimse
  se !arg1.valor
  senao arg1.valor == 1
    lin += " e vale uma moeda"
  senao arg1.valor == 2
    lin += " e vale duas moedas"
  senao
    lin += " e vale " + arg1.valor + " moedas"
  fimse
  lin && arg2.addfim("Isso " + txt(lin, 3) + ".")
# Se é arma
  se arg1.armatipo
    lin = "É uma arma do tipo \"" + txtsublin(config:arma_txt, arg1.armatipo, 1)
    lin += "\" de ataque " + arg1.var.z_armamin_
    arg1.var.z_armamin_ != arg1.var.z_armamax_ && (lin += " a " + arg1.var.z_armamax_)
    refvar falha = arg1.var.z_armafalha_
    lin += !falha ? "" : falha > 0 ? ", falha " + falha + "%" : ", não falha"
    lin += "."
    arg2.addfim(lin)
  fimse
# Aonde pode ser vestido e posições extras
  se arg1.armatipo || ("0" | arg1.vestir1) | arg1.vestirextra != "0"
    txt512 posic = arg1.armatipo ? ", empunhando"
    txt512 extra
    epara lin = config:equip_ordem, lin, lin = txt2(lin)
      refvar valor = intbith(txt1(lin))
      (valor & arg1.vestir1) != "0" && (posic += ", " + misc:equip(1 + txt1(lin)))
      (valor & arg1.vestirextra) != "0" && (extra += ", " + misc:equip(1 + txt1(lin)))
    efim
    posic && arg2.addfim("Pode ser usado em: " + txt(posic, 2) + ".")
    extra && arg2.addfim("Ocupa posições: " + txt(extra, 2) + ".")
  fimse
# Quem não pode vestir
  se arg1.vestirnao
    arg2.addfim("Não pode ser usado por: " + txttroca(arg1.vestirnao, "\n", ",") + ".")
  fimse
# Conhecimento necessário
  se arg1.vestiraula
    textotxt t2
    epara t2.addfim(arg1.vestiraula(arg0)), t2.linhas, t2.remove
      continuar !(lin = t2.ini.texto)
      refvar nivel = txtmin(txtsublin(misc:aulas, txt2(lin), 1))
      arg2.addfim("Requer " + misc:nomevar(txt1(lin)) + " nível " + nivel + ".")
    efim
  fimse
# Diversos
  arg1.i_chave && arg2.addfim("É um tipo de chave.")
  arg1.i_captura && arg2.addfim($mens.tp("Pode ser usado para $capturar $animais.", arg0))
  arg1.manterperso && arg2.addfim("Não perde ao entrar em uma sala que mata.")
  ref tec = $tecnica_[arg1.i_item_tecnica]
  tec && arg2.addfim("Comando item produz: " + txt(tec.nomevar, 2))
# Obtém os efeitos (Extrai os atributos de uma função)
  atrib_ler(arg1, arg1.perso ? "recalc1_auto" : "recalc2_auto")
  atrib_txt(arg2)
# Identificação
  refvar m = txt(arg1.descident(arg0))
  m && arg2.addfim(m)

func habsintaxe # Retorna um texto que contém a sintaxe do comando
# arg0 = objeto do personagem
  refvar sintaxe = habcomando
  ret "Sintaxe: " + sintaxe + " <item>\n         " + sintaxe + " <personagem>"

func hablista # Informações nos comandos Lhab, Lmag e Ltec
  ret "Identificar"
