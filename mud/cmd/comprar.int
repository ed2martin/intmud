classe h_cmd_comprar
herda comando_comum, comum_negociar
#
const objtipo = 2 # Pode renomear
const m_ajuda = "-t\n\
-s <nome ou número do objeto>\n\
-s <quantidade>  <nome ou número do objeto>\n\
Compra objetos de um vendedor.\n\
Para saber o que é vendido em algum lugar, tecle LISTA."
const m_sem_args = "Comprar o quê?"
const m_nao_vende = "Ninguém vende $m aqui."
const m_muita_coisa = "Você não consegue carregar tanta coisa."
const m_muito_peso = "Você não consegue carregar tanto peso."
const m_moedas = "$A: Você não tem $$$1."
const m_compra_um1 = "Você compra $o $d $A."
const m_compra_um2 = "$P compra $o $d $A."
const m_compra_mais1 = "Você compra $mx $o $d $A."
const m_compra_mais2 = "$P compra $mx $o $d $A."
const m_tem_casa = "Você já tem uma casa aqui."
const m_casa_salvar = "Você precisa ter jogo salvo para comprar uma casa."
const m_casa_limite = "Atingido o limite de casas por jogador."
const m_casa_nivel = "Você precisa chegar no nível $m para comprar uma casa."
const m_casa1 = "Você compra $m $d $a."
const m_casa2 = "$P compra $m $d $a."
const m_chave1 = "$A fez uma chave para você."
const m_chave2 = "$A fez uma chave para $p."
const m_fechadura1 = "$A manda alguém para trocar a fechadura da sua casa."
const m_fechadura2 = "$A manda alguém para trocar a fechadura da casa $d $p."

func escr
  ret !arg1, $mens.mp(m_sem_args, arg0)
  txt200 lin # Texto da linha atual
  int32 linha # Qual linha está verificando
  txt100 nomeitem # O nome do item que está procurando
  uint32 valor # Preço da aula
  uint32 nivel # Nível do item
  uint16 total # Quantos itens quer combrar
  listaobj l
  nomeobj n
  total = txt1(arg1)
  se intsub(arg1) < 2 || total == 0 || txt(total) != txt1(arg1)
    total = 1, nomeitem = arg1
  senao
    nomeitem = txt2(arg1)
  fimse
  l.addfim(arg0.dono.dentro2), n.ini(nomeitem, total)
  epara l.remove(arg0), l, l.ini.remove
    refvar p = ref(l.objini) # Personagem que está sendo verificado
    continuar !(p.lojaitem(arg0) || p.lojainv || $s_[p.lojasala] || $a_[p.lojacasa] || $a_[p.lojachave])
    continuar negociar_checa(arg0, p)
    continuar evento(arg0, p)
# Itens fixos - lojaitem
    textotxt t2
    epara t2.addfim(p.lojaitem(arg0)), t2.linhas, t2.remove
      continuar !t2.ini.texto
      lin = "i_" + txt1(t2.ini.texto), linha++
      continuar !n.nome([lin]:nome, 1) && txt(linha) != nomeitem
      nivel = txt2(t2.ini.texto) ?? [lin]:nivel
      valor = (100 + p.taxavenda(arg0)) / 100 * [lin]:valor
      total > 100 && (total = 100)
      se arg0.var.z_moedas_ < valor * total
        $mens.o_1 = valor * total
        $mens.mp(m_moedas, arg0, p)
        ret
      fimse
      uint16 totcompra
      ref item
      epara linha = 0, linha < 10 && total, linha++
        ref r = criar(lin, nulo, total)
        se arg0.pesoden - arg0.pesoveste + r.pesotot > arg0.pesomax
          apagar(r)
          sair
        senao r.cabedentro(arg0) >= r.objtot
          totcompra += r.objtot
          total -= r.objtot
          arg0.var.z_moedas_ -= r.objtot * valor
          p.var.z_moedas_ += r.objtot * valor
          item = r.mudadono(arg0, r.objtot)
        senao
          apagar(r)
          sair
        fimse
      efim
      ret !totcompra, $mens.mp(m_muita_coisa, arg0)
      $mens.p(arg0, p, item)
      se totcompra == 1
        $mens.mtodos2(m_compra_um1, m_compra_um2)
      senao
        $mens.mens = totcompra
        $mens.mtodos2(m_compra_mais1, m_compra_mais2)
      fimse
      ret
    efim
# Itens que possui e itens em uma sala
    se 1
      listaobj e
      p.lojainv && e.addfim(p.dentro1)
      epara e.addfim($s_[p.lojasala].dentro1), e, e.ini.remove
        ref r = e.objini
        continuar txt(++linha) != arg1 && !n.nome(r.ident2, 1)
        valor = (100 + p.taxavenda(arg0)) / 100 * r.valor
        total > r.objtot && (total = r.objtot)
        se r.cabedentro(arg0) < total
          ret $mens.mp(m_muita_coisa, arg0)
        senao arg0.pesoden - arg0.pesoveste + r.pesotot * total / r.objtot > arg0.pesomax
          ret $mens.mp(m_muito_peso, arg0)
        senao arg0.var.z_moedas_ < valor * total
          $mens.o_1 = valor * total
          $mens.mp(m_moedas, arg0, p)
          ret
        fimse
        r = r.mudadono(arg0, total)
        arg0.var.z_moedas_ -= valor * total
        p.var.z_moedas_ += valor * total
        $mens.p(arg0, p, r)
        se total == 1
          $mens.mtodos2(m_compra_um1, m_compra_um2)
        senao
          $mens.mens = total
          $mens.mtodos2(m_compra_mais1, m_compra_mais2)
        fimse
        ret
      efim
    fimse
# Casas
    se $a_[p.lojacasa]
      prog prg
      ref r
      epara prg.iniclasse("c_" + p.lojacasa), prg.lin, prg.depois
        r = $[prg.texto]
        sair r.area != p.lojacasa
        continuar r.nomejog || txt(++linha) != arg1 && !n.nome(r.ident, 1)
        se !arg0.senha
          ret $mens.mp(m_casa_salvar, arg0, p)
        senao arg0.pnivel < config:casanivel
          $mens.mens = config:casanivel
          $mens.mp(m_casa_nivel, arg0)
          ret
        fimse
        valor = config:casajog
        lin = "cj " + txt2(arg0.sock.cnome)
        indiceitem item
        epara item.ini(lin + " "), txtsub(item.txt, 0, 2) == lin, item.depois
          valor--
        efim
        ret valor <= 0, $mens.mp(m_casa_limite, arg0, p)
        valor = (100 + p.taxavenda(arg0)) / 100 * r.valor
        se item.obj("cj " + txt2(arg0.sock.cnome) + " " + p.lojacasa)
          ret $mens.mp(m_tem_casa, arg0, p)
        senao arg0.var.z_moedas_ < valor
          $mens.o_1 = valor
          $mens.mp(m_moedas, arg0, p)
          ret
        fimse
        r.nomejog = "cj " + txt2(arg0.sock.cnome) + " " + p.lojacasa
        r.diataxa = 0 # Para atualizar a taxa de manutenção da casa
        r.tempotaxa = 1
        r.mudachave # Já faz r.objmudou=1
        r.limpa_sjog
        arg0.var.z_moedas_ -= valor
        p.var.z_moedas_ += valor * total
        r.salvar, arg0.salvar # Salva casa e personagem do jogador
        $mens.p(arg0, p)
        $mens.mens = r.nome ?? "uma casa"
        $mens.mtodos2(m_casa1, m_casa2)
        ret
      efim
    fimse
# Chave e fechadura da casa
    se $a_[p.lojachave]
      indiceitem item
      refvar casa = item.obj("cj " + txt2(arg0.sock.cnome) + " " + p.lojachave)
      se !casa
      senao txt(++linha) == arg1 || n.nome("chave da casa", 1)
        valor = (100 + p.taxavenda(arg0)) / 100 * config:casachave
        se arg0.dentro1.total + 1 > arg0.objmax
          ret $mens.mp(m_muita_coisa, arg0)
        senao arg0.volden + comum_chave:voltot > arg0.volmax
          ret $mens.mp(m_muita_coisa, arg0)
        senao arg0.pesoden - arg0.pesoveste + comum_chave:pesotot > arg0.pesomax
          ret $mens.mp(m_muito_peso, arg0)
        senao arg0.var.z_moedas_ < valor
          $mens.o_1 = valor
          $mens.mp(m_moedas, arg0, p)
          ret
        fimse
        refvar r = criar("comum_chave", arg0, 1)
        r.i_chave = casa.chave
        arg0.var.z_moedas_ -= valor
        p.var.z_moedas_ += valor
        $mens.p(arg0, p)
        $mens.mtodos2(m_chave1, m_chave2)
        ret
      senao txt(++linha) == arg1 || n.nome("fechadura da casa", 1)
        valor = (100 + p.taxavenda(arg0)) / 100 * config:casafechadura
        se arg0.var.z_moedas_ < valor
          $mens.o_1 = valor
          $mens.mp(m_moedas, arg0, p)
          ret
        fimse
        arg0.var.z_moedas_ -= valor
        p.var.z_moedas_ += valor
        casa.mudachave # Já faz r.objmudou=1
        $mens.p(arg0, p, r)
        ret $mens.mtodos2(m_fechadura1, m_fechadura2)
      fimse
    fimse
  efim
  $mens.mens = arg1
  $mens.mp(m_nao_vende, arg0)

func evento # Gera evento para arg0 e arg1
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_comprar(arg0, arg1, arg0), 1
  efim
  epara l.addfim(arg1.evento), l, l.ini.remove
    ret l.objini.cmd_comprar(arg0, arg1, arg1), 1
  efim
