classe comando_soltar
herda comando_comum
const objtipo = 2 # Pode renomear
const posic = 5
#
const m_naover = "Você não vê $m."
const m_nao_possui = "Você não possui $m."
const m_sem_destino = "Guardar onde?"
const m_moedas_nao = "Não é possível colocar moedas em $o."
const m_animal_solto = "Já possui $um-animal solt$genero-animal."
const m_chama_solta = "Não é possível soltar $a."
const m_item_nao = "Você não consegue soltar itens aqui."
const m_semperm_soltar = "Melhor não soltar nada aqui."
const m_nao_container = "$O não é container."
const m_fechado = "$O está fechad$u."
const m_item_auto = "Não é possível colocar $o dentro del$x mesm$u."
const m_item_outro = "Não é possível colocar $o em $a."
const m_sala_cheia = "Você não consegue soltar tanta coisa aqui."
const m_item_cheio = "Não consegue colocar mais nada $e $a."
const m_soltar_anim1 = "Você solta $a."
const m_soltar_anim2 = "$P solta $a."
const m_soltar_sala1 = "Você solta $o."
const m_soltar_sala2 = "$P solta $o."
const m_soltar_item1 = "Você coloca $o $e $a."
const m_soltar_item2 = "$P coloca $o $e $a."
#
const cmdsg = 0 # 0=comando soltar, 1=comando guardar
uint32 total # Quantidade de itens do mesmo tipo
int8 soltar # -1=coloca em outro item, 0=solta na sala, 1=não pode, 2=destrói ao soltar
const txtitens = total <= 1 ? arg0 : txttroca(arg0, "$o", "$1x $o")
const txtmoedas = txttroca(arg0, "$o", "$1")

func escr
  ref item # Item aonde está soltando os itens
  ref sala # Aonde soltar os itens
  listaobj l
  refvar perm_msg = $perm_[arg0.jogperm].item
  ret perm_msg, $mensjog.msg(perm_msg, arg0)
  ret cmd_soltar(arg0, arg1), nulo
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_soltar(arg0, arg1), nulo
  efim
  arg0.p_espera < 3 && (arg0.p_espera = 3)
# Checa soltar animal
  se !cmdsg && arg1 == intpos(arg1) && int(arg1) && config:animal1 >= arg1
    $mens.mens = arg1
    refvar r = misc:personum(arg0, arg1)
    ret !r, $mens.mp(m_nao_possui, arg0)
    listaitem i
    epara i = arg0.lseguir.ini, i, i.depois
      ret i.obj.tseguir == 3, $mens.mp(m_animal_solto, arg0)
    efim
    ret soltaranimal(arg0, arg0.dono, r)
  fimse
# Obtém o objeto de onde soltar
  misc:separa(arg1) # Separa nome do objeto do nome do alvo
  se !misc:sep2 # Se não tem alvo, o alvo é a sala
    ret cmdsg, $mens.mp(m_sem_destino, arg0)
    item = sala = arg0.dono
    soltar = intpos(sala.s_soltartipo(arg0))
    se soltar == 1
      ret $mens.mp(m_item_nao, arg0, nulo, item)
    senao sala.var.ini("u_") && !sala.var.u_[arg0.nome]_
      ret $mens.mp(m_semperm_soltar, arg0, nulo, item)
    fimse
  senao
    soltar = -1
    item = misc:itemtudo(arg0, misc:sep2) # Procura o alvo para o personagem arg0
    sala = item.item ? item.i_salapegar
    se !item
      $mens.mens = misc:sep2
      ret $mens.mp(m_naover, arg0)
    senao item.dono.s_sala && item.dono.var.ini("u_") && !item.dono.var.u_[arg0.nome]_
      ret $mens.mp(m_semperm_soltar, arg0, nulo, item)
    senao !item.i_aberto && !sala
      ret $mens.mp(m_nao_container, arg0, nulo, item)
    senao item.i_aberto > 2 && !arg0.j_imortal
      ret $mens.mp(m_fechado, arg0, nulo, item)
    fimse
    !sala && (sala = item)
  fimse
  nomeobj n # Para reconhecer os itens
  n.ini(misc:sep1, misc:objmax, misc:tudo)
# Solta os itens
  int8 achou # Quantos itens achou
  txt100 erro # Mensagem de erro
  epara l.addfim(arg0.dentro1), l && achou < 10, l.ini.remove
    refvar obj = l.objini
    continuar !obj.visivel(arg0) || !n.nome(obj.ident2, obj.objtot)
    total = n # Quantidade de itens
    refvar erro1 = soltarobj(arg0, item, sala, obj)
    erro1 ? (erro = erro1) : achou++
  efim
  ret achou, nulo
# Solta moedas
  se arg0.var.z_moedas_ && sala.visivel(arg0) && n.nome("moedas", arg0.var.z_moedas_)
    ret sala.i_itens, $mens.mp(m_moedas_nao, arg0, nulo, sala)
    total = n
    ret soltarmoedas(arg0, sala)
  fimse
# Não encontrou o item
  ret erro, arg0.msg(erro)
  $mens.mens = misc:sep1
  $mens.mp(m_naover, arg0)

func soltaranimal
# arg0 = quem está soltando
# arg1 = sala destino
# arg2 = animal
  ret arg2.p_animal < 2, $mens.mp(m_chama_solta, arg0, arg2)
  ret cmd_soltaranim(arg0, arg1, arg2), nulo
  listaobj e
  epara e.addfim(arg0.evento), e, e.ini.remove
    ret e.objini.cmd_soltaranim(arg0, arg1, arg2, arg0), nulo
  efim
  epara e.addfim(arg1.evento), e, e.ini.remove
    ret e.objini.cmd_soltaranim(arg0, arg1, arg2, arg1), nulo
  efim
  epara e.addfim(arg2.evento), e, e.ini.remove
    ret e.objini.cmd_soltaranim(arg0, arg1, arg2, arg2), nulo
  efim
  arg2.mudadono(arg1)
  $mens.p(arg0, arg2)
  $mens.mvis2(m_soltar_anim1, m_soltar_anim2)
  cmd_soltouanim(arg0, arg1, arg2)
  epara e.addfim(arg0.evento), e, e.ini.remove
    e.objini.cmd_soltouanim(arg0, arg1, arg2, arg0)
  efim
  epara e.addfim(arg1.evento), e, e.ini.remove
    e.objini.cmd_soltouanim(arg0, arg1, arg2, arg1)
  efim
  epara e.addfim(arg2.evento), e, e.ini.remove
    e.objini.cmd_soltouanim(arg0, arg1, arg2, arg2)
  efim

func soltarobj
# arg0 = personagem
# arg1 = item ou sala aonde quer soltar (para mensagens)
# arg2 = objeto que representa o conteúdo interno de arg1
# arg3 = item que quer soltar
# total = quantidade de itens
# Retorna mensagem de erro ou nulo se conseguiu pegar
  se arg3 == arg1 || arg3 == arg2 # Soltar o objeto dentro dele mesmo
    $mens.p(arg0, arg1, arg3)
    ret $mens.txt(m_item_auto, arg0)
  senao arg2.i_itens && txtproclin(arg1.i_itens, txt(arg3, 2)) < 0
    $mens.p(arg0, arg1, arg3)
    ret $mens.txt(m_item_outro, arg0)
  senao arg3.cabedentro(arg2) < total
    $mens.p(arg0, arg1, arg3)
    ret $mens.txt(arg1.item ? m_item_cheio : m_sala_cheia, arg0)
  fimse
  ret cmd_soltarobj(arg0, arg1, arg3, total), nulo
  listaobj e
  epara e.addfim(arg0.evento), e, e.ini.remove
    ret e.objini.cmd_soltarobj(arg0, arg1, arg3, total, arg0), nulo
  efim
  epara e.addfim(arg1.evento), e, e.ini.remove
    ret e.objini.cmd_soltarobj(arg0, arg1, arg3, total, arg1), nulo
  efim
  epara e.addfim(arg3.evento), e, e.ini.remove
    ret e.objini.cmd_soltarobj(arg0, arg1, arg3, total, arg3), nulo
  efim
  $mens.p(arg0, arg1, arg3)
  $mens.o_1 = total
  ref r = arg3
  soltar >= 2 ? arg3.apagar(total) : (r = arg3.mudadono(arg2, total))
  se soltar < 0
    refvar m1 = txtitens(arg1.i_soltouitem1 ?? m_soltar_item1)
    refvar m2 = txtitens(arg1.i_soltouitem2 ?? m_soltar_item2)
    $mens.mvis2(m1, m2)
  senao
    refvar m1 = txtitens(arg1.s_soltarmsg1 ?? m_soltar_sala1)
    refvar m2 = txtitens(arg1.s_soltarmsg2 ?? m_soltar_sala2)
    $mens.mvis2(m1, m2)
  fimse
  cmd_soltouobj(arg0, arg1, r, total)
  epara e.addfim(arg0.evento), e, e.ini.remove
    e.objini.cmd_soltouobj(arg0, arg1, r, total, arg0)
  efim
  epara e.addfim(arg1.evento), e, e.ini.remove
    e.objini.cmd_soltouobj(arg0, arg1, r, total, arg1)
  efim
  epara e.addfim(r.evento), e, e.ini.remove
    e.objini.cmd_soltouobj(arg0, arg1, r, total, r)
  efim
  arg0.p_espera += 2

func soltarmoedas
# arg0=personagem, arg1=aonde soltar, total=quantidade de moedas
  ret cmd_soltarmoedas(arg0, arg1, total), nulo
  listaobj e
  epara e.addfim(arg0.evento), e, e.ini.remove
    ret e.objini.cmd_soltarmoedas(arg0, arg1, total, arg0), nulo
  efim
  epara e.addfim(arg1.evento), e, e.ini.remove
    ret e.objini.cmd_soltarmoedas(arg0, arg1, total, arg1), nulo
  efim
  ret !total, nulo
  arg0.var.z_moedas_ -= total
  arg0.var.z_moedas_ < 0 && (arg0.var.z_moedas = "")
  arg0.p_espera += 2
  $mens.p(arg0, arg1)
  $mens.o_1 = total == 1 ? "uma moeda" : total == 2 ? "duas moedas" : txt(total) + " moedas"
  se soltar < 2
    arg1.var.z_moedas_ += total
    arg1.objmudou = 1
  fimse
  se soltar < 0
    refvar m1 = txtmoedas(arg1.i_soltouitem1 ?? m_soltar_item1)
    refvar m2 = txtmoedas(arg1.i_soltouitem2 ?? m_soltar_item2)
    $mens.mvis2(m1, m2)
  senao
    refvar m1 = txtmoedas(arg1.s_soltarmsg1 ?? m_soltar_sala1)
    refvar m2 = txtmoedas(arg1.s_soltarmsg2 ?? m_soltar_sala2)
    $mens.mvis2(m1, m2)
  fimse


classe h_cmd_soltar
herda comando_soltar
const objmenu = $m_cmd_soltar
const txtajuda = txtajuda1(config:animal1 ? m_ajuda2 : m_ajuda1)
const m_ajuda1 = "-t\n\
-s <objeto>\n\
-s <quantidade> <objeto>\n\
-s <objeto> <container>\n\
-s <quantidade> <objeto> <container>\n\
Solta um objeto no chão ou em um container (uma bolsa, uma estante, etc).\n\
Para soltar tudo (até 10 objetos) tecle TUDO ao invés do objeto."
const m_ajuda2 = "-t\n\
-s <objeto>\n\
-s <quantidade> <objeto>\n\
-s <objeto> <container>\n\
-s <quantidade> <objeto> <container>\n\
-s <número do animal>\n\
Solta um objeto no chão ou em um container (uma bolsa, uma estante, etc).\n\
Para soltar tudo (até 10 objetos) tecle TUDO ao invés do objeto.\n\
Permite também soltar algum animal (se desfazer) que você possuir."
const admordem = "m_ajuda1 m_ajuda2 m_naover m_nao_possui m_sem_destino\n\
m_moedas_nao m_animal_solto m_chama_solta m_item_nao m_semperm_soltar\n\
m_nao_container m_fechado m_item_auto m_item_outro m_sala_cheia m_item_cheio\n\
m_soltar_anim1 m_soltar_anim2 m_soltar_sala1 m_soltar_sala2\n\
m_soltar_item1 m_soltar_item2"


classe h_cmd_guardar
herda comando_soltar
const objmenu = $m_cmd_guardar
const cmdsg = 1
const m_ajuda = "-t\n\
-s <objeto> <container>\n\
-s <quantidade> <objeto> <container>\n\
Guarda um objeto em um container (uma bolsa, uma estante, etc).\n\
Para soltar tudo (até 10 objetos) tecle TUDO ao invés do objeto."
const admordem = "m_ajuda m_naover m_nao_possui m_sem_destino\n\
m_moedas_nao m_animal_solto m_chama_solta m_item_nao m_semperm_soltar\n\
m_nao_container m_fechado m_item_auto m_item_outro m_sala_cheia m_item_cheio\n\
m_soltar_anim1 m_soltar_anim2 m_soltar_sala1 m_soltar_sala2\n\
m_soltar_item1 m_soltar_item2"


classe m_cmd_soltar
herda m_cmd_soltarguardar
#
const nome1 = "Ajuda sem animal"
const tipo1 = "opc_texto"
const vari1 = "m_ajuda1"
#
const nome2 = "Ajuda com animal"
const tipo2 = "opc_texto"
const vari2 = "m_ajuda2"


classe m_cmd_guardar
herda m_cmd_soltarguardar
#
const nome1 = "Ajuda"
const tipo1 = "opc_texto"
const vari1 = "m_ajuda"


classe m_cmd_soltarguardar
herda comando_menu_cmd
#
const nome3 = "Sem alvo"
const tipo3 = "opc_linha"
const vari3 = "m_naover"
#
const nome4 = "Não possui"
const tipo4 = "opc_linha"
const vari4 = "m_nao_possui"
#
const nome5 = "Guardar onde"
const tipo5 = "opc_linha"
const vari5 = "m_sem_destino"
#
const nome6 = "Não soltar moedas"
const tipo6 = "opc_linha"
const vari6 = "m_moedas_nao"
#
const nome7 = "Animal está solto"
const tipo7 = "opc_linha"
const vari7 = "m_animal_solto"
#
const nome8 = "Não solta animal"
const info8 = "Animal que não pode ser solto"
const tipo8 = "opc_linha"
const vari8 = "m_chama_solta"
#
const nome9 = "Não soltar itens"
const tipo9 = "opc_linha"
const vari9 = "m_item_nao"
#
const nome10 = "Sem permissão"
const info10 = "Soltar item em casa de outro jogador"
const tipo10 = "opc_linha"
const vari10 = "m_semperm_soltar"
#
const nome11 = "Não é container"
const tipo11 = "opc_linha"
const vari11 = "m_nao_container"
#
const nome12 = "Está fechado"
const tipo12 = "opc_linha"
const vari12 = "m_fechado"
#
const nome13 = "Item dentro dele"
const tipo13 = "opc_linha"
const vari13 = "m_item_auto"
#
const nome14 = "Não nesse container"
const info14 = "Quando o container aceita alguns itens específicos"
const tipo14 = "opc_linha"
const vari14 = "m_item_outro"
#
const nome15 = "Sala cheia"
const tipo15 = "opc_linha"
const vari15 = "m_sala_cheia"
#
const nome16 = "Container cheio"
const tipo16 = "opc_linha"
const vari16 = "m_item_cheio"
#
const nome17 = "Soltar animal perso"
const info17 = "Pode acontecer também durante a batalha"
const tipo17 = "opc_linha"
const vari17 = "m_soltar_anim1"
#
const nome18 = "Soltar animal outros"
const info18 = "Pode acontecer também durante a batalha"
const tipo18 = "opc_linha"
const vari18 = "m_soltar_anim2"
#
const nome19 = "Item na sala perso"
const tipo19 = "opc_linha"
const vari19 = "m_soltar_sala1"
#
const nome20 = "Item na sala outros"
const tipo20 = "opc_linha"
const vari20 = "m_soltar_sala2"
#
const nome21 = "Item em item perso"
const tipo21 = "opc_linha"
const vari21 = "m_soltar_item1"
#
const nome22 = "Item em item outros"
const tipo22 = "opc_linha"
const vari22 = "m_soltar_item2"
