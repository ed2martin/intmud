classe h_cmd_estat
herda comando_comum
const objtipo = 2 # Pode renomear
const posic = 5
const txtajuda = txtajuda1(config:animal1 ? m_ajuda2 : m_ajuda1)
#
const m_ajuda1 = "-t\n\
-s\n\
Mostra as estatísticas e diversas informações sobre o seu personagem."
const m_ajuda2 = "-t\n\
-s\n\
-s <número>\n\
Mostra as estatísticas e diversas informações sobre o seu personagem\n\
ou $o-animal que você escolheu. Seguido de um número de 0 a $num-animais mostra\n\
as estatísticas $d $o-animal correspondente."
const m_naover = "Você não vê $m."
const m_sem_animal = "Você não possui $animal $m."

func escr
  textotxt t
  txt100 t1
# Obtém o personagem
  refvar r = misc:persoinfo(arg0, arg1, m_naover, m_sem_animal)
  ret !r, nulo
  t.addfim("\b\c6Estatísticas de \"" + r.descnome2 + "\"\b")
# Vida, mana e vigor
  t1 = "Vida " + r.pvida + "/" + r.pvidamax
  t1 += "  Mana " + r.pmana + "/" + r.pmanamax
  t1 += "  Vigor " + r.pmove + "/" + r.pmovemax
  t.addfim(t1)
# Fome, sede e embriaguez, somente para administradores
  se arg2 == $perm_admin && r.jog
    t1 = "Sede " + r.p_sede + " fome " + r.p_fome + " embriaguez " + r.p_bebida
    t1 += " digestão " + r.p_diges + "; máximo é " + $miscfome.cheio
    t.addfim(t1)
  fimse
# Tipo
  refvar v1 = !r.msexo2 ? $t_[r.tipo1].nome2 ?? $t_[r.tipo1].nome
  refvar v2 = !r.msexo2 ? $t_[r.tipo2].nome2 ?? $t_[r.tipo2].nome
  refvar v3 = !r.msexo2 ? $t_[r.tipo3].nome2 ?? $t_[r.tipo3].nome
  se v1 || v2 || v3
    t1 = (v1 ? ", " + v1 : "") + (v2 ? ", " + v2) + (v3 ? ", " + v3)
    t.addfim("Tipo,raça,classe: " + txt(t1, 2))
  fimse
# Gênero
  t.addfim("Gênero:           " + (r.psexo ? "Masculino" : "Feminino"))
# Quem pegou
  se r.var.z_dono
    t1 = "Pego por:         " + txte(r.var.z_dono)
    t.addfim(t1 + " (no nível " + int(r.var.z_pnivel) + ")")
  fimse
# Moedas e pontos de aulas
  r.var.z_moedas_ && t.addfim("Moedas:           " + txtnum(r.var.z_moedas_, "."))
  r.var.z_aulas_ && t.addfim("Aulas:            " + txtnum(r.var.z_aulas_, "."))
# Nível e experiência
  t1 = "Nível:            " + r.pnivel
  r.prenascer && (t1 += ", R" + r.prenascer)
  t.addfim(t1)
  se 1
    refvar nmax = r.pnivelmax
    t1 = nmax > 0 && r.pnivel >= nmax ? "" : "/" + r.expmax
    t.addfim("Experiência:      " + r.expatual + t1)
  fimse
# Batalha
  t1 = "Ataque:           Normal " + atkdef(r.atknorm, r.atktipo.0, "não causa danos")
  t.addfim(t1 + "  Especial " + atkdef(r.atkesp, r.atktipo.1, "não causa danos"))
  t1 = "Defesa:           Normal " + atkdef(r.defnorm, r.deftipo.0, "não causa danos")
  t.addfim(t1 + "  Especial " + atkdef(r.defesp, r.deftipo.1, "não causa danos"))
  t.addfim("Precisão:         " + r.precisao)
  t.addfim("Evasão:           " + r.evasao)
  t.addfim("Velocidade:       " + r.pveloc)
# Mortes
  se r == r.contr
    t.addfim("Mortes:           " + r.mortes)
  senao
    t.addfim("Desmaios:         " + r.mortes)
  fimse
# Carregando
  t1 = txtnum((r.pesoden + r.pesoobj + r.pesovar) / 1000, "0")
  t.addfim("Peso total:       " + t1 + " Kg")
  t1 = "Carregando:       " + r.dentro1.total + "/" + r.objmax
  t1 += r.objmax == 1 ? " item" : " itens"
  t1 += ", " + txtnum((r.pesoden - r.pesoveste) / 1000, "0")
  t1 += "/" + txtnum(r.pesomax / 1000, "0") + " Kg"
  t.addfim(t1)
# Teeleentra e telesai
  r.var.z_teleentra && t.addfim("Teleentra:        " + r.var.z_teleentra)
  r.var.z_telesai && t.addfim("Telesai:          " + r.var.z_telesai)
# Mensagem para o usuário
  arg0.msg2(t.remove(1000))

func atkdef
# arg0 = valor do ataque ou da dadefesa
# arg1 = modificador (0=imune, 1=sem modificação)
# arg2 = texto se imune
  ret arg1 == 0, txt(arg0) + " (" + arg2 + ")"
  ret arg1 < 1, txt(arg0) + " -" + int(1000 - arg1 * 1000) / 10 + "% danos"
  ret arg1 > 1, txt(arg0) + " +" + int(arg1 * 1000 - 1000) / 10 + "% danos"
  ret txt(arg0)


classe h_cmd_infojog
herda comando_comum
const objtipo = 2 # Pode renomear
const m_ajuda = "-t\n\
-s <jogador>\n\
Mostra algumas informações de um personagem de jogador, mesmo que\n\
não esteja online."
const posic = 0
#
sav textovar var # Variáveis criadas sob demanda
sav txt20 nome # Nome do personagem
txt100 cnome # Para obter o nome codificado
sav int1 psexo
const msexo2 = int(var.z_msexo ?? psexo)
sav uint16 pnivel
sav uint16 prenascer
sav txt32 tipo1
sav txt32 tipo2
sav txt32 tipo3
sav int32 tempojogo1
sav uint16 tempojogo2

func escr
  ret !arg1, arg0.msg("Tecle o nome do personagem após INFOJOG")
# Obtém: p = objeto do personagem
  ref p # Objeto do personagem
  enquanto 1
    refvar nomesav = txts(txtnome(arg1))
    indiceitem item
    p = item.obj("pn " + nomesav)
    sair p
    ret !misc:nomeperso(arg1), arg0.msg("Nome inválido para jogador: " + arg1)
    arqsav sav1
    listaobj l1
    p = este, l1.addfim(p)
    p.cnome = "x " + nomesav
    sair sav1.ler("sav1/" + nomesav + ".sav", l1, 1)
    ret arg0.msg("Jogador inexistente: " + arg1)
  efim
# Mostra os dados do personagem
  textotxt t
  txt100 lin
  lin = p.psexo ? "Jogador " : "Jogadora "
  t.addfim(lin + p.nome + (p.var.z_titulo ? ", " + p.var.z_titulo) + "\b")
  t.addfim("Nível:         " + (p.prenascer ? "R" + p.prenascer + " ") + p.pnivel)
  lin = ""
  txt100 nome
  nome = !p.msexo2 ? $t_[p.tipo1].nome2 ?? $t_[p.tipo1].nome ?? p.tipo1
  nome && (lin += ", " + nome)
  nome = !p.msexo2 ? $t_[p.tipo2].nome2 ?? $t_[p.tipo2].nome ?? p.tipo2
  nome && (lin += ", " + nome)
  nome = !p.msexo2 ? $t_[p.tipo3].nome2 ?? $t_[p.tipo3].nome ?? p.tipo3
  nome && (lin += ", " + nome)
  lin && t.addfim("Raça/classe:   " + txt2(lin))
  lin = "Tempo de jogo: "
  p.tempojogo2 == 1 && (lin += "1 dia ")
  p.tempojogo2 > 1 && (lin += txt(p.tempojogo2) + " dias ")
  refvar horas = intdiv((864000 - p.tempojogo1) / 36000)
  se horas < 1
    t.addfim(p.tempojogo2 < 1 ? lin + " menos de uma hora" : lin)
  senao horas == 1
    t.addfim(lin + " uma hora")
  senao horas == 2
    t.addfim(lin + " duas horas")
  senao
    t.addfim(lin + horas + " horas")
  fimse
  arg0.msg2(t.remove(1000))


classe h_cmd_hora
herda comando_comum
const m_ajuda = "-t\n-s\nMostra a hora atual, no calendário do MUD e no servidor."
const posic = 0

func escr
  txt100 t1
  datahora d
  d.agora
  t1 = "  (" + semanamud(misc:dia) + ")"
  arg0.msg("Hora atual MUD:      " + misc:hora + ":" + misc:min + t1)
  t1 = "Hora atual servidor: " + d.hora + ":" + d.min
  arg0.msg(t1 + "  " + d.dia + "/" + d.mes + "/" + d.ano)
  t1 = "Tempo total de jogo: "
  arg0.tempojogo2 == 1 && (t1 += "1 dia ")
  arg0.tempojogo2 > 1 && (t1 += txt(arg0.tempojogo2) + " dias ")
  t1 += intdiv((864000 - arg0.tempojogo1) / 36000)
  t1 += ":"
  t1 += intdiv((864000 - arg0.tempojogo1) / 600) % 60
  arg0.msg(t1 + " horas")
  ret !arg0.sock, nulo
  int32 x
  x = arg0.sock.tempojogo
  se x >= 24 * 36000
    t1 = "Mais de 24 horas"
  senao
    t1 = intdiv(x / 36000)
    t1 += ":" + intdiv(x / 600) % 60 + " horas"
  fimse
  arg0.msg("Tempo dessa sessão:  " + t1)

func semanamud
  casovar arg0
  casose "0"
    ret "Domingo"
  casose "1"
    ret "Segunda-feira"
  casose "2"
    ret "Terça-feira"
  casose "3"
    ret "Quarta-feira"
  casose "4"
    ret "Quinta-feira"
  casose "5"
    ret "Sexta-feira"
  casose "6"
    ret "Sábado"
  casofim


classe h_cmd_onde
herda comando_comum
const objtipo = 2 # Pode renomear
const m_ajuda = "-t\n\
-s\n\
Mostra a área em que você está e os jogadores que estiverem por perto."
const posic = 0

func escr
  textotxt t0
  txt100 area
  ref r
  epara r = arg0.dono, r.dono, r = r.dono
  efim
  area = r.s_area
# Checa se pode ver a sala
  se !r.visivel(arg0)
    se 1 & arg0.bitver
      arg0.msg("Está escuro...")
    senao
      $mens.mp("Você está ceg$s.", arg0)
    fimse
    ret
  fimse
# Dados da área
  t0.addfim("\b\c6Área " + $a_[area].a_nome + ":\b")
# Lista de personagens dos jogadores
  indiceitem item
  epara item.ini("pn "), txt1(item.txt) == "pn", item.depois
# continuar item.obj.jogconfig.18 && !arg0.jogconfig.18
    continuar !item.obj.visivel(arg0)
    epara r = item.obj.dono, r.dono, r = r.dono
    efim
    continuar area != r.s_area
    refvar titulo = item.obj.dono.var.z_titulo ?? item.obj.dono.s_titulo(arg0)
    t0.addfim(item.obj.nome + "    " + titulo)
  efim
  t0.txtmostra
  arg0.msg2(t0.remove(1000))


classe h_cmd_saidas
herda comando_comum
const objtipo = 2 # Pode renomear
const posic = 5
#
const m_ajuda = "-t\n-s\nMostra as saídas óbvias do lugar onde você está."
const m_lista = "Saídas óbvias:"
const m_nenhum = "Não há nenhuma saída óbvia."
const m_escuro = "Está escuro..."
const m_dir_fechado = "Está fechado"
const m_dir_escuro = "Está escuro"

func escr
  se !arg0.dono.visivel(arg0)
    $mens.mp(m_escuro, arg0)
    ret
  fimse
  textotxt t
  txt80 dir
  ref dono = arg0.dono
  epara dir = misc:listadir, dir, dir = txt2(dir)
    refvar nome = txt1(dir)
    refvar sala = dono.dirsala(nome, arg0)
    continuar !sala || dono.inv_[txt1(dir)](arg0)
    se int(dono.porta_[nome]) >= 2
      t.addfim(txt(txtmai(nome) + "       ", 0, 8) + m_dir_fechado)
    senao sala.visivel(arg0)
      refvar titulo = sala.var.z_titulo ?? sala.s_titulo(arg0)
      t.addfim(txt(txtmai(nome) + "       ", 0, 8) + titulo)
    senao
      t.addfim(txt(txtmai(nome) + "       ", 0, 8) + m_dir_escuro)
    fimse
  efim
  se t.linhas
    arg0.msg2("\b\c6" + m_lista + "\b\n" + t.remove(1000))
  senao
    $mens.mp(m_nenhum, arg0)
  fimse


classe h_cmd_moedas
herda comando_comum
const objtipo = 2 # Pode renomear
const m_ajuda = "-t\n-s\nMostra quantas moedas você está carregando."
const posic = 0

func escr
  txt100 lin
  txt100 lin2
  se !arg0.var.z_moedas_
    lin = "Nenhuma moeda"
  senao arg0.var.z_moedas_ == 1
    lin = "Uma moeda"
  senao arg0.var.z_moedas_ == 2
    lin = "Duas moedas"
  senao
    lin = txtnum(arg0.var.z_moedas_, ".") + " moedas"
  fimse
  se arg0.persoesc == arg0 || !arg0.persoesc.var.z_moedas_
  senao arg0.persoesc.var.z_moedas_ == 1
    lin2 = " uma moeda"
  senao arg0.var.z_moedas_ == 2
    lin2 = " duas moeda"
  senao
    lin2 = " " + txtnum(arg0.var.z_moedas_, ".") + " moedas"
  fimse
  lin2 && (lin += ", " + txtcopiamai(arg0.persoesc.descnome2, "A") + lin2)
  arg0.msg(lin + ".")


classe h_cmd_relatar
herda comando_comum
const objtipo = 2 # Pode renomear
const posic = 5
const m_ajuda = "-t\n\
-s\n\
Mostra as suas estatísticas (vida, mana, movimento e experiência) para\n\
os outros personagens e jogadores que estiverem na mesma sala."

func escr
  txt200 lin
  lin = txt(arg0.descnome2) + " relata:\n"
  lin += "Vida " + arg0.pvida + "/" + arg0.pvidamax
  lin += "  Mana " + arg0.pmana + "/" + arg0.pmanamax
  lin += "  Vigor " + arg0.pmove + "/" + arg0.pmovemax
  lin += "  Nível " + arg0.pnivel
  lin += "  Experiência " + arg0.expatual
  arg0.dono.msg(lin)


classe h_cmd_efeito
herda comando_comum, opc_atribcomum
const objtipo = 2 # Pode renomear
const posic = 0
#
const m_ajuda = "-t\n\
-s [nome do efeito]\n\
Sem argumentos mostra os efeitos que estão afetando o seu personagem.\n\
Seguido de um nome, mostra informações sobre o efeito."
const m_nada1 = "Nenhum efeito afetando você."
const m_nada2 = "Nenhum efeito afetando $a."
const m_lista1 = "Efeitos afetando você:"
const m_lista2 = "Efeitos afetando $a:"
const m_sem_info = "Nenhuma informação sobre o efeito: $m"

func escr
  listaitem i
  ref r = arg0.persoesc
  se arg1
    ref obj
    nomeobj n
    n.ini(arg1, 1)
    epara i = r.dentro2.ini, i, i.depois
      continuar !txtcor(i.obj.e_nome) || !n.nome(txtcor(i.obj.e_nome))
      textotxt t
      txt100 lin = "Efeito " + i.obj.e_nome + ", duração "
      lin += i.obj.t_duracao ? txt(int(i.obj.t_duracao / 10)) : " indeterminada"
      t.addfim(lin)
      atrib_ler(i.obj, "recalc2_auto")
      atrib_txt(t)
      i.obj.e_desc && t.addfim(i.obj.e_desc)
      ret arg0.msg2(t.remove(1000))
    efim
    $mens.mens = arg1
    ret $mens.mp(m_sem_info, arg0)
  fimse
  textotxt h
  epara i = r.dentro2.ini, i, i.depois
    continuar !i.obj.e_nome
    h.addfim("1 " + i.obj.e_nome + (i.obj.t_duracao ? " (" + int(i.obj.t_duracao / 10) + \
")"))
  efim
  refvar nome = r == arg0 ? "você" : r.descnome2
  ret !h.linhas, $mens.mp(r == arg0 ? m_nada1 : m_nada2, arg0, r)
  $mens.p(arg0, r)
  h.ordenalin("", "x")
  h.addini("\b\c6" + $mens.txt(r == arg0 ? m_lista1 : m_lista2, arg0) + "\b")
  arg0.msg2(h.remove(1000))


classe h_cmd_vida
herda comando_comum
const objtipo = 2 # Pode renomear
const posic = 0
const txtajuda = txtajuda1(config:animal1 ? m_ajuda2 : m_ajuda1, "$num")
const m_ajuda1 = "-t\n\
-s\n\
Mostra os pontos de vida, mana, vigor, nível e experiência do seu personagem."
const m_ajuda2 = "-t\n\
-s\n\
-s <número>\n\
Mostra os pontos de vida, mana, vigor, nível e experiência do seu personagem.\n\
Seguido de um número de 0 a $num-animais, mostra as informações $d $o-animal correspondente."
const m_naover = "Você não vê $m."
const m_sem_animal = "Você não possui $animal $m."

func escr
  refvar r = misc:persoinfo(arg0, arg1, m_naover, m_sem_animal)
  ret !r, nulo
  $mens.mens = vidalin(r)
  $mens.p(arg0, r)
  $mens.msgvis(r == arg0 ? "$m" : "$C: $m", arg0)

func vidalin
  txt100 lin
  lin = "Vida " + arg0.pvida + "/" + arg0.pvidamax
  lin += "  Mana " + arg0.pmana + "/" + arg0.pmanamax
  lin += "  Vigor " + arg0.pmove + "/" + arg0.pmovemax
  lin += "  Nível " + arg0.pnivel
  lin += "  Experiência " + arg0.expatual
  refvar nmax = arg0.pnivelmax
  (nmax <= 0 || arg0.pnivel < nmax) && (lin += "/" + arg0.expmax)
  ret lin


classe h_cmd_inv
herda comando_comum
const objtipo = 2 # Pode renomear
const posic = 5
const txtajuda = txtajuda1(config:animal1 ? m_ajuda2)
#
const m_ajuda1 = "-t\n-s\nMostra os itens que o seu personagem está carregando."
const m_ajuda2 = "-t\n\
-s\n\
-s <número>\n\
Mostra os itens que o seu personagem está carregando.\n\
Seguido de um número de 0 a $num-animais mostra os itens $d $o-animal correspondente."
const m_naover = "Você não vê $m."
const m_sem_animal = "Você não possui $animal $m."
const m_nada1 = "Você não está carregando nada."
const m_nada2 = "$A não está carregando nada."
const m_lista1 = "Você carrega:"
const m_lista2 = "$A carrega:"

func escr
  textotxt t
  listaitem item
  refvar r = misc:persoinfo(arg0, arg1, m_naover, m_sem_animal)
  ret !r, nulo
  epara item = r.dentro1.fim, item, item.antes
    refvar i = item.obj
    continuar !i.visivel(arg0)
    refvar nn = txtsublin(i.atribs.ini.textolin(2), 1)
    t.addfim(txt(i.objtot) + i.atribs.ini.texto + txtcopiamai(i.descnome2, "A") + nn)
  efim
  t.juntalin("(", "x)")
  se t
    $mens.p(arg0, r)
    refvar nome = $mens.txt(r == arg0 ? m_lista1 : m_lista2, arg0)
    arg0.msg2("\b\c6" + nome + "\b\n" + txttroca(t.remove(1000), "\d+", "\n"))
  senao
    $mens.mp(r == arg0 ? m_nada1 : m_nada2, arg0, r)
  fimse


classe h_cmd_hab
herda comando_comum
const objtipo = 2 # Pode renomear
const posic = 5
#
const m_ajuda = "-t\n\
-s [nome da habilidade]\n\
Sem argumentos mostra as habilidades do seu personagem.\n\
Seguido de um nome, mostra informações sobre a habilidade.\n\
Geralmente pode-se usar uma habilidade teclando-se o nome dela."
const m_sem_info = "Nenhuma informação sobre a habilidade: $m"
const m_nenhum = "Nenhuma habilidade."
const m_lista1 = "Habilidades:"
const m_lista2 = "Habilidades de $c:"

func escr
  ref r = arg0.persoesc
  se arg1
    ref obj
    prog p
    epara p.iniclasse("cmd_" + txt1(arg1)), p.lin, p.depois
      continuar !r.var.[$[p.texto].nomevar]
      refvar t1 = $[p.texto].habajuda(r)
      ret t1, arg0.msg2(t1)
    efim
    $mens.mens = arg1
    ret $mens.mp(m_sem_info, arg0)
  fimse
  textotxt h
  txt100 t1
  txt100 t2
  epara t1 = r.var.ini("h_"), t1, t1 = r.var.depois(t1, "h_")
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    t2 += " / " + txtsublin(misc:aulas, r.var.[t1]_, 1)
    txt2(r.var.[t1]) && (t2 += " R" + txt2(r.var.[t1]))
    h.addfim(t2)
  efim
  ret !h.linhas, $mens.mp(m_nenhum, arg0)
  $mens.p(arg0, arg0.persoesc)
  h.addini("\b\c6" + $mens.txt(r == arg0 ? m_lista1 : m_lista2, arg0) + "\b")
  arg0.msg2(h.remove(1000))


classe h_cmd_magia
herda comando_comum
const objtipo = 2 # Pode renomear
const posic = 5
#
const m_ajuda = "-t\n\
-s [nome da magia]\n\
Sem argumentos mostra as magias do seu personagem.\n\
Seguido de um nome, mostra informações sobre a magia.\n\
Geralmente pode-se usar uma magia teclando-se lançar e o nome dela."
const m_sem_info = "Nenhuma informação sobre a magia: $m"
const m_nenhum = "Nenhuma magia."
const m_lista1 = "Magias:"
const m_lista2 = "Magias de $c:"

func escr
  ref r = arg0.persoesc
  se arg1
    ref obj
    prog p
    epara p.iniclasse("magia_" + txt1(arg1)), p.lin, p.depois
      continuar !r.var.[$[p.texto].nomevar]
      refvar t1 = $[p.texto].habajuda(r)
      ret t1, arg0.msg2(t1)
    efim
    $mens.mens = arg1
    ret $mens.mp(m_sem_info, arg0)
  fimse
  textotxt h
  txt100 t1
  txt100 t2
  epara t1 = r.var.ini("m_"), t1, t1 = r.var.depois(t1, "m_")
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    t2 += " / " + txtsublin(misc:aulas, r.var.[t1]_, 1)
    txt2(r.var.[t1]) && (t2 += " R" + txt2(r.var.[t1]))
    h.addfim(t2)
  efim
  ret !h.linhas, $mens.mp(m_nenhum, arg0)
  $mens.p(arg0, arg0.persoesc)
  h.addini("\b\c6" + $mens.txt(r == arg0 ? m_lista1 : m_lista2, arg0) + "\b")
  arg0.msg2(h.remove(1000))


classe h_cmd_outros
herda comando_comum
const objtipo = 2 # Pode renomear
const posic = 5
#
const m_ajuda = "-t\n\
-s\n\
Mostra itens e habilidades extras. Geralmente são permanentes (não pode-se\n\
pegar, soltar, dar e vestir)."
const m_nenhum = "Nenhum item."
const m_lista1 = "Outros:"
const m_lista2 = "Outros de $c:"

func escr
  ref r = arg0.persoesc
  textotxt h
  txt100 t1
  txt100 t2
  epara t1 = r.var.ini("o_"), t1, t1 = r.var.depois(t1, "o_")
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    se txt(int(r.var.[t1])) == r.var.[t1]
      t2 += " / " + txtsublin(misc:aulas, r.var.[t1], 1)
    senao
      t2 += " / " + r.var.[t1]
    fimse
    h.addfim(t2)
  efim
  ret !h.linhas, $mens.mp(m_nenhum, arg0)
  $mens.p(arg0, r)
  h.addini("\b\c6" + $mens.txt(r == arg0 ? m_lista1 : m_lista2, arg0) + "\b")
  arg0.msg2(h.remove(1000))
