classe comando_comum_ajuda
herda mens_tabela
# Comando para os jogadores que contém somente páginas de ajuda

const objtipo = 0 # Tipo de comando
# 0 = não pode ser renomeado ou criar atalho para esse comando
# 1 = não pode ser renomeado mas pode criar atalho
# 2 = pode ser renomeado e criar atalho
# 3 = atalho para comando

func iniclasse
  ret txt(arg0, 0, 2) != "h_", !$[arg0] && criar(arg0)
  prog p
  p.iniherdainv(arg0)
  ret p.lin, nulo
  p.criar(txt(arg0, 2) + "\nconfig/cmd\nherda " + arg0)
  misccriar:add(txt(arg0, 2))

const txtajuda = txtajuda1(m_ajuda)

func txtajuda1 # Prepara um texto de ajuda
# arg0 = texto original
  txt20 sintaxe = "Sintaxe: "
  prog pr
  textotxt t
  t.addfim(arg0)
  textopos p = t.ini
  enquanto p.lin
    casovar txt1(txte(p.texto(0, 4)))
    casose "-t"
      p.mudar("\b\c3" + (p.texto(3) ?? txtmaimin(txt2(txte(este)))) + "\b")
      p.depois
      continuar
    casose "-s"
      p.mudar(sintaxe + txtmai(txt2(txte(este))), 0, 2)
      p.depois
      sintaxe = "         "
      continuar
    casose "-ss"
      p.mudar(sintaxe, 0, 4)
      p.depois
      sintaxe = "         "
      continuar
    casose "-h" # Menu classe herdada
      refvar cl = txt1(p.texto(1))
      pr.iniherdainv(cl)
      sair pr.existe(pr.texto, "objcmd") ? !$[pr.texto].objcmd : !$[pr.texto]
      refvar n = txt2(txte(pr.texto))
      p.mudar("  \c2" + txtmai(n) + "\b" + txtesp(12 - inttotal(n)), 0, inttotal(cl + 4))
      p.depois
      continuar
    casose "-cmd" # Menu classe
      refvar cl = txt1(p.texto(1))
      sair pr.existe(cl, "objcmd") ? !$[cl].objcmd : !$[cl]
      refvar n = txt2(txte(cl))
      p.mudar("  \c2" + txtmai(n) + "\b" + txtesp(12 - inttotal(n)), 0, inttotal(cl + 4))
      p.depois
      continuar
    casose "-"
      p.mudar("", 0, 2)
    casose
      p.depois
      continuar
    casofim
    p.remove
  efim
  ret vartrocacod(vartrocacod(t.remove(1000), "$", "o_"), "\d", "x_")


classe comando_comum
herda comando_comum_ajuda
# Comandos para os jogadores
#
const posic = 8 # Posição mínima para usar o comando
#
const objcmd = este # Objeto que processa o comando, ou nulo se não existe
# arg0 = objeto do personagem
# arg1 = objeto perm com as permissões do personagem: $perm_[arg0.jogperm]
#
const objnivel = 0 # Prioridade do comando (0=maior prioridade)
# arg0 = objeto do personagem
# arg1 = objeto perm com as permissões do personagem: $perm_[arg0.jogperm]

func escr # Processa o comando
# arg0 = objeto do personagem
# arg1 = texto digitado após o nome do comando
# arg2 = objeto perm com as permissões do personagem: $perm_[arg0.jogperm]


classe comando_atalho
# Atalhos para comandos dos jogadores
const comando = "" # Nome da classe "cmd_"
const iniclasse = !$[arg0] && criar(arg0)
const objtipo = 3 # Atalho para comando
const objcmd = $[comando].objcmd(arg0)


classe comando_menu_cmd
herda comando_menu
const titulo = txtcopiamai(txt(var.classe1, 4), "A")
const menufim = "menu_econfig_cmd"
const colunas = 24
const classe = var.classe1


classe comum_negociar
# Comandos em que o PNJ negocia com alguém: comprar, vender, avaliar, etc.

func negociar_msg # Checa se PNJ pode negociar e obtém o motivo
# arg0 = personagem do jogador
# arg1 = PNJ
# Retorna: "" se negocia, "\b" se apenas não negocia ou mensagem com o motivo
  ret arg0.atkenv || arg1.atkenv || !arg1.visivel(arg0), "\b"
  se arg1.lojaaulaidioma # Se requer idioma específico
    refvar cond = txtproclin(txte(arg1.lojaidioma), txte(arg0.var.z_idioma)) < 0
    se cond || int(arg1.lojaaulaidioma) > arg0.var.i_[arg0.var.z_idioma]_
      $mens.mens = ""
      int16 x
      refvar total = intsublin(arg1.lojaidioma)
      epara x = 0, x < total, x++
        refvar i = txtsublin(arg1.lojaidioma, x, 1)
        x > 0 && ($mens.mens += x == total - 1 ? " e " : ", ")
        $mens.mens += $idioma_[i].falar ?? i
      efim
      $mens.o_1 = txtmin(txtsublin(misc:aulas, arg1.lojaaulaidioma, 1))
      $mens.p(arg1, arg0)
      ret $mens.txt(arg1.lojamsgidioma, arg0)
    fimse
  fimse
  uint8 naotipos
  se !arg0.visivel(arg1)
    $mens.p(arg1, arg0)
    ret $mens.txt(arg1.lojainvisivel, arg0)
  senao !arg1.lojanao # negocia com todos
  senao arg0.tipo1 && txtproclin(txte(arg1.lojanao), txte(arg0.tipo1)) >= 0
    naotipos |= 1
  senao arg0.tipo2 && txtproclin(txte(arg1.lojanao), txte(arg0.tipo2)) >= 0
    naotipos |= 2
  senao arg0.tipo3 && txtproclin(txte(arg1.lojanao), txte(arg0.tipo3)) >= 0
    naotipos |= 4
  fimse
  se !arg1.lojasim # negocia com todos
  senao arg0.tipo1 && txtproclin(txte(arg1.lojasim), txte(arg0.tipo1)) >= 0
  senao arg0.tipo2 && txtproclin(txte(arg1.lojasim), txte(arg0.tipo2)) >= 0
  senao arg0.tipo3 && txtproclin(txte(arg1.lojasim), txte(arg0.tipo3)) >= 0
  senao
    arg0.tipo1 && (naotipos |= 1)
    arg0.tipo2 && (naotipos |= 2)
    arg0.tipo3 && (naotipos |= 4)
  fimse
  se naotipos
    txt100 lin
    txt100 nome
    nome = !arg0.msexo2 ? $t_[arg0.tipo1].nome2 ?? $t_[arg0.tipo1].nome ?? arg0.tipo1
    naotipos & 1 && nome && (lin += " " + nome)
    nome = !arg0.msexo2 ? $t_[arg0.tipo2].nome2 ?? $t_[arg0.tipo2].nome ?? arg0.tipo2
    naotipos & 2 && nome && (lin += " " + nome)
    nome = !arg0.msexo2 ? $t_[arg0.tipo3].nome2 ?? $t_[arg0.tipo3].nome ?? arg0.tipo3
    naotipos & 4 && nome && (lin += " " + nome)
    $mens.p(arg1, arg0)
    $mens.mens = txt(lin, 1) ?? config:mens_tu
    ret $mens.txt(arg1.lojanaonegocia, arg0)
  fimse
  refvar abre = int(arg1.lojaini) - misc:hora
  refvar fecha = int(arg1.lojafim) - misc:hora
  se abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0
    $mens.p(arg1, arg0)
    ret $mens.txt(arg1.lojafechada, arg0)
  fimse
  ret ""

func negociar_checa # Checa se PNJ pode negociar
# arg0 = personagem do jogador
# arg1 = PNJ
# Retorna: "" se negocia ou "\b" se não negocia
  ret arg0.atkenv || arg1.atkenv || !arg1.visivel(arg0) || !arg0.visivel(arg1), "\b"
  se arg1.lojaaulaidioma # Se requer idioma específico
    ret txtproclin(txte(arg1.lojaidioma), txte(arg0.var.z_idioma)) < 0, "\b"
    ret int(arg1.lojaaulaidioma) > arg0.var.i_[arg0.var.z_idioma]_, "\b"
  fimse
  se arg1.lojanao
    ret arg0.tipo1 && txtproclin(txte(arg1.lojanao), txte(arg0.tipo1)) >= 0, "\b"
    ret arg0.tipo2 && txtproclin(txte(arg1.lojanao), txte(arg0.tipo2)) >= 0, "\b"
    ret arg0.tipo3 && txtproclin(txte(arg1.lojanao), txte(arg0.tipo3)) >= 0, "\b"
  fimse
  se !arg1.lojasim # negocia com todos
  senao arg0.tipo1 && txtproclin(txte(arg1.lojasim), txte(arg0.tipo1)) >= 0
  senao arg0.tipo2 && txtproclin(txte(arg1.lojasim), txte(arg0.tipo2)) >= 0
  senao arg0.tipo3 && txtproclin(txte(arg1.lojasim), txte(arg0.tipo3)) >= 0
  senao
    ret "\b"
  fimse
  refvar abre = int(arg1.lojaini) - misc:hora
  refvar fecha = int(arg1.lojafim) - misc:hora
  ret abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0, "\b"
  ret ""


classe comum_vestir
# Checagem básica se pode vestir ou empunhar algo

func checavestir # Verifica se pode vestir um item
# arg0 = personagem
# arg1 = item
# Retorna mensagem se não pode vestir ou nulo se pode
  refvar tipomsg = arg0.dono.perso ? "_a" : "_p"
# Checa se o personagem pode vestir
  se arg1.vestirsim == (arg0.dono.perso ? 1 : 2)
    ret m_nao_consegue[tipomsg]
  senao arg1.vestirsexo == (arg0.psexo ? 1 : 2)
    ret m_nao_consegue[tipomsg]
# Checa o nível
  senao int(arg1.pnivel) > arg0.pnivel
    $mens.mens = arg1.pnivel
    ret m_nivel[tipomsg]
  senao int(arg1.renascer) > (arg0.dono.perso ? arg0.dono.prenascer : arg0.prenascer)
    $mens.mens = arg1.renascer
    ret arg1.renascer == 1, m_renascer1
    ret arg1.renascer == 2, m_renascer2
    ret m_renascer3
# Checa se a classe ou a raça tem permissão
  senao !arg1.vestirnao
  senao arg0.tipo1 && txtproclin(txte(arg1.vestirnao), txte(arg0.tipo1)) >= 0
    ret m_nao_consegue[tipomsg]
  senao arg0.tipo2 && txtproclin(txte(arg1.vestirnao), txte(arg0.tipo2)) >= 0
    ret m_nao_consegue[tipomsg]
  senao arg0.tipo3 && txtproclin(txte(arg1.vestirnao), txte(arg0.tipo3)) >= 0
    ret m_nao_consegue[tipomsg]
  fimse
# Checa se tem conhecimento suficiente
  txt200 lin
  textotxt t2
  epara t2.addfim(arg1.vestiraula(arg0)), t2.linhas, t2.remove
    continuar !(lin = t2.ini.texto)
    continuar arg0.var.[txt1(lin)]_ >= txt2(lin)
    $mens.mens = misc:nomevar(txt1(lin))
    $mens.o_1 = txtmin(txtsublin(misc:aulas, txt2(lin), 1))
    ret m_conhecimento[tipomsg]
  efim


classe comum_vestir_obj
herda comum_vestir
const m_nao_consegue_p = 1
const m_nao_consegue_a = 1
const m_nivel_p = 1
const m_nivel_a = 1
const m_renascer1 = 1
const m_renascer2 = 1
const m_renascer3 = 1
const m_conhecimento_p = 1
const m_conhecimento_a = 1
const iniclasse = !$[arg0] && criar(arg0)
