classe h_cmd_aulas
herda comando_comum, comum_negociar
const objtipo = 2 # Pode renomear
const posic = 5
#
const m_ajuda = "-t\n-s [nome ou número do curso]\n\
Sem argumentos mostra quem dá aulas e o que ensina.\n\
Seguido de um nome ou o número na lista mostra informações sobre um curso.\n\
Para aprender, tecle APRENDER seguido do nome ou número do curso."

func escr
  arg1 ? escr2(arg0, arg1) : escr1(arg0)

func escr1 # Consultar a lista de aulas
  uint32 aulas # Quantas aulas ensina
  uint32 valor # Preço da aula
  real2 lucro # Para calcular o lucro do vendedor
  txt200 lin
  textotxt t
  listaobj l
  int32 linha
  linha = 1, l.addfim(arg0.dono.dentro2)
  epara l.remove(arg0), l, l.ini.remove
    refvar p = ref(l.objini) # Personagem que está sendo verificado
    continuar !p.lojaaula(arg0)
    lin = negociar_msg(arg0, p)
    continuar lin == "\b"
    ret lin, arg0.msg(lin)
    se lin = evento(arg0, p) # Nota: atribui mensagem a lin e checa se lin!=""
      t.addfim(txtcopiamai(p.descnome2, "A") + ": " + lin)
      continuar
    fimse
    t.addfim("\b\c6" + txtcopiamai(p.descnome2, "A") + " ensina:\b")
    lucro = p.taxaaula(arg0) / 100
    textotxt t2
    t2.addfim(p.lojaaula(arg0))
    enquanto t2.linhas
      continuar !(lin = t2.remove)
      aulas = txt2(lin)
      valor = lucro * $[misc:objvar(lin)].valor(arg0)
      lin = "\b\c2" + linha + (linha < 10 ? "\b. " : "\b.") + misc:nomevar(txt1(lin))
      lin += txtesp(40 - inttotal(lin + valor)) + "$" + valor
      aulas && (lin += "   (" + txtsublin(misc:aulas, aulas, 1) + ")")
      t.addfim(lin), linha++
    efim
  efim
  ret t.linhas, arg0.msg2(t.remove(1000))
  arg0.msg("Não há professores aqui.")

func escr2 # Consultar uma aula
  uint32 aulas # Quantas aulas ensina
  uint32 valor # Preço da aula
  txt200 lin
  listaobj l
  nomeobj n
  int32 linha
  l.addfim(arg0.dono.dentro2), n.ini(arg1, 1)
  epara l.remove(arg0), l, l.ini.remove
    refvar p = ref(l.objini) # Personagem que está sendo verificado
    continuar !p.lojaaula(arg0)
    continuar negociar_checa(arg0, p)
    continuar evento(arg0, p)
    textotxt t2
    epara t2.addfim(p.lojaaula(arg0)), t2.linhas, t2.remove
      continuar !(lin = t2.ini.texto)
      lin = misc:nomevar(txt1(lin)), linha++
      continuar !n.nome(lin, 1) && txt(linha) != arg1
      ref r = $[misc:objvar(t2.ini.texto)]
      valor = r.valor(arg0) * p.taxaaula(arg0) / 100
      aulas = txt2(t2.ini.texto)
      t2.limpar
      t2.addfim(r.habajuda(arg0))
      se t2.bytes <= 1
        t2.limpar
        t2.addfim("\b\c3" + lin + "\b")
      fimse
      t2.addini("\b\c6" + txtcopiamai(p.descnome2, "A") + " explica:\b")
      lin = "Ensino até o nível " + txtmin(txtsublin(misc:aulas, aulas, 1))
      lin += valor <= 0 ? ", não cobro nada." : ", cobro $" + valor + " por aula."
      t2.addfim(lin)
      se r.aulapontos == 1
        t2.addfim("Cada aula custa 1 ponto de aula.")
      senao r.aulapontos > 1
        t2.addfim("Cada aula custa " + r.aulapontos + " pontos de aula.")
      fimse
      ret arg0.msg2(t2.remove(1000))
    efim
  efim
  arg0.msg("Ninguém ensina isso aqui.")

func evento # Gera evento para arg0 e arg1
  listaobj l
  txt100 t
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret t = l.objini.cmd_aprender(arg0, arg1, arg0), t
  efim
  epara l.addfim(arg1.evento), l, l.ini.remove
    ret t = l.objini.cmd_aprender(arg0, arg1, arg1), t
  efim
