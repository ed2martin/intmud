classe adm_tipo
herda comando_adm_ajuda
const m_ajuda = "-t Comandos para tipos de personagens (raças e classes)\n\
-m LTIPO Lista tipos de personagens\n\
-m CTIPO Cria um tipo de personagem\n\
-m ETIPO Edita um tipo de personagem\n\
-m ATIPO Apaga um tipo de personagem\n\
-m TRES Edita comandos do reset de tipo"


classe adm_ltipo
herda comando_adm
const m_ajuda = "-t\n\
-s [nome]\n\
Lista os tipos de personagens que começam com o nome especificado.\n\
Se o nome for omitido, lista todos os personagens.\n\
Nota: tipos de personagens são raça e classe."

func escr
  prog p
  txt100 lin
  se !p.iniclasse("t_" + arg1)
    ret arg0.msg("\bNenhum tipo encontrado.")
  fimse
  refvar txtmais = arg0.sock.txtmais
  txtmais.limpar
  lin = "\b\c6Menu raças:\b\n  "
  epara nulo, p.lin, p.depois
    continuar $[p.texto].menu != 1
    lin += txt(p.texto, 2) + ", " + $[p.texto].nome
    txtmais.addfim([p.texto]:t_reset ? lin + ", tres" : lin), lin = "  "
  efim
  lin = "\b\c6Menu classes:\b\n  "
  epara p.iniclasse("t_" + arg1), p.lin, p.depois
    continuar $[p.texto].menu != 2
    lin += txt(p.texto, 2) + ", " + $[p.texto].nome
    txtmais.addfim([p.texto]:t_reset ? lin + ", tres" : lin), lin = "  "
  efim
  lin = "\b\c6Menu subclasses:\b\n  "
  epara p.iniclasse("t_" + arg1), p.lin, p.depois
    continuar $[p.texto].menu != 3
    lin += txt(p.texto, 2) + ", " + $[p.texto].nome
    txtmais.addfim([p.texto]:t_reset ? lin + ", tres" : lin), lin = "  "
  efim
  lin = "\b\c6Em nenhum menu:\b\n  "
  epara p.iniclasse("t_" + arg1), p.lin, p.depois
    continuar $[p.texto].menu
    lin += txt(p.texto, 2) + ", " + $[p.texto].nome
    txtmais.addfim([p.texto]:t_reset ? lin + ", tres" : lin), lin = "  "
  efim
  arg0.sock.txtmostra


classe adm_ctipo
herda comando_adm
const m_ajuda = "-t\n\
-s <nome>\n\
Cria um tipo de personagem com o nome especificado.\n\
O nome deve ser composto de letras, mas pode ter espaços no meio.\n\
Nota: tipos de personagens são raça e classe."

func escr
  prog p
# Checa se digitou nome do tipo
  se arg1 == ""
    ret arg0.msg("Tecle o nome do tipo após CTIPO")
  fimse
# Checa se nome válido
  txt80 nome = txte(txtremove(arg1, "EMDSA"))
  se txtproc(txtsepara(txttroca(nome, " ", ""), "O+DOL,DOL+O"), " ") >= 0
    ret arg0.msg("Nome inválido para tipo de personagem: " + nome)
  senao inttotal(nome) > 40
    ret arg0.msg("Nome deve ter até 40 caracteres: " + nome)
  senao p.existe("t_" + nome)
    ret arg0.msg("Já existe o tipo: " + nome)
  fimse
# Cria tipo
  txt200 lin = "t_" + txts(nome) + "\nconfig/tipo\nherda comum_tipo"
  lin += "\nconst nome = \"" + txtcopiamai(txte(nome), "A") + "\""
  p.criar(lin)
  criar("admordena", "config/tipo")
# config:salvar
  arg0.msg("\bTipo criado: " + nome)
  admlog(arg0, "criou tipo " + nome)


classe adm_atipo
herda comando_adm
const m_ajuda = "-t\n\
-s <nome>\n\
Apaga o tipo de personagem com o nome especificado.\n\
Nota: tipos de personagens são raça e classe."

func escr
  prog p
  se arg1 == ""
    arg0.msg("Tecle um nome após ATIPO")
  senao !p.existe("t_" + arg1)
    arg0.msg("Tipo não existe: " + arg1)
  senao
    arg0.sock.tpasso = arg1
    passo(arg0.sock, "")
  fimse

func passo # Confirmar que quer apagar tipo
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    p.apagar("t_" + arg0.tpasso)
    config:salvar
    arg0.msg("Tipo apagado: " + arg0.tpasso)
    admlog(arg0, "apagou tipo " + arg0.tpasso)
  senao
    arg0.passo = este
    arg0.msg("Apagar tipo " + arg0.tpasso + "? Tecle S ou N")
  fimse
  ret 1


classe adm_etipo
herda comando_adm
const m_ajuda = "-t\n\
-s <nome>\n\
Edita o tipo de personagem com o nome especificado.\n\
Nota: tipos de personagens são raça e classe."

func escr
  prog p
  se arg1 == ""
    arg0.msg("Tecle o nome do tipo após ETIPO")
  senao !p.existe("t_" + txts(arg1))
    arg0.msg("Tipo não existe: " + arg1)
  senao
    arg0.sock.var.classe1 = "t_" + txts(txtmin(arg1))
    arg0.sock.m_menu("menu_tipo")
  fimse


classe menu_tipo
herda comando_menu_adm
const titulo = "Tipo " + txt(var.classe1, 2)
#
const nome1 = "Texto do menu"
const tipo1 = "opc_linha"
const vari1 = "nome"
#
const nome2 = "Texto menu feminino"
const info2 = "Se ausente, assume Texto do menu"
const tipo2 = "opc_linha"
const vari2 = "nome2"
#
const nome3 = "Texto comando Quem"
const tipo3 = "opc_linha"
const vari3 = "nomequem"
#
const nome4 = "Texto Quem feminino"
const info4 = "Se ausente, assume Texto comando Quem"
const tipo4 = "opc_linha"
const vari4 = "nomequem2"
#
const nome5 = "Descrição"
const info5 = "Aparece quando o jogador escolhe raça ou classe"
const tipo5 = "opc_texto"
const vari5 = "desc"
#
const nome6 = "Descrição feminino"
const info6 = "Se ausente, assume Descrição"
const info6 = "Aparece quando o jogador escolhe raça ou classe"
const tipo6 = "opc_texto"
const vari6 = "desc2"
#
const nome7 = "Está no menu"
const tipo7 = "opc_opcao"
const vari7 = "menu"
const extr7 = "Nenhum menu\nRaças\nClasses\nSubclasses"
#
const nome8 = "Somente sexo"
const tipo8 = "opc_opcao"
const vari8 = "sexo"
const extr8 = "Todos\nFeminino\nMasculino"
#
const nome9 = "Somente raças"
const info9 = "Se esse tipo for uma classe ou subclasse que não existe em todas as raças,\n\
escreva aqui em quais raças existe"
const tipo9 = "opc_tipos"
const vari9 = "racas"
#
const nome10 = "Somente classes"
const info10 = "Se esse tipo for uma subclasse que não existe em todas as classes,\n\
escreva aqui em quais classes existe"
const tipo10 = "opc_tipos"
const vari10 = "classes"
#
const nome11 = "Atributos números"
const tipo11 = "opc_atribnum"
const vari11 = "recalc_auto"
const exec11 = "recalc_ajusta"
#
const nome12 = "Atributos sim/não"
const tipo12 = "opc_atribbit"
const vari12 = "recalc_auto"
const exec12 = "recalc_ajusta"
#
const nome13 = "Atributos ataque"
const info13 = "Afetam os danos quando o personagem ataca alguém"
const tipo13 = "opc_atribatk"
const vari13 = "recalc_auto"
const exec13 = "recalc_ajusta"
#
const nome14 = "Atributos defesa"
const info14 = "Afetam os danos quando alguém ataca o personagem"
const tipo14 = "opc_atribdef"
const vari14 = "recalc_auto"
const exec14 = "recalc_ajusta"
#
const nome15 = "Perde precisão ver"
const info15 = "Somente raças:\n\
Quanto perde de precisão quando está vendo o alvo, geralmente de 0 a 100\n\
0 não perde, 100 perde o que está na opção \"Imprecisão não ver\" do ataque"
const tipo15 = "opc_numero"
const vari15 = "p_precisaover"
#
const nome16 = "Perde precisão não ver"
const info16 = "Somente raças:\n\
Quanto perde de precisão quando não está vendo o alvo, geralmente de 0 a 100\n\
0 não perde, 100 perde o que está na opção \"Imprecisão não ver\" do ataque"
const tipo16 = "opc_numero"
const vari16 = "p_precisaoinv"
#
const nome17 = "Equip posições"
const info17 = "Se não for <nulo>, são as posições aonde pode usar equipamentos"
const tipo17 = "opc_vetorhex"
const vari17 = "equip1"
const extr17 = config:equip_txt
#
const nome18 = "Equip adicionar"
const info18 = "Adicionar essas posições no personagem"
const tipo18 = "opc_vetorhex"
const vari18 = "equip2"
const extr18 = config:equip_txt
#
const nome19 = "Equip remover"
const info19 = "Remover essas posições do personagem"
const tipo19 = "opc_vetorhex"
const vari19 = "equip3"
const extr19 = config:equip_txt
#
const nome20 = "Exp máx fator 0"
const info20 = "A experiência para subir um nível é o resultado de:\n\
fator0 + fator1 * nível + fator2 * nível ao quadrado"
const tipo20 = "opc_numreal--"
const vari20 = "expmax0"
#
const nome21 = "Exp máx fator 1"
const info21 = "A experiência para subir um nível é o resultado de:\n\
fator0 + fator1 * nível + fator2 * nível ao quadrado"
const tipo21 = "opc_numreal--"
const vari21 = "expmax1"
#
const nome22 = "Exp máx fator 2"
const info22 = "A experiência para subir um nível é o resultado de:\n\
fator0 + fator1 * nível + fator2 * nível ao quadrado"
const tipo22 = "opc_numreal--"
const vari22 = "expmax2"
#
const nome23 = "Exp máx cada nível"
const info23 = "Permite definir a experiência para subir um nível em níveis específicos"
const tipo23 = "opc_nivel--"
const vari23 = "expmax_"
#
const nome24 = "Comandos personagem"
const tipo24 = "menu_tipo_comandos--"
#
const nome25 = "Condição personagem"
const tipo25 = "menu_tipo_desccond--"
#
const nome26 = "Quando morre"
const tipo26 = "menu_tipo_morreu--"
#
const nome27 = "Fim da batalha"
const tipo27 = "menu_tipo_batalhafim--"
#
const titu28 = "* Somente jogadores"
#
const nome28 = "Personagem luta"
const info28 = "Somente personagens que podem ter animais"
const tipo28 = "opc_opcao"
const vari28 = "animalatk"
const extr28 = "Não definido\nPersonagem e animais\nSomente personagem\nSomente animais"
#
const nome29 = "Sala inicial"
const info29 = "Sala onde os jogadores vão após criar o personagem"
const tipo29 = "opc_sala"
const vari29 = "salaini"
#
const nome30 = "Sala renascer"
const info30 = "Para que sala os jogadores vão após renascer"
const tipo30 = "opc_sala"
const vari30 = "sala_renascer"
#
const nome31 = "Nível mínimo"
const info31 = "Quando o personagem é criado ou renasce, ele vai para esse nível.\n\
Se houverem níveis diferentes na raça, classe e subclasse, é considerado\n\
somente o maior."
const tipo31 = "opc_numero"
const vari31 = "nmin"
const extr31 = "0 65535"
#
const nome32 = "Nível máximo"
const info32 = "Quando o personagem chega no nível máximo, não sobe mais de nível, mas pode\n\
renascer. Se houverem níveis diferentes na raça, classe e subclasse,\n\
é considerado somente o maior. Se os três forem 0, não renasce."
const tipo32 = "opc_numero"
const vari32 = "nmax"
const extr32 = "0 65535"
#
const nome33 = "Evolui para"
const tipo33 = "opc_tipos"
const info33 = "Os novos tipos que o personagem pode escolher no comando renascer"
const vari33 = "evoluir"
#
const nome34 = "Fome e sede"
const info34 = "Somente raças; se pode sentir fome e sede (se não for imortal)"
const tipo34 = "opc_simnao"
const vari34 = "fome"
#
const nome35 = "Ataque automático"
const info35 = "Habilidade usada em ataques automáticos sem arma"
const tipo35 = "opc_linha"
const vari35 = "atipo"
#
const nome36 = "Volume mínimo"
const info36 = "Somente raças; o volume é escolhido aleatoriamente"
const tipo36 = "opc_numero"
const vari36 = "volmin"
const exec36 = "jogador:ajustajog"
#
const nome37 = "Volume máximo"
const info37 = "Somente raças; o volume é escolhido aleatoriamente"
const tipo37 = "opc_numero"
const vari37 = "volmax"
const exec37 = "jogador:ajustajog"
#
const nome38 = "Peso mínimo"
const info38 = "Somente raças; o peso é escolhido aleatoriamente"
const tipo38 = "opc_numero"
const vari38 = "pesomin"
const exec38 = "jogador:ajustajog"
#
const nome39 = "Peso máximo"
const info39 = "Somente raças; o peso é escolhido aleatoriamente"
const tipo39 = "opc_numero"
const vari39 = "pesomax"
const exec39 = "jogador:ajustajog"
#
const nome50 = "Variáveis"
const tipo50 = "opc_linha"
const vari50 = "inivar"


classe comum_perso_comandos
herda comando_menu_adm
const titulo = "Comandos personagem (somente raças)"
#
const nome1 = "Pode dormir"
const tipo1 = "opc_simnao"
const vari1 = "podeposicao4tipo"
#
const nome2 = "Pode descansar"
const tipo2 = "opc_simnao"
const vari2 = "podeposicao5tipo"
#
const nome3 = "Pode sentar"
const tipo3 = "opc_simnao"
const vari3 = "podeposicao6tipo"
#
const nome4 = "Pode montar"
const tipo4 = "opc_simnao"
const vari4 = "podeposicaoMtipo"
#
const titu5 = " * Mensagens"
#
const nome5 = "Não pode dormir"
const tipo5 = "opc_linha"
const vari5 = "podeposicao4msg"
#
const nome6 = "Não pode descansar"
const tipo6 = "opc_linha"
const vari6 = "podeposicao5msg"
#
const nome7 = "Não pode sentar"
const tipo7 = "opc_linha"
const vari7 = "podeposicao6msg"
#
const nome8 = "Não pode montar"
const tipo8 = "opc_linha"
const vari8 = "podeposicaoMmsg"


classe menu_tipo_comandos
herda comum_perso_comandos
const menufim = "menu_tipo"
#
const nulo1 = "\c61 Sim"
const nulo2 = "\c61 Sim"
const nulo3 = "\c61 Sim"
const nulo4 = "\c61 Sim"
const nulo5 = fnulo("h_cmd_dormir", "m_nao_consegue")
const nulo6 = fnulo("h_cmd_descansar", "m_nao_consegue")
const nulo7 = fnulo("h_cmd_sentar", "m_nao_consegue")
const nulo8 = fnulo("h_cmd_montar", "m_nao_consegue")

func fnulo # arg0=classe, arg1=variável
  prog p
  p.iniherdainv(arg0)
  ret "\c3" + $[p.texto].[arg1]


classe menu_tipo_desccond
herda comum_desccond
const menufim = "menu_tipo"
#
const nulo1 = "\c3" + perso_cfg:desccond0
const nulo2 = "\c3" + perso_cfg:desccond1
const nulo3 = "\c3" + perso_cfg:desccond2
const nulo4 = "\c3" + perso_cfg:desccond3
const nulo5 = "\c3" + perso_cfg:desccond4
const nulo6 = "\c3" + perso_cfg:desccond5
const nulo7 = "\c3" + perso_cfg:desccond6
const nulo8 = "\c3" + perso_cfg:desccond7


classe menu_tipo_morreu
herda menu_morreu
const menufim = "menu_tipo"
#
const nulo3 = "\c3" + perso_cfg:p_morreu0
const nulo4 = "\c3" + perso_cfg:p_morreu1
const nulo5 = "\c3" + perso_cfg:p_morreu2
const nulo6 = "\c6" + fnulo_opc(perso_cfg:p_corpo_tipo, extr6)
const nulo7 = "\c3" + perso_cfg:p_corpo_ident
const nulo8 = "\c3" + perso_cfg:p_corpo_descnome
const nulo9 = "\c3" + perso_cfg:p_corpo_descsala
const nulo12 = "\c6" + fnulo_opc(perso_cfg:p_corpo_msexo, extr12)
const nulo13 = "\c6" + perso_cfg:p_corpo_tempo
const nulo14 = "\c3" + perso_cfg:p_corpo_some

func fnulo_opc
  ret txt(arg0) + " " + txtsublin(arg1, arg0, 1)


classe menu_tipo_batalhafim
herda menu_batalhafim
const menufim = "menu_tipo"
#
const nulo1 = "\c3" + perso_cfg:batalhafim_p1
const nulo2 = "\c3" + perso_cfg:batalhafim_p2
const nulo3 = "\c3" + perso_cfg:batalhafim_p3
const nulo4 = "\c3" + perso_cfg:batalhafim_s1
const nulo5 = "\c3" + perso_cfg:batalhafim_s2
const nulo6 = "\c3" + perso_cfg:batalhafim_s3
const nulo7 = "\c3" + perso_cfg:batalhafim_t1
const nulo8 = "\c3" + perso_cfg:batalhafim_t2
const nulo9 = "\c3" + perso_cfg:batalhafim_t3
const nulo10 = "\c3" + perso_cfg:batalhafim_fim


classe comum_tipo
#
# Ordem que deve organizar as constantes:
const admordem = "nome nome2 nomequem nomequem2 menu desc desc2 sexo\n\
racas classes p_precisaover p_precisaoinv\n\
equip1 equip2 equip3 animalatk salaini sala_renascer nmin nmax\n\
evoluir fome atipo volmin volmax pesomin pesomax\n\
desccond0 desccond1 desccond2 desccond3\n\
desccond4 desccond5 desccond6 desccond7\n\
p_morreu0 p_morreu1 p_morreu2 p_corpo_tipo p_corpo_ident\n\
p_corpo_descnome p_corpo_descsala p_corpo_descver p_corpo_descident\n\
p_corpo_msexo p_corpo_tempo p_corpo_some\n\
p_corpo_itens p_corpo_moedas p_corpo_itens_moedas\n\
podeposicao4tipo podeposicao5tipo podeposicao6tipo podeposicaoMtipo\n\
podeposicao4msg podeposicao5msg podeposicao6msg podeposicaoMmsg\n\
batalhafim_p1 batalhafim_p2 batalhafim_p3\n\
batalhafim_s1 batalhafim_s2 batalhafim_s3\n\
batalhafim_t1 batalhafim_t2 batalhafim_t3 batalhafim_fim\n\
inivar"
const iniclasse = !$[arg0] && criar(arg0)
const fome = 1
const p_precisaover = 0
const p_precisaoinv = 100

func recalc_ajusta # Ajusta variáveis quando algum atributo foi mudado
  refvar nome = txt2(txte(este))
  prog p
  ref r
  epara r = $jogador, r, r = objdepois(r)
    (r.tipo1 == nome || r.tipo2 == nome || r.tipo3 == nome) && (r.recalc = 1)
  efim
  epara p.iniclasse("p_"), p.lin, p.depois
    epara r = $[p.texto], r, r = objdepois(r)
      (r.tipo1 == nome || r.tipo2 == nome || r.tipo3 == nome) && (r.recalc = 1)
    efim
  efim
