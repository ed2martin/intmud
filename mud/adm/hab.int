classe adm_hab
herda comando_adm_ajuda
const m_ajuda = "-t Habilidades, magias e técnicas de itens\n\
-m LHAB Lista habilidades existentes\n\
-m LMAG Lista magias existentes\n\
-m LTEC Lista técnicas de itens existentes\n\
-m CHAB Cria uma habilidade\n\
-m CMAG Cria uma magia\n\
-m CTEC Cria uma técnica de item\n\
-m EHAB Edita uma habilidade\n\
-m EMAG Edita uma magia\n\
-m ETEC Edita uma técnica de item\n\
-m AHAB Apaga uma ou mais habilidades\n\
-m AMAG Apaga uma ou mais magias\n\
-m AMAG Apaga uma ou mais técnicas de item\n\
-m DHAB Calcula danos causados por uma habilidade\n\
-m DMAG Calcula danos causados por uma magia\n\
-m DMAG1 Calcula danos causados pela primeira magia de um item\n\
-m DMAG2 Calcula danos causados pela segunda magia de um item\n\
-m DMAG3 Calcula danos causados pela terceira magia de um item\n\
-m DITEM Calcula danos causados pelo comando Item (usando técnica de item)"


classe adm_lhab
herda comando_adm
const m_ajuda = "-t\n\
-s [nome]\n\
Lista as habilidades que começam com o nome especificado.\n\
Se o nome for omitido, lista todas as habilidades."
#
const nome1 = ", Outros"
const nome2 = ", Todos dividindo ataque"
const nome3 = ", Outros dividindo ataque"
const nome4 = ", Todos sem dividir ataque"
const nome5 = ", Outros sem dividir ataque"
const nome6 = "Não agressivo"
const nome7 = "Não agressivo, O próprio"
const nome8 = "Não agressivo, O grupo"
const nome9 = "Automático"
const nome10 = "Nenhum"
#
const prefixo = "cmd_"
const nenhum = "\bNenhuma habilidade encontrada."
const lista = "\b\c6Habilidade, Tipo, Alvo\b\n"

func escr
  prog p
  se !p.iniclasse(prefixo + arg1)
    ret arg0.msg(nenhum)
  fimse
  textotxt t
  txt100 lin
  epara nulo, p.lin && t.linhas < 499, p.depois
    continuar !$[p.texto].cmdmenu # Continua se não é uma habilidade
    t.addfim(txtcopiamai(txt2(txte(p.texto)), "A") + ", " + $[p.texto].hablista)
  efim
  se t.linhas
    arg0.msg2(lista + t.remove(500))
  senao
    arg0.msg(nenhum)
  fimse


classe adm_lmag
herda adm_lhab
const m_ajuda = "-t\n\
-s [nome]\n\
Lista as magias que começam com o nome especificado.\n\
Se o nome for omitido, lista todas as magias."
#
const prefixo = "magia_"
const nenhum = "\bNenhuma magia encontrada."
const lista = "\b\c6Magia, Tipo, Alvo\b\n"


classe adm_ltec
herda adm_lhab
const m_ajuda = "-t\n\
-s [nome]\n\
Lista as técnicas de item que começam com o nome especificado.\n\
Se o nome for omitido, lista todas as técnicas."
#
const prefixo = "tecnica_"
const nenhum = "\bNenhuma técnica encontrada."
const lista = "\b\c6Técnica, Tipo, Alvo\b\n"


classe adm_chab
herda comando_adm
const m_ajuda = "-t\n\
-s <nome>\n\
Cria uma habilidade com o nome especificado.\n\
O nome deve ser composto de letras, mas pode ter espaços no meio."
const tipo = "habilidade"
const arquivo = "hab"

func escr
  prog p
# Checa se digitou nome do ataque
  se arg1 == ""
    ret arg0.msg("Tecle o nome da habilidade após CHAB")
  fimse
# Checa se nome válido
  txt80 nome = txte(txtremove(arg1, "EMDSA"))
  se txtproc(txtsepara(txttroca(nome, " ", ""), "O+DOL,DOL+O"), " ") >= 0
    ret arg0.msg("Nome inválido para habilidade: " + nome)
  senao inttotal(nome) > 40
    ret arg0.msg("Nome deve ter até 40 caracteres: " + nome)
  senao p.existe("cmd_" + nome)
    ret arg0.msg("Já existe o comando: " + nome)
  senao p.existe("soc_" + nome)
    ret arg0.msg("Já existe o comando social: " + nome)
  fimse
# Pergunta que tipo de habilidade criar
  arg0.sock.var.opcclasse = "cmd_" + txts(txtmin(nome))
  arg0.sock.var.opcvar = "h_" + txtcopiamai(txte(nome), "A")
  passo(arg0.sock, "")

func passo # Escolher o tipo de habilidade ou magia
  txt40 deriv
  casovar txtmin(arg1)
  casose
    arg0.msg("Opção inválida")
  casose "\b"
  casose ""
    arg0.passo = este
    arg0.msg("Entre com o tipo de " + tipo + ", O mostra as opções, Z cancela")
    ret 1
  casose "z"
    arg0.msg("Retornando ao jogo")
    arg0.passo = ""
    arg0.var.opcclasse = ""
    arg0.var.opcnome = ""
    ret 1
  casose "o"
    arg0.txtmais.limpar
    arg0.txtmais.addfim("C Comum")
    arg0.txtmais.addfim("I Identificar")
    arg0.txtmais.addfim("R Retornar")
    arg0.txtmostra
    ret 1
  casose "c"
    deriv = "comando_ataque"
    sair
  casose "i"
    deriv = "comando_identificar"
    sair
  casose "r"
    deriv = "comando_retornar"
    sair
  casofim
# Cria habilidade ou magia
  txt512 lin
  lin = arg0.var.opcclasse + "\nconfig/" + arquivo + "\nherda " + deriv
  lin += "\nconst nomevar = \"" + arg0.var.opcvar + "\""
  prog p
  p.criar(lin)
  criar("admordena", "config/" + arquivo)
# config:salvar
  arg0.msg("\bCriou " + tipo + ": " + txt(arg0.var.opcvar, 2))
  admlog(arg0, "criou " + tipo + " " + txt(arg0.var.opcvar, 2))
  arg0.passo = ""
  arg0.var.opcclasse = ""
  arg0.var.opcnome = ""
  ret 1


classe adm_cmag
herda adm_chab
const m_ajuda = "-t\n\
-s <nome>\n\
Cria uma magia com o nome especificado.\n\
O nome deve ser composto de letras, mas pode ter espaços no meio."
const tipo = "magia"
const arquivo = "magia"

func escr
  prog p
# Checa se digitou nome do ataque
  se arg1 == ""
    ret arg0.msg("Tecle o nome da magia após CMAG")
  fimse
# Checa se nome válido
  txt80 nome = txte(txtremove(arg1, "EMDSA"))
  se txtproc(txtsepara(txttroca(nome, " ", ""), "O+DOL,DOL+O"), " ") >= 0
    ret arg0.msg("Nome inválido para magia: " + nome)
  senao inttotal(nome) > 40
    ret arg0.msg("Nome deve ter até 40 caracteres: " + nome)
  senao p.existe("magia_" + nome)
    ret arg0.msg("Já existe a magia: " + nome)
  fimse
# Pergunta que tipo de magia criar
  arg0.sock.var.opcclasse = "magia_" + txts(txtmin(nome))
  arg0.sock.var.opcvar = "m_" + txtcopiamai(txte(nome), "A")
  passo(arg0.sock, "")


classe adm_ctec
herda adm_chab
const m_ajuda = "-t\n\
-s <nome>\n\
Cria uma técnica de item com o nome especificado.\n\
O nome deve ser composto de letras, mas pode ter espaços no meio."
const tipo = "técnica de item"
const arquivo = "tecnica"

func escr
  prog p
# Checa se digitou nome do ataque
  se arg1 == ""
    ret arg0.msg("Tecle o nome da técnica de item após CTEC")
  fimse
# Checa se nome válido
  txt80 nome = txte(txtremove(arg1, "EMDSA"))
  se txtproc(txtsepara(txttroca(nome, " ", ""), "O+DOL,DOL+O"), " ") >= 0
    ret arg0.msg("Nome inválido para técnica de item: " + nome)
  senao inttotal(nome) > 40
    ret arg0.msg("Nome deve ter até 40 caracteres: " + nome)
  senao p.existe("tecnica_" + nome)
    ret arg0.msg("Já existe a técnica de item: " + nome)
  fimse
# Pergunta que tipo de técnica criar
  arg0.sock.var.opcclasse = "tecnica_" + txts(txtmin(nome))
  arg0.sock.var.opcvar = "t_" + txtcopiamai(txte(nome), "A")
  passo(arg0.sock, "")


classe adm_ahab
herda comando_adm
const m_ajuda = "-t\n\
-s <nomes das habilidades>\n\
Apaga uma ou mais habilidades, com os nomes especificados.\n\
Para apagar uma habilidade cujo nome contém espaços no meio, use\n\
sublinhado no lugar dos espaços. Exemplo, se o nome da magia for\n\
Chute Forte, você deve teclar: ahab Chute_Forte"

func escr
  prog p
  se arg1 == ""
    ret arg0.msg("Tecle um ou mais nomes de habilidades após AHAB")
  fimse
  uint16 x
  enquanto txtsub(arg1, x, 1)
    se !p.existe("cmd_" + txtsub(arg1, x, 1))
      ret arg0.msg("Habilidade não existe: " + txtsub(arg1, x, 1))
    senao !$cmd_[txtsub(arg1, x, 1)].cmdmenu
      ret arg0.msg("Comando não é uma habilidade: " + txtsub(arg1, x, 1))
    fimse
    x++
  efim
  arg0.sock.tpasso = arg1
  passo(arg0.sock, "")

func passo # Confirmar que quer apagar habilidade
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    uint16 x
    enquanto txtsub(arg0.tpasso, x, 1)
      p.apagar("cmd_" + txtsub(arg0.tpasso, x, 1))
      x++
    efim
    config:salvar
    se x < 2
      arg0.msg("Habilidade apagada: " + arg0.tpasso)
      admlog(arg0, "apagou habilidade " + arg0.tpasso)
    senao
      arg0.msg("Habilidades apagadas: " + arg0.tpasso)
      admlog(arg0, "apagou habilidades " + arg0.tpasso)
    fimse
  senao
    arg0.passo = este
    refvar m1 = txt2(arg0.tpasso) ? "habilidades" : "habilidade"
    arg0.msg("Apagar " + m1 + " " + arg0.tpasso + "? Tecle S ou N")
  fimse
  ret 1


classe adm_amag
herda comando_adm
const m_ajuda = "-t\n\
-s <nomes das magias>\n\
Apaga uma ou mais magias, com os nomes especificados.\n\
Para apagar uma magia cujo nome contém espaços no meio, use sublinhado\n\
no lugar dos espaços. Exemplo, se o nome da magia for Curar Cegueira,\n\
você deve teclar: amag Curar_Cegueira"

func escr
  prog p
  se arg1 == ""
    ret arg0.msg("Tecle um ou mais nomes de magias após AMAG")
  fimse
  uint16 x
  enquanto txtsub(arg1, x, 1)
    se !p.existe("magia_" + txtsub(arg1, x, 1))
      ret arg0.msg("Magia não existe: " + txtsub(arg1, x, 1))
    senao !$magia_[txtsub(arg1, x, 1)].cmdmenu
      ret arg0.msg("Magia não pode ser apagada: " + txtsub(arg1, x, 1))
    fimse
    x++
  efim
  arg0.sock.tpasso = arg1
  passo(arg0.sock, "")

func passo # Confirmar que quer apagar magia
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    uint16 x
    enquanto txtsub(arg0.tpasso, x, 1)
      p.apagar("magia_" + txtsub(arg0.tpasso, x, 1))
      x++
    efim
    config:salvar
    se x < 2
      arg0.msg("Magia apagada: " + arg0.tpasso)
      admlog(arg0, "apagou magia " + arg0.tpasso)
    senao
      arg0.msg("Magias apagadas: " + arg0.tpasso)
      admlog(arg0, "apagou magias " + arg0.tpasso)
    fimse
  senao
    arg0.passo = este
    refvar m1 = txt2(arg0.tpasso) ? "magias" : "magia"
    arg0.msg("Apagar " + m1 + " " + arg0.tpasso + "? Tecle S ou N")
  fimse
  ret 1


classe adm_atec
herda comando_adm
const m_ajuda = "-t\n\
-s <nomes das técnicas de item>\n\
Apaga uma ou mais técnicas de item, com os nomes especificados.\n\
Para apagar uma técnicas de item cujo nome contém espaços no meio, use\n\
sublinhado no lugar dos espaços. Exemplo, se o nome da técnica de item\n\
for Curar Cegueira, você deve teclar: atec Curar_Cegueira"

func escr
  prog p
  se arg1 == ""
    ret arg0.msg("Tecle um ou mais nomes de técnicas de item após ATEC")
  fimse
  uint16 x
  enquanto txtsub(arg1, x, 1)
    se !p.existe("tecnica_" + txtsub(arg1, x, 1))
      ret arg0.msg("Técnica de item não existe: " + txtsub(arg1, x, 1))
    senao !$tecnica_[txtsub(arg1, x, 1)].cmdmenu
      ret arg0.msg("Técnica de item não pode ser apagada: " + txtsub(arg1, x, 1))
    fimse
    x++
  efim
  arg0.sock.tpasso = arg1
  passo(arg0.sock, "")

func passo # Confirmar que quer apagar técnica de item
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    uint16 x
    enquanto txtsub(arg0.tpasso, x, 1)
      p.apagar("tecnica_" + txtsub(arg0.tpasso, x, 1))
      x++
    efim
    config:salvar
    se x < 2
      arg0.msg("Técnica de item apagada: " + arg0.tpasso)
      admlog(arg0, "apagou técnica de item " + arg0.tpasso)
    senao
      arg0.msg("Técnicas de item apagadas: " + arg0.tpasso)
      admlog(arg0, "apagou técnicas de item " + arg0.tpasso)
    fimse
  senao
    arg0.passo = este
    refvar m1 = txt2(arg0.tpasso) ? "técnicas de item" : "técnica de item"
    arg0.msg("Apagar " + m1 + " " + arg0.tpasso + "? Tecle S ou N")
  fimse
  ret 1


classe adm_ehab
herda comando_adm
const m_ajuda = "-t\n-s <nome>\nEdita a habilidade com o nome especificado."

func escr
  prog p
  se arg1 == ""
    arg0.msg("Tecle o nome da habilidade após EHAB")
  senao !p.existe("cmd_" + arg1)
    arg0.msg("Habilidade não existe: " + arg1)
  senao !$cmd_[arg1].cmdmenu
    arg0.msg("Comando não é uma habilidade: " + arg1)
  senao
    arg0.sock.var.classe1 = "cmd_" + txts(txtmin(arg1))
    arg0.sock.var.menufim = "menu_hab_" + $cmd_[arg1].cmdmenu
    arg0.sock.m_menu(arg0.sock.var.menufim)
  fimse


classe adm_emag
herda comando_adm
const m_ajuda = "-t\n-s <nome>\nEdita a magia com o nome especificado."

func escr
  prog p
  se arg1 == ""
    arg0.msg("Tecle o nome da magia após EMAG")
  senao !p.existe("magia_" + arg1)
    arg0.msg("Magia não existe: " + arg1)
  senao !$magia_[arg1].cmdmenu
    arg0.msg("Comando não é uma magia editável: " + arg1)
  senao
    arg0.sock.var.classe1 = "magia_" + txts(txtmin(arg1))
    arg0.sock.var.menufim = "menu_magia_" + $magia_[arg1].cmdmenu
    arg0.sock.m_menu(arg0.sock.var.menufim)
  fimse


classe adm_etec
herda comando_adm
const m_ajuda = "-t\n-s <nome>\nEdita a técnica de item com o nome especificado."

func escr
  prog p
  se arg1 == ""
    arg0.msg("Tecle o nome da técnica de item após ETEC")
  senao !p.existe("tecnica_" + arg1)
    arg0.msg("Técnica de item não existe: " + arg1)
  senao !$tecnica_[arg1].cmdmenu
    arg0.msg("Comando não é uma técnica de item: " + arg1)
  senao
    arg0.sock.var.classe1 = "tecnica_" + txts(txtmin(arg1))
    arg0.sock.var.menufim = "menu_tecnica_" + $tecnica_[arg1].cmdmenu
    arg0.sock.m_menu(arg0.sock.var.menufim)
  fimse


classe adm_dhab
herda comando_adm
const m_ajuda = "-t\n\
-s <habilidade> <alvo>\n\
-s <personagem> <habilidade> <alvo>\n\
Calcula os danos que uma habilidade faria no personagem alvo.\n\
Se for fornecido apenas a habilidade e o alvo, calcula os danos que\n\
o seu personagem faria."
const prefixo = "cmd_"
const naoencontrado = "Habilidade não encontrada: "
const naoataque = "Habilidade não é ataque: "

func escr
  txt100 nome
  ref perso
  ref alvo
  ref obj
  se intsub(arg1) < 2
    ret arg0.msg(txtmaimin(txt2(txte(este))) + " requer pelo menos 2 argumentos")
  senao intsub(arg1) == 2
    perso = arg0
    nome = txt1(arg1)
    alvo = misc:persodono(arg0, txt2(arg1))
    ret !alvo, arg0.msg("Alvo não existe: " + txt2(arg1))
  senao
    perso = misc:persodono(arg0, txt1(arg1))
    nome = txtsub(arg1, 1, 1)
    alvo = misc:persodono(arg0, txtsub(arg1, 2))
    ret !perso, arg0.msg("Personagem não existe: " + txt1(arg1))
    ret !alvo, arg0.msg("Alvo não existe: " + txtsub(arg1, 2))
  fimse
  enquanto 1
    obj = $[prefixo + nome] # Checa comando exato
    sair obj.cmdmenu
    refvar tam = inttotal(prefixo)
    prog p
    nomeobj n
    n.ini(txt1(arg0))
    epara p.iniclasse(prefixo + txt1(txte(nome))), p.lin, p.depois
      obj = $[p.texto]
      sair obj.cmdmenu && !n.nome(txt(obj, tam))
    efim
    sair p.lin
    ret arg0.msg(naoencontrado + nome)
  efim
  ret obj.cmdmenu != "ataque", arg0.msg(naoataque + txt(obj.nomevar, 2))
  ret obj.tipoalvo > 5 && obj.tipoalvo < 9, arg0.msg(naoataque + txt(obj.nomevar, 2))
  textotxt t
  obj.danosgolpe(perso, alvo, t, perso.pnivel, nulo)
  arg0.msg2(t.remove(1000))


classe adm_dmag
herda adm_dhab
const m_ajuda = "-t\n\
-s <magia> <alvo>\n\
-s <personagem> <magia> <alvo>\n\
Calcula os danos que uma magia faria no personagem alvo.\n\
Se for fornecido apenas a magia e o alvo, calcula os danos que\n\
o seu personagem faria."
const prefixo = "magia_"
const naoencontrado = "Magia não encontrada: "
const naoataque = "Magia não é ataque: "


classe adm_dmag1
herda comando_adm
const m_ajuda = "-t\n\
-s <item> <alvo>\n\
-s <personagem> <item> <alvo>\n\
Calcula os danos que uma magia faria no personagem alvo.\n\
Usa a primeira magia do comando Comer, Beber ou Recitar do item.\n\
Se o personagem for omitido, calcula os danos que o seu personagem faria."
const prefixo = "magia_"
const nometec = "f_magia1"
const niveltec = "f_nivel1"
const naoencontrado = "Item não tem primeira magia: "
const naoataque = "Primeira magia não é ataque: "

func escr
  ref item
  ref perso
  ref alvo
  ref obj
  se intsub(arg1) < 2
    ret arg0.msg(txtmaimin(txt2(txte(este))) + " requer pelo menos 2 argumentos")
  senao intsub(arg1) == 2
    perso = arg0
    item = misc:itemtudo(perso, txt1(arg1))
    alvo = misc:persodono(arg0, txt2(arg1))
    ret !item, arg0.msg("Item não existe: " + txt1(arg1))
    ret !alvo, arg0.msg("Alvo não existe: " + txt2(arg1))
  senao
    perso = misc:persodono(arg0, txt1(arg1))
    item = misc:itemtudo(perso, txtsub(arg1, 1, 1))
    alvo = misc:persodono(arg0, txtsub(arg1, 2))
    ret !perso, arg0.msg("Personagem não existe: " + txt1(arg1))
    ret !item, arg0.msg("Item não existe: " + txtsub(arg1, 1, 1))
    ret !alvo, arg0.msg("Alvo não existe: " + txtsub(arg1, 2))
  fimse
  obj = $[prefixo + item.[nometec]] # Checa comando exato
  ret !obj, arg0.msg(naoencontrado + item.descnome2)
  ret obj.cmdmenu != "ataque", arg0.msg(naoataque + txt(obj.nomevar, 2))
  ret obj.tipoalvo > 5 && obj.tipoalvo < 9, arg0.msg(naoataque + txt(obj.nomevar, 2))
  textotxt t
  obj.danosgolpe(perso, alvo, t, int(item.[niveltec]), item)
  arg0.msg2(t.remove(1000))


classe adm_dmag2
herda adm_dmag1
const m_ajuda = "-t\n\
-s <item> <alvo>\n\
-s <personagem> <item> <alvo>\n\
Calcula os danos que uma magia faria no personagem alvo.\n\
Usa a segunda magia do comando Comer, Beber ou Recitar do item.\n\
Se o personagem for omitido, calcula os danos que o seu personagem faria."
const prefixo = "magia_"
const nometec = "f_magia2"
const niveltec = "f_nivel2"
const naoencontrado = "Item não tem segunda magia: "
const naoataque = "Segunda magia não é ataque: "


classe adm_dmag3
herda adm_dmag1
const m_ajuda = "-t\n\
-s <item> <alvo>\n\
-s <personagem> <item> <alvo>\n\
Calcula os danos que uma magia faria no personagem alvo.\n\
Usa a terceira magia do comando Comer, Beber ou Recitar do item.\n\
Se o personagem for omitido, calcula os danos que o seu personagem faria."
const prefixo = "magia_"
const nometec = "f_magia3"
const niveltec = "f_nivel3"
const naoencontrado = "Item não tem terceira magia: "
const naoataque = "Terceira magia não é ataque: "


classe adm_ditem
herda adm_dmag1
const m_ajuda = "-t\n\
-s <item> <alvo>\n\
-s <personagem> <item> <alvo>\n\
Calcula os danos que o comando Item faria no personagem alvo.\n\
Se o personagem for omitido, calcula os danos que o seu personagem faria."
const prefixo = "tecnica_"
const nometec = "i_item_tecnica"
const niveltec = "i_item_nivel"
const naoencontrado = "Item não tem técnica de item: "
const naoataque = "Técnica de item não é ataque: "


classe menu_hab_comum
herda comando_menu_adm
#
const nome2 = "Posição"
const tipo2 = "menu_hab_posicao--"
#
const nome3 = "Falha iniciante"
const info3 = "Taxa de falha em porcentagem, de 0 a 100 (100 sempre falha)"
const tipo3 = "opc_numero"
const vari3 = "falha1"
const extr3 = "-1 100"
#
const nome4 = "Falha perito"
const info4 = "Taxa de falha em porcentagem, de 0 a 100 (100 sempre falha)"
const tipo4 = "opc_numero"
const vari4 = "falha2"
const extr4 = "-1 100"
#
const nome5 = "Requer"
const tipo5 = "menu_hab_requer--"
#
const nome6 = "Consome"
const tipo6 = "menu_hab_custo--"
#
const nome7 = "Preço da aula"
const info7 = "Quantas moedas os personagens cobram para ensinar"
const tipo7 = "opc_numero"
const vari7 = "valor"
#
const nome8 = "Pontos de aula"
const info8 = "Quantos pontos de aula consome por aula"
const tipo8 = "opc_numero"
const vari8 = "aulapontos"
#
const nome9 = "Depende de"
const info9 = "Habilidades, magias e idiomas necessários para aprender esse ataque"
const tipo9 = "opc_tipodep"
const vari9 = "depende"
#
const nome10 = "Iniciante nível"
const info10 = "A partir de que nível pode ter a primeira aula"
const tipo10 = "opc_numero"
const vari10 = "aulaini"
#
const nome11 = "Perito nível"
const info11 = "A partir de que nível pode ter todas as aulas"
const tipo11 = "opc_numero"
const vari11 = "aulafim"
#
const nome12 = "Renascer aulas"
const info12 = "Reduz para essa quantidade de aulas ao renascer"
const tipo12 = "opc_opcao"
const vari12 = "aularenascer"
const extr12 = misc:aulas
#
const nome13 = "Somente tipos"
const info13 = "Se estiver vazio, todas as classes e raças podem aprender"
const tipo13 = "opc_tipos"
const vari13 = "tipoperso"


classe menu_hab_posicao
herda comando_menu_adm
const titulo = "Posição"
const menufim = var.menufim
#
const nome1 = "Dormindo"
const info1 = "Animal dormindo, quem controla o animal precisa estar acordado"
const tipo1 = "opc_simnao"
const vari1 = "a_dormindo"
#
const nome2 = "Descansando"
const tipo2 = "opc_simnao"
const vari2 = "a_descansando"
#
const nome3 = "Sentado"
const tipo3 = "opc_simnao"
const vari3 = "a_sentado"
#
const nome4 = "Montado"
const tipo4 = "opc_simnao"
const vari4 = "a_montado"
#
const nome5 = "Em pé"
const tipo5 = "opc_simnao"
const vari5 = "a_em_pe"
#
const nome6 = "Lutando sentado"
const tipo6 = "opc_simnao"
const vari6 = "a_bat_sentado"
#
const nome7 = "Lutando nontado"
const tipo7 = "opc_simnao"
const vari7 = "a_bat_montado"
#
const nome8 = "Lutando em pé"
const tipo8 = "opc_simnao"
const vari8 = "a_bat_em_pe"


classe menu_hab_requer
herda comando_menu_adm
const titulo = "Requer"
const menufim = var.menufim
#
const nome1 = "Arma"
const info1 = "Se vazio, a arma é ignorada: ataca sem arma mesmo se estiver empunhando uma"
const tipo1 = "opc_vetor"
const vari1 = "tipoarma"
const extr1 = config:arma_txt
#
const nome2 = "Vestir item"
const info2 = "Se não estiver vazio, precisa vestir um dos itens"
const tipo2 = "opc_vetorhex"
const vari2 = "tipovestirsim"
const extr2 = config:item_tipos
#
const nome3 = "Não vestir item"
const info3 = "Não pode vestir nenhum dos itens"
const tipo3 = "opc_vetorhex"
const vari3 = "tipovestirnao"
const extr3 = config:item_tipos
#
const nome4 = "Carregar item"
const info4 = "Se não estiver vazio, precisa ter um dos itens no comando Inv"
const tipo4 = "opc_vetorhex"
const vari4 = "tipoinvsim"
const extr4 = config:item_tipos
#
const nome5 = "Não carregar item"
const info5 = "Não pode ter nenhum dos itens no comando Inv"
const tipo5 = "opc_vetorhex"
const vari5 = "tipoinvnao"
const extr5 = config:item_tipos
#
const nome6 = "Efeitos"
const info6 = "Precisa estar com todos esses efeitos no comando Efeito"
const tipo6 = "opc_listaefeito"
const vari6 = "tipoefeitosim"
const extr6 = "100"


classe menu_hab_custo
herda comando_menu_adm
const titulo = "Consome"
const menufim = var.menufim
#
const nome1 = "Tempo de espera"
const info1 = "Tempo mínimo que deve esperar, em décimos de segundo"
const tipo1 = "opc_numero"
const vari1 = "c_espera"
const extr1 = "5 150"
#
const nome2 = "Vida iniciante"
const info2 = "Quantos pontos de vida consome no nível iniciante"
const tipo2 = "opc_numero"
const vari2 = "c_vida1"
#
const nome3 = "Vida perito"
const info3 = "Quantos pontos de vida consome no nível perito"
const tipo3 = "opc_numero"
const vari3 = "c_vida2"
#
const nome4 = "Mana iniciante"
const info4 = "Quantos pontos de mana consome no nível iniciante"
const tipo4 = "opc_numero"
const vari4 = "c_mana1"
#
const nome5 = "Mana perito"
const info5 = "Quantos pontos de mana consome no nível perito"
const tipo5 = "opc_numero"
const vari5 = "c_mana2"
#
const nome6 = "Vigor iniciante"
const info6 = "Quantos pontos de vigor consome no nível iniciante"
const tipo6 = "opc_numero"
const vari6 = "c_move1"
#
const nome7 = "Vigor perito"
const info7 = "Quantos pontos de vigor consome no nível perito"
const tipo7 = "opc_numero"
const vari7 = "c_move2"
