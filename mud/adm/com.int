classe adm_com
herda comando_adm
const m_ajuda = aj1 + aj2
const aj1 = "-t Com (comunicação)\n\
\c2COM\b\n\
  Lista as conexões do MUD.\n\
\c2COM QUEM\b\n\
  Mostra as conexões dos jogadores online.\n\
\c2COM BOT\b <endereço> <porta> <sala> <senha>\n\
  Abre uma conexão com um chat que suporta jogos.\n\
\c2COM BOT2\b <endereço> <porta> <sala> <senha>\n\
  Abre uma conexão com um chat que suporta jogos usando o protocolo bot2.\n\
  Esse protocolo permite saber o endereço IP dos usuários.\n\
\c2COM TELNET\b <endereço> <porta>\n\
  Abre uma porta apenas para Telnet. O endereço é útil quando a máquina\n\
  possui vários endereços IP e você quiser abrir em apenas um.\n\
  Se quiser abrir em todas as portas (IPv4), coloque um asterisco (*) no\n\
  endereço. Para todas as portas no IPv6, coloque :: no endereço.\n\
\c2COM PAPO\b <endereço> <porta>\n\
  É semelhante à opção TELNET, mas usuários do Papovox também conseguem\n\
  entrar. No entanto, o Papovox só consegue conectar na porta 1963.\n\
\c2COM SSL\b <endereço> <porta>\n\
  É semelhante à opção TELNET, porém usa criptografia. Neste caso,\n\
  os jogadores deverão usar um programa de Telnet com suporte a SSL.\n\
  No MUD, será necessário criar os arquivos mud.key e mud.crt no mesmo\n\
  diretório do arquivo mud.int:\n\
  Instalar o OpenSSL, se ainda não estiver instalado. Depois, abrir um\n\
  terminal (no Linux/Unix) ou abrir o \"Prompt do MS-DOS\" e digitar:\n\
  openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mud.key -out mud.crt\n\
  O programa pedirá algumas informações, e em seguida criará os arquivos.\n"
const aj2 = "\c2COM HTTP\b <endereço> <porta>\n\
  É semelhante à opção TELNET, porém abre a porta para entrar via navegador.\n\
  Os jogadores devem digitar http:// seguido do endereço do servidor, dois\n\
  pontos e a porta. Exemplo, se o endereço do servidor for 1.2.3.4 e for\n\
  a porta 3000, deve-se digitar no navegador http://1.2.3.4:3000\n\
  Se a porta for a 80, é necessário apenas http:// seguido do endereço\n\
  Nota: É necessário um navegador não muito antigo (com suporte a\n\
  Javascript e WebSocket)\n\
\c2COM FIM\b <endereço ou porta>\n\
  Com um endereço, encerra uma conexão de bot.\n\
  Com um número, fecha uma porta (aberta para Telnet, Papovox ou SSL).\n\
\c2Exemplos:\b\n\
  com bot intervox.nce.ufrj.br 1963 sala01 senha01\n\
  com telnet * 2000\n\
  com telnet localhost 3000\n\
  com papo * 1963\n\
  com ssl * 2500\n\
  com http * 3000\n\
  com fim 2000"

func escr
  indiceitem item
  casovar txtmin(txt1(arg1))
  casose ""
    textotxt t
    epara item.ini("cn "), txt1(item.txt) == "cn", item.depois
      t.addfim(item.obj.conexao2)
    efim
    ret !t.linhas, arg0.msg("Nenhuma conexão externa.")
    t.addini("\b\c6Conexões:\b")
    arg0.msg2(t.remove(1000))
    ret
  casose "quem"
    textotxt t
    epara item.ini("un "), txt1(item.txt) == "un", item.depois
      refvar obj = item.obj
      se obj.nome
        t.addfim(obj.nome + ", " + obj.info)
      senao
        t.addfim(obj.info)
      fimse
    efim
    t.addini("\b\c6Usuários conectados:\b")
    arg0.msg2(t.remove(1000))
    ret
  casose "bot"
  casose "bot2"
    se intsub(arg1) != 5
      ret arg0.msg("A opção COM " + txtmai(txt1(arg1)) + " requer quatro argumentos")
    senao item.obj("cn " + txtsub(arg1, 1, 1))
      ret arg0.msg("Já existe uma conexão em " + txtsub(arg1, 1, 1))
    fimse
    cmdlog(arg0, "com", txtsub(arg1, 1, 3))
    criar(txt1(arg1) == "bot" ? "jogobot" : "jogobot2", txt2(arg1), arg0)
    ret
  casose "telnet"
  casose "papo"
  casose "ssl"
    se intsub(arg1) != 3
      ret arg0.msg("A opção COM " + txtmai(txt1(arg1)) + " requer dois argumentos")
    fimse
    cmdlog(arg0, "com", arg1)
    criar("jogoserv", arg1, arg0)
    ret
  casose "http"
    se intsub(arg1) != 3
      ret arg0.msg("A opção COM HTTP requer dois argumentos")
    fimse
    cmdlog(arg0, "com", arg1)
    criar("jogohttp", arg1, arg0)
    ret
  casose "fim"
    indiceitem item
    refvar r = item.obj("cn " + txt2(arg1))
    ret !r, arg0.msg("Conexão inexistente: " + txt2(arg1))
    cmdlog(arg0, "com", arg1)
    r.msgfim(arg0)
    apagar(r)
    ret
  casofim
  arg0.msg("Opção inexistente: COM " + txt1(arg1))


classe opc_com
herda comando_adm

func menu
# arg0=nome da classe, arg1=nome da variável, arg2=nomes das opções (não usado)
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    ret p_vartexto(arg0, arg1), "\c3" + txtsub([arg0]:[arg1], 0, 4) + "\b"
    p.inilinha(arg0, arg1)
    ret "<" + txt1(p.texto) + ">"
  casose "2" # Em uma classe herdada
    ret p_vartexto(arg0, arg1), "<herda> \c3" + txtsub([arg0]:[arg1], 0, 4) + "\b"
    p.inilinha(arg0, arg1)
    ret "<herda " + txt1(p.texto) + ">"
  casose # Não foi definido
    ret "<nulo>"
  casofim

func passo
  se arg1 == "\b"
    arg0.passo = este
    arg0.tpasso = 0
  senao arg1 == "z"
    arg0.var.opclin = ""
    ret passosair(arg0)
  fimse
  passo[arg0.tpasso](arg0, arg1)
  ret 1

func passo0 # Escolher o tipo de conexão
  casovar txtmin(arg1)
  casose ""
  casose "\b"
    ret arg0.msg("Entre com uma opção, O mostra as opções, N nenhuma, Z cancela")
  casose "o"
    arg0.txtmais.limpar
    arg0.txtmais.addfim("\bOpções:")
    arg0.txtmais.addfim("Telnet  Aabrir porta para Telnet")
    arg0.txtmais.addfim("Papo    Abrir porta para Telnet e Papovox")
    arg0.txtmais.addfim("SSL     Abrir porta para Telnet com critografia")
    arg0.txtmais.addfim("HTTP    Abrir porta para HTTP (navegador)")
    arg0.txtmais.addfim("Bot     Conectar a um chat como Bot")
    arg0.txtmais.addfim("Bot2    Conectar a um chat como Bot usando protocolo bot2")
    arg0.txtmais.addfim("RBot    Mesmo que Bot, mas tenta reconectar aos 15 min de cada hora")
    arg0.txtmais.addfim("RBot2   Mesmo que Bot2, mas tenta reconectar aos 15 min de cada \
hora")
    ret arg0.txtmostra
  casose "n"
    prog p
    se arg0.var.opcvalido
      p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + "=\"\"")
    senao
      p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
    fimse
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Apagado: " + arg0.var.opcnome)
    admlog(arg0, "apagou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
    ret passosair(arg0)
  casose "telnet"
  casose "papo"
  casose "ssl"
  casose "http"
  casose "bot"
  casose "bot2"
  casose "rbot"
  casose "rbot2"
    arg0.tpasso = "1"
    arg0.var.opclin = txtmin(arg1)
    ret passo1(arg0, "")
  casofim
  arg0.msg("Opção inválida")
  ret passo0(arg0, "")

func passo1 # Escolher o endereço
  se arg1 == ""
    refvar p = arg0.var.opclin
    se p == "bot" || p == "bot2" || p == "rbot" || p == "rbot2"
      arg0.msg("Entre com o endereço do chat, Z cancela")
    senao
      arg0.msg("Entre com o endereço do servidor ou * (asterisco) para todos, Z cancela")
    fimse
  senao txt1(arg1) != arg1
    arg0.msg("O endereço não pode ter espaços, entre com outro")
  senao
    arg0.var.opclin += " " + arg1
    arg0.tpasso = "2"
    passo2(arg0, "")
  fimse

func passo2 # Escolher a porta
  uint16 x
  x = arg1
  refvar p = txt1(arg0.var.opclin)
  se arg1 == ""
    arg0.msg("Entre com a porta, Z cancela")
  senao x == 0 || txt(x) != arg1
    arg0.msg("A porta deve ser um número de 1 a 65535, entre com outra")
  senao p == "bot" || p == "bot2" || p == "rbot" || p == "rbot2"
    arg0.var.opclin += " " + arg1
    arg0.tpasso = "3"
    passo3(arg0, "")
  senao
    salvar(arg0, arg0.var.opclin + " " + arg1)
    arg0.var.opclin = ""
    ret passosair(arg0)
  fimse

func passo3 # Escolher a sala
  se arg1 == ""
    arg0.msg("Entre com o nome da sala, Z cancela")
  senao txt1(arg1) != arg1
    arg0.msg("A sala não pode ter espaços, entre com outra")
  senao
    arg0.var.opclin += " " + arg1
    arg0.tpasso = "4"
    passo4(arg0, "")
  fimse

func passo4 # Escolher a senha
  se arg1 == ""
    arg0.msg("Entre com a senha da sala, Z cancela")
  senao
    salvar(arg0, arg0.var.opclin + " " + arg1)
    arg0.var.opclin = ""
    ret passosair(arg0)
  fimse

func salvar
# arg0 = personagem
# arg1 = novo valor da variável
  prog p
  p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + "=\"" + arg1 + "\"")
  config:salvar
  criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
  arg0.msg(arg0.var.opcnome + " mudou para: " + txtsub(arg1, 0, 4))
  admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  $jogoini.rbot_tempo
