classe adm_perso
herda comando_adm_ajuda
const m_ajuda = "-t Comandos de personagens não jogador\n\
-m LPERSO Lista personagens existentes\n\
-m PPERSO Pesquisa personagens com um determinado nome\n\
-m IPERSO Mostra aonde está um personagem\n\
-m CPERSO Cria um personagem\n\
-m EPERSO Edita um personagem\n\
-m APERSO Apaga um ou mais personagens\n\
-m PEXP Calcula experiência ganha ao vencer um personagem"


classe adm_lperso
herda comando_adm
const objcmd = arg1.c_lperso ? este
const m_ajuda = "-t\n\
-s [nome]\n\
Lista os personagens que começam com o nome especificado.\n\
Se o nome for omitido, lista todos os personagens."

func escr
  listar(arg0, arg1, arg2, "")

func listar # Listar personagens
# arg0 = para que jogador listar
# arg1 = nome da classe (para comando lperso) ou "" se todas
# arg2 = permissões do jogador
# arg3 = nome do personagem (para comando pperso), ou "" se todos
  refvar t = arg0.sock.txtmais
  debug d
  prog p
  int32 total
  txt100 lin
  t.limpar
  d.exec = 100000
  p.iniclasse("p_" + txtremove(arg1, "EMDCT7"))
  se int(arg2.c_lperso) >= 2
    epara nulo, p.lin, p.depois
      continuar arg3 && txtproc([p.texto]:nome, arg3) < 0
      lin = txt(p.texto, 2) + " " + txt(" SBA", [p.texto]:perso, 1)
      se inttotal($[p.texto]) == [p.texto]:objsolto.total
        lin += " " + inttotal($[p.texto])
      senao
        lin += " " + [p.texto]:objsolto.total + "/" + inttotal($[p.texto])
      fimse
      total += inttotal($[p.texto])
      t.addfim(lin + "  " + [p.texto]:nome)
    efim
  senao
    refvar prefixo = "p_" + arg0.jogarea
    arg1 == txt(arg0.jogarea, 0, inttotal(arg1)) && p.iniclasse(prefixo)
    epara nulo, p.lin, p.depois
      sair prefixo + txtfim(p.texto, 3) != p.texto
      continuar arg3 && txtproc([p.texto]:nome, arg3) < 0
      lin = txt(p.texto, 2) + " " + txt(" SBA", [p.texto]:perso, 1)
      se inttotal($[p.texto]) == [p.texto]:objsolto.total
        lin += " " + inttotal($[p.texto])
      senao
        lin += " " + [p.texto]:objsolto.total + "/" + inttotal($[p.texto])
      fimse
      total += inttotal($[p.texto])
      t.addfim(lin + "  " + [p.texto]:nome)
    efim
  fimse
  se t.linhas
    t.addini("\b\c6Personagem(" + t.linhas + ") Tipo Quantidade(" + total + ") Nome\b")
  senao
    t.addini("\bNenhum personagem encontrado.")
  fimse
  arg0.sock.txtmostra


classe adm_pperso
herda adm_lperso
const objcmd = arg1.c_lperso ? este
const m_ajuda = "-t\n\
-s <nome>\n\
Pesquisa os personagens com o nome especificado ou parte dele.\n\
Se o nome for omitido, lista todos os personagens."

func escr
  listar(arg0, "", arg2, arg1)


classe adm_iperso
herda comando_adm
const objcmd = arg1.c_iperso ? este
const m_ajuda = "-t\n\
-s <nome>\n\
Mostra aonde está cada personagem do tipo especificado."

func escr # Listar personagens
  prog p
  se arg1 == ""
    arg0.msg("\bTecle o nome do personagem IPERSO")
  senao !p.existe("p_" + arg1)
    arg0.msg("\bPersonagem não existe: " + arg1)
  senao arg2.c_iperso <= 1 && arg0.jogarea + txtfim(arg1, 3) != arg1
    arg0.msg("\bPersonagem não existe: " + arg1)
  senao !$p_[arg1]
    arg0.msg("\bPersonagem não está no jogo: " + arg1)
  senao
    textotxt t
    t.addfim("\b\c6Personagens " + arg1 + " em:\b")
    ref r
    ref s
    txt100 lin
    epara r = $p_[arg1], r && t.linhas < 500, r = objdepois(r)
      epara s = r.dono, s, s = s.dono
        se s.perso
          lin = (s.jog ? ", jogador" : ", " + txt(s, 2)) + " (" + s.descnome2 + ")" + lin
        senao s.item
          lin = ", " + txt(s, 2) + " (" + s.descnome2 + ")" + lin
        senao
          lin = ", " + txt(s, 2) + " (" + s.s_titulo + ")" + lin
        fimse
      efim
      t.addfim(txt(lin, 2)), lin = ""
    efim
    arg0.msg2(t.remove(500))
  fimse


classe adm_cperso
herda comando_adm
const objcmd = arg1.c_eperso ? este
const m_ajuda = "-t\n\
-s <nome>\n\
Cria um personagem. Nome deve ser o nome de uma área ou do personagem.\n\
Nomes de personagens são sempre nomes de área seguido de um número de\n\
001 a 999."

func escr # Criar personagem
  prog p
  txt40 nome
  uint16 num
# Checa se digitou nome da sala
  se arg1 == ""
    ret arg0.msg("Tecle o nome do personagem ou da área após CPERSO")
  fimse
# Checa nome completo
  nome = txtmin(txtremove(arg1, "EMDCT7"))
  num = int(txtfim(nome, 3)) + 1000
  se num > 1000 && txtfim(num, 3) == txtfim(arg1, 3)
    se !p.existe("a_" + txt(nome, 0, inttotal(nome) - 3))
      ret arg0.msg("Área não existe: " + txt(nome, 0, inttotal(nome) - 3))
    senao p.existe("p_" + nome)
      ret arg0.msg("Personagem já existe: " + nome)
    fimse
# Checa nome de área
  senao !p.existe("a_" + nome)
    ret arg0.msg("Área não existe: " + nome)
  senao
    epara num = 1001, p.existe("p_" + nome + txtfim(num, 3)), num++
      continuar num < 2000
      ret arg0.msg("Atingido limite de personagens na área " + nome)
    efim
    nome += txtfim(num, 3)
  fimse
# Checa se pode criar sala
  se arg2.c_eperso >= 2
  senao nome != arg0.jogarea + txtfim(nome, 3)
    ret arg0.msg("Área não existe: " + txt(nome, 0, inttotal(nome) - 3))
  fimse
# Pergunta que tipo de personagem criar
  arg0.sock.var.opcclasse = nome
  passo(arg0.sock, "")

func passo # Escolher o tipo de personagem ao criar
  txt40 deriv
  casovar txtmin(arg1)
  casose
    arg0.msg("Opção inválida")
  casose "\b"
  casose ""
    arg0.passo = este
    arg0.msg("Entre com o tipo de personagem, O mostra as opções, Z cancela")
    ret 1
  casose "z"
    arg0.msg("Retornando ao jogo")
    arg0.passo = ""
    arg0.var.opcclasse = ""
    ret 1
  casose "o"
    arg0.txtmais.limpar
    arg0.txtmais.addfim("S Simples/pacífico")
    arg0.txtmais.addfim("B Pode batalhar")
    arg0.txtmais.addfim("A Pode usar animais")
    arg0.txtmostra
    ret 1
  casose "s"
    deriv = "comum_perso"
    sair
  casose "b"
    deriv = "comum_persobat"
    sair
  casose "a"
    deriv = "comum_persoanimal"
    sair
  casofim
# Cria personagem
  prog p
  txt100 area
  area = txt(arg0.var.opcclasse, 0, inttotal(arg0.var.opcclasse) - 3)
  p.criar("p_" + arg0.var.opcclasse + "\nareas/" + area + "\nherda " + deriv)
  criar("admordena", "areas/" + area)
# config:salvar
  arg0.msg("\bPersonagem criado: " + arg0.var.opcclasse)
  admlog(arg0, "criou personagem " + arg0.var.opcclasse)
  arg0.passo = ""
  arg0.var.opcclasse = ""
  ret 1


classe adm_aperso
herda comando_adm
const objcmd = arg1.c_eperso ? este
const m_ajuda = "-t\n\
-s <nomes dos personagens>\n\
Apaga uma ou mais personagens, com os nomes especificados."

func escr # Apagar personagem
  prog p
  refvar nome1 = txtmin(txtremove(arg1, "EMDCT7"))
  se nome1 == ""
    ret arg0.msg("Tecle um ou mais nomes de personagens após APERSO")
  fimse
  uint16 x
  enquanto txtsub(nome1, x, 1)
    refvar nome2 = txtsub(nome1, x, 1)
    se !p.existe("p_" + nome2)
      ret arg0.msg("Personagem não existe: " + nome2)
    senao arg2.c_eperso >= 2
    senao nome2 != arg0.jogarea + txtfim(nome2, 3)
      ret arg0.msg("Personagem não existe: " + nome2)
    fimse
    x++
  efim
  arg0.sock.tpasso = nome1
  passo(arg0.sock, "")

func passo # Confirmar que quer apagar personagem
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    uint16 x
    enquanto txtsub(arg0.tpasso, x, 1)
      p.apagar("p_" + txtsub(arg0.tpasso, x, 1))
      x++
    efim
    config:salvar
    se x < 2
      arg0.msg("Personagem apagado: " + arg0.tpasso)
      admlog(arg0, "apagou personagem " + arg0.tpasso)
    senao
      arg0.msg("Personagens apagados: " + arg0.tpasso)
      admlog(arg0, "apagou personagens " + arg0.tpasso)
    fimse
  senao
    txt20 m1
    arg0.passo = este
    m1 = txt2(arg0.tpasso) ? "personagens" : "personagem"
    arg0.msg("Apagar " + m1 + infonome(arg0.tpasso) + "? Tecle S ou N")
  fimse
  ret 1

func infonome
  txt200 n1 = arg0
  txt300 n2
  enquanto n1
    refvar agora = txt1(n1)
    n1 = txt2(n1)
    n2 += " " + agora + "(" + p_[agora]:nome + ")"
  efim
  ret n2


classe adm_eperso
herda comando_adm
const objcmd = arg1.c_eperso ? este
const m_ajuda = "-t\n\
-s <nome>\n\
Edita o personagem com o nome especificado."

func escr # Editar personagem
  prog p
  uint8 num
  refvar nome = txtmin(txtremove(arg1, "EMDCT7"))
  se nome == ""
    ret arg0.msg("Tecle o nome do personagem após EPERSO")
  senao !p.existe("p_" + nome)
    ret arg0.msg("\bPersonagem não existe: " + nome)
  senao !p.existe("menu_perso" + (num = p_[nome]:perso))
    ret arg0.msg("\bPersonagem não pode ser editado: " + nome)
  senao arg2.c_eperso >= 2
  senao nome != arg0.jogarea + txtfim(nome, 3)
    ret arg0.msg("\bPersonagem não existe: " + nome)
  fimse
  arg0.sock.var.classe1 = "p_" + txtmin(nome)
  arg0.sock.var.menufim = "menu_perso" + num
  arg0.sock.m_menu("menu_perso" + num)


classe adm_pexp
herda comando_adm
const m_ajuda = "-t\n\
-s <alvo>\n\
-s <personagem> <alvo>\n\
Calcula a experiência ganha ao vencer/matar um personagem.\n\
Se for fornecido apenas o alvo, calcula a experiência que o seu\n\
personagem ganharia."

func escr
  ref perso
  ref alvo
  ref obj
  se intsub(arg1) < 1
    ret arg0.msg(txtmaimin(txt(este, 4)) + " requer 1 ou 2 argumentos")
  senao intsub(arg1) >= 2
    perso = misc:persodono(arg0, txt1(arg1))
    alvo = misc:persodono(arg0, txt2(arg1))
    ret !perso, arg0.msg("Personagem não existe: " + txt1(arg1))
    ret !alvo, arg0.msg("Alvo não existe: " + txt2(arg1))
  senao
    perso = arg0
    alvo = misc:persodono(arg0, arg1)
    ret !alvo, arg0.msg("Alvo não existe: " + arg1)
  fimse
  textotxt t
  perso_exp:experiencia(perso, alvo, t)
  arg0.msg2(t.remove(1000))


classe menu_pcomum1
herda comando_menu_adm
const nome1 = "Nome"
const tipo1 = "opc_linha"
const vari1 = "nome"
#
const nome2 = "Palavras chave"
const info2 = "Palavras que os jogadores digitam para se referir ao item"
const tipo2 = "opc_linha"
const vari2 = "ident"
const nulo2 = "\c3" + [classe]:nome
#
const nome3 = "Palavras chave fem"
const info3 = "Palavras chave se personagem feminino"
const tipo3 = "opc_linha"
const vari3 = "identfem"
const nulo3 = "\c3" + ([classe]:ident ?? [classe]:nome)
#
const nome4 = "Descrição curta"
const info4 = "Descrição usada na maioria dos comandos"
const tipo4 = "opc_linha"
const vari4 = "descnome"
const nulo4 = "\c3" + [classe]:nome
#
const nome5 = "Desc curta fem"
const info5 = "Descrição curta se personagem feminino"
const tipo5 = "opc_linha"
const vari5 = "descnomefem"
const nulo5 = "\c3" + ([classe]:descnome ?? [classe]:nome)
#
const nome6 = "Descrição sala"
const tipo6 = "menu_pdescsala--"
#
const nome7 = "Descrição condição"
const tipo7 = "menu_pdesccond--"
#
const nome8 = "Outras descrições"
const tipo8 = "menu_pdescoutros--"
#
const nome9 = "Sexo Perso"
const info9 = "Aleatório escolhe um quando o personagem é criado"
const tipo9 = "opc_opcao"
const vari9 = "sexoini"
const extr9 = "Feminino\nMasculino\nAleatório"
#
const nome10 = "Sexo Msg"
const info10 = "Usado nas mensagens com o personagem"
const tipo10 = "opc_opcao"
const vari10 = "msexo"
const extr10 = "Feminino\nMasculino\nSexo Perso"
#
const nome11 = "Peso"
const info11 = "Em gramas"
const tipo11 = "opc_numero"
const vari11 = "pesoobj"
const extr11 = "1 1000000000"
const exec11 = "ajustapeso"
#
const nome12 = "Volume"
const tipo12 = "opc_numero"
const extr12 = "1 1000000000"
const vari12 = "volobj"
const exec12 = "ajustapeso"
#
const nome13 = "Volume dentro"
const tipo13 = "opc_numero"
const vari13 = "volmax"
#
const nome14 = "Expande"
const info14 = "Volume aumenta se tiver itens dentro"
const tipo14 = "opc_simnao"
const vari14 = "volexp"
const exec14 = "ajustapeso"
#
const nome15 = "Objetos inventário"
const info15 = "Quantos itens pode ter no inventário"
const tipo15 = "opc_numero"
const vari15 = "objmax"
#
const nome16 = "Objetos máximo"
const info16 = "Inclui objetos dentro de outros objetos que estão no personagem"
const tipo16 = "opc_numero"
const vari16 = "objlimite"
#
const nome17 = "Nível"
const tipo17 = "opc_numero"
const vari17 = "nivel"
#
const nome18 = "Posição padrão"
const tipo18 = "opc_opcao"
const vari18 = "pospadr"
const extr18 = "Morto (não usar essa opção)\n\
Mortalmente ferido\n\
Incapacitado\n\
Fraco\n\
Dormindo\n\
Descansando\n\
Sentado\n\
Lutando (não usar essa opção)\nEm pé"
#
const nome19 = "Tipo 1"
const info19 = "Nome da raça; o comando que mostra os tipos é adm tipo"
const tipo19 = "opc_linha"
const vari19 = "tipo1"
const exec19 = "recalc_exec"
#
const nome20 = "Tipo 2"
const info20 = "Nome da classe; o comando que mostra os tipos é adm tipo"
const tipo20 = "opc_linha"
const vari20 = "tipo2"
const exec20 = "recalc_exec"
#
const nome21 = "Tipo 3"
const info21 = "Nome da subclasse; o comando que mostra os tipos é adm tipo"
const tipo21 = "opc_linha"
const vari21 = "tipo3"
const exec21 = "recalc_exec"
#
const nome22 = "Equip posições"
const info22 = "Se não for <nulo>, são as posições aonde pode usar equipamentos"
const tipo22 = "opc_vetorhex"
const vari22 = "equip1"
const extr22 = config:equip_txt
#
const nome23 = "Equip adicionar"
const info23 = "Adicionar essas posições no personagem"
const tipo23 = "opc_vetorhex"
const vari23 = "equip2"
const extr23 = config:equip_txt
#
const nome24 = "Equip remover"
const info24 = "Remover essas posições do personagem"
const tipo24 = "opc_vetorhex"
const vari24 = "equip3"
const extr24 = config:equip_txt
#
const nome25 = "Loja e aulas"
const tipo25 = "menu_ploja--"
#
const nome26 = "Recebe itens"
const info26 = "Se outros personagens podem dar itens para este"
const tipo26 = "opc_simnao"
const vari26 = "p_recebe"
#
const nome27 = "Não podem seguir"
const tipo27 = "opc_simnao"
const vari27 = "p_naoseguir"
#
const nome28 = "Evolui para"
const info28 = "Deve ser obrigatoriamente do mesmo tipo entre Simples/Batalha/Completo"
const tipo28 = "opc_linha"
const vari28 = "p_evoluiperso"
#
const nome29 = "Evolui nível"
const info29 = "A partir desse nível pode-se usar o comando Evoluir"
const tipo29 = "opc_numero"
const vari29 = "p_evoluinivel"
const extr29 = "0 65535"
#
const nome30 = "Evolui com"
const tipo30 = "opc_opcao"
const vari30 = "p_evoluicom"
const extr30 = "Qualquer um\nExceto o primeiro dono"
#
const nome31 = "Evolui mensagem"
const info31 = "Ao evoluir para esse personagem"
const tipo31 = "opc_linha"
const vari31 = "p_evoluimsg1"
#
const nome32 = "Sons"
const tipo32 = "menu_psom--"
#
const nome33 = "Comandos personagem"
const tipo33 = "menu_pcomandos--"
#
const nome50 = "Variáveis"
const tipo50 = "opc_linha"
const vari50 = "inivar"
#
const nome51 = "Eventos hora"
const info51 = "Se a função cmd_hora é chamada quando a hora MUD mudar (5 minutos)"
const tipo51 = "opc_simnao"
const vari51 = "evhora"
const exec51 = "ajustaobj"
#
const nome52 = "Eventos perso"
const info52 = "Receber eventos do próprio personagem"
const tipo52 = "opc_simnao"
const vari52 = "eveste"
const exec52 = "ajustaobj"
#
const nome53 = "Eventos dono perso"
const info53 = "Se recebe eventos do dono se for personagem"
const tipo53 = "opc_simnao"
const vari53 = "evperso"
const exec53 = "ajustaobj"
#
const nome54 = "Eventos dono item"
const info54 = "Se recebe eventos do dono se for item"
const tipo54 = "opc_simnao"
const vari54 = "evitem"
const exec54 = "ajustaobj"
#
const nome55 = "Eventos dono sala"
const info55 = "Se recebe eventos da sala se estiver em uma sala"
const tipo55 = "opc_simnao"
const vari55 = "evsala"
const exec55 = "ajustaobj"


classe menu_pcomum2
herda comando_menu_adm
const nome36 = "Tipo de ataque"
const info36 = "Que habilidade usa em ataques automáticos"
const tipo36 = "opc_linha"
const vari36 = "p_atktipo"
#
const nome37 = "Quando morre"
const tipo37 = "menu_pmorreu--"
#
const nome38 = "Fim da batalha"
const tipo38 = "menu_pbatalhafim--"


classe menu_pdescsala
herda comando_menu_adm
const titulo = "Descrição sala"
const menufim = var.menufim
#
const nome1 = "Morto"
const tipo1 = "opc_linha"
const vari1 = "descsala0"
#
const nome2 = "Mortalmente ferido"
const tipo2 = "opc_linha"
const vari2 = "descsala1"
#
const nome3 = "Incapacitado"
const tipo3 = "opc_linha"
const vari3 = "descsala2"
#
const nome4 = "Fraco"
const tipo4 = "opc_linha"
const vari4 = "descsala3"
#
const nome5 = "Dormindo no chão"
const tipo5 = "opc_linha"
const vari5 = "descsala4c"
#
const nome6 = "Dormindo em item"
const tipo6 = "opc_linha"
const vari6 = "descsala4i"
#
const nome7 = "Descansando no chão"
const tipo7 = "opc_linha"
const vari7 = "descsala5c"
#
const nome8 = "Descansando em item"
const tipo8 = "opc_linha"
const vari8 = "descsala5i"
#
const nome9 = "Sentado no chão"
const tipo9 = "opc_linha"
const vari9 = "descsala6c"
#
const nome10 = "Sentado em item"
const tipo10 = "opc_linha"
const vari10 = "descsala6i"
#
const nome11 = "Montado"
const tipo11 = "opc_linha"
const vari11 = "descsala6p"
#
const nome12 = "Lutando"
const tipo12 = "opc_linha"
const vari12 = "descsala7a"
#
const nome13 = "Lutando com alguém"
const tipo13 = "opc_linha"
const vari13 = "descsala7b"
#
const nome14 = "Lutando com você"
const tipo14 = "opc_linha"
const vari14 = "descsala7c"
#
const nome15 = "Em pé"
const tipo15 = "opc_linha"
const vari15 = "descsala8"
#
const nome16 = "Outra posição"
const tipo16 = "opc_linha"
const vari16 = "descsalaN"


classe menu_pdesccond
herda comum_desccond
const titulo = "Descrição condição"
const menufim = var.menufim
#
const nulo1 = "\c3" + fnulo("desccond0")
const nulo2 = "\c3" + fnulo("desccond1")
const nulo3 = "\c3" + fnulo("desccond2")
const nulo4 = "\c3" + fnulo("desccond3")
const nulo5 = "\c3" + fnulo("desccond4")
const nulo6 = "\c3" + fnulo("desccond5")
const nulo7 = "\c3" + fnulo("desccond6")
const nulo8 = "\c3" + fnulo("desccond7")

func fnulo
  refvar v = $t_[[classe]:tipo1].[arg0] ?? $t_[[classe]:tipo2].[arg0]
  ret v ?? $t_[[classe]:tipo2].[arg0] ?? $t_[[classe]:tipo3].[arg0] ?? perso_cfg:[arg0]


classe menu_pbatalhafim
herda menu_batalhafim
const menufim = var.menufim
const nulo1 = "\c3" + fnulo("batalhafim_p1")
const nulo2 = "\c3" + fnulo("batalhafim_p2")
const nulo3 = "\c3" + fnulo("batalhafim_p3")
const nulo4 = "\c3" + fnulo("batalhafim_s1")
const nulo5 = "\c3" + fnulo("batalhafim_s2")
const nulo6 = "\c3" + fnulo("batalhafim_s3")
const nulo7 = "\c3" + fnulo("batalhafim_t1")
const nulo8 = "\c3" + fnulo("batalhafim_t2")
const nulo9 = "\c3" + fnulo("batalhafim_t3")
const nulo10 = "\c3" + fnulo("batalhafim_fim")

func fnulo
  refvar v = $t_[[classe]:tipo1].[arg0] ?? $t_[[classe]:tipo2].[arg0]
  ret v ?? $t_[[classe]:tipo2].[arg0] ?? $t_[[classe]:tipo3].[arg0] ?? perso_cfg:[arg0]


classe menu_pdescoutros
herda comando_menu_adm
const titulo = "Outras descrições"
const menufim = var.menufim
#
const nome1 = "Ao olhar"
const tipo1 = "opc_texto"
const vari1 = "descver"
#
const nome2 = "Ao olhar com dono"
const info2 = "Quando pertence a outro personagem; se ausente assume Ao olhar"
const tipo2 = "opc_texto"
const vari2 = "descdonover"
#
const nome3 = "Identificar"
const info3 = "Texto adicionado após identificar (com magia de identificação)"
const tipo3 = "opc_texto"
const vari3 = "descident"
#
const titu4 = " * Descrição curta com dono"
#
const nome4 = "Para o dono"
const tipo4 = "opc_linha"
const vari4 = "descdono1"
#
const nome5 = "Para os outros"
const tipo5 = "opc_linha"
const vari5 = "descdono2"
#
const nome6 = "Caracteres especiais"
const tipo6 = "opc_ajuda--"
const extr6 = "\c3Caracteres especiais usadas nas descrições com dono:\b\n\
$p = descrição curta\n\
$q = descrição curta sem o/a/um/uma na frente\n\
$d = descrição curta do dono\n\
$s = seu ou sua\n\
$t = teu ou tua\n\
$$ = símbolo $"


classe menu_patribs1
herda comando_menu_adm
const titulo = "Atributos"
const menufim = var.menufim
#
const nome1 = "Texto perso"
const info1 = "Aparece na frente da descrição do personagem, entre parênteses\n\
Para aparecer em baixo, adicionar um * (asterisco) na frente\n\
Exemplo: *  ... e está emitindo uma luz"
const tipo1 = "opc_linha"
const vari1 = "m_atribs1"
const exec1 = "atribs_exec"
#
const nome3 = "Sim/não perso"
const tipo3 = "opc_atribbit"
const vari3 = "recalc1_auto"
const exec3 = "recalc_exec"
#
const nome8 = "Texto dono"
const info8 = "Aparece na frente da descrição do personagem dono, entre parênteses\n\
Para aparecer em baixo, adicionar um * (asterisco) na frente\n\
Exemplo: *  ... e está protegid$s por uma luz"
const tipo8 = "opc_linha"
const vari8 = "m_atribs2"
const exec8 = "atribs_dono"
#
const nome9 = "Números dono"
const tipo9 = "opc_atribnum"
const vari9 = "recalc2_auto"
const exec9 = "recalc_dono"
#
const nome10 = "Sim/não dono"
const tipo10 = "opc_atribbit"
const vari10 = "recalc2_auto"
const exec10 = "recalc_dono"
#
const nome11 = "Ataque dono"
const info11 = "Afetam os danos quando o personagem ataca alguém"
const tipo11 = "opc_atribatk"
const vari11 = "recalc2_auto"
const exec11 = "recalc_dono"
#
const nome12 = "Defesa dono"
const info12 = "Afetam os danos quando alguém ataca o personagem"
const tipo12 = "opc_atribdef"
const vari12 = "recalc2_auto"
const exec12 = "recalc_dono"


classe menu_patribs2
herda menu_patribs1
#
const nome2 = "Números perso"
const tipo2 = "opc_atribnum"
const vari2 = "recalc1_auto"
const exec2 = "recalc_exec"
#
const nome4 = "Ataque perso"
const info4 = "Afetam os danos quando o personagem ataca alguém"
const tipo4 = "opc_atribatk"
const vari4 = "recalc1_auto"
const exec4 = "recalc_exec"
#
const nome5 = "Defesa perso"
const info5 = "Afetam os danos quando alguém ataca o personagem"
const tipo5 = "opc_atribdef"
const vari5 = "recalc1_auto"
const exec5 = "recalc_exec"
#
const nome6 = "Perde precisão ver"
const info6 = "Quanto perde de precisão quando está vendo o alvo, geralmente de 0 a 100\n\
0 não perde, 100 perde o que está na opção \"Imprecisão não ver\" do ataque"
const tipo6 = "opc_numero"
const vari6 = "p_precisaover"
const nulo6 = "\c6" + $t_[[classe]:tipo1].p_precisaover + "\b"
#
const nome7 = "Perde precisão não ver"
const info7 = "Quanto perde de precisão quando não está vendo o alvo, geralmente de 0 a 100\n\
0 não perde, 100 perde o que está na opção \"Imprecisão não ver\" do ataque"
const tipo7 = "opc_numero"
const vari7 = "p_precisaoinv"
const nulo7 = "\c6" + $t_[[classe]:tipo1].p_precisaoinv + "\b"


classe menu_ploja
herda comando_menu_adm
const titulo = "Loja e aulas"
const menufim = var.menufim
#
const nome1 = "Hora que abre"
const info1 = "Que horas a loja abre ou o PNJ começa a ensinar"
const tipo1 = "opc_numero"
const vari1 = "lojaini"
const extr1 = "0 23"
#
const nome2 = "Hora que fecha"
const info2 = "Que horas a loja fecha ou o PNJ pára de ensinar\n\
Se for igual ao horário de abertura, nunca fecha"
const tipo2 = "opc_numero"
const vari2 = "lojafim"
const extr2 = "0 23"
#
const nome3 = "Lucro na venda"
const info3 = "Em porcentagem; 0 significa nenhum lucro (cobra o preço do item).\n\
Se menor que 0, o vendedor tem prejuízo (-100 é de graça; o item é doado)"
const tipo3 = "opc_numero"
const vari3 = "taxavenda"
const extr3 = "-100 10000"
#
const nome4 = "Lucro na compra"
const info4 = "Em porcentagem (0=preço normal e 100=não paga pelo item)"
const tipo4 = "opc_numero"
const vari4 = "taxacompra"
const extr4 = "0 100"
#
const nome5 = "Preço da aula"
const info5 = "Preço da aula em porcentagem (exemplo, 0=de graça e 100=preço da aula)"
const tipo5 = "opc_numero"
const vari5 = "taxaaula"
const extr5 = "0 10000"
#
const nome6 = "Produtos"
const tipo6 = "opc_menuprod"
const vari6 = "lojaitem"
#
const nome7 = "Produtos inv"
const info7 = "Se vende os produtos listados no comando inv"
const tipo7 = "opc_simnao"
const vari7 = "lojainv"
#
const nome8 = "Produtos sala"
const info8 = "Nome da sala com os produtos que serão vendidos"
const tipo8 = "opc_linha"
const vari8 = "lojasala"
#
const nome9 = "Vende casas área"
const info9 = "Nome de uma área; compra e vende casas dessa área"
const tipo9 = "opc_linha"
const vari9 = "lojacasa"
#
const nome10 = "Chaveiro área"
const info10 = "Nome de uma área; vende chaves e fechaduras para casas nessa área"
const tipo10 = "opc_linha"
const vari10 = "lojachave"
#
const nome11 = "Cobra taxa áreas"
const info11 = "Somente os prefixos da área, uma linha por área"
const tipo11 = "opc_texto"
const vari11 = "taxacasa"
#
const nome12 = "Compra produtos"
const info12 = "Vide tipos de itens, no comando ECONFIG"
const tipo12 = "opc_vetorhex"
const vari12 = "tipoitem"
const extr12 = config:item_tipos
#
const nome13 = "Aulas"
const tipo13 = "opc_menuaula"
const vari13 = "lojaaula"
#
const nome14 = "Só negocia com"
const info14 = "Se vazio, o personagem negocia com todos"
const tipo14 = "opc_tipos"
const vari14 = "lojasim"
#
const nome15 = "Não negocia com"
const tipo15 = "opc_tipos"
const vari15 = "lojanao"
#
const nome16 = "Idiomas"
const info16 = "Só negocia com quem estiver falando um desses idiomas"
const tipo16 = "opc_listaidiomas"
const vari16 = "lojaidioma"
#
const nome17 = "Nível idioma"
const info17 = "Quanto precisa saber do idioma para negociar"
const tipo17 = "opc_opcao"
const vari17 = "lojaaulaidioma"
const extr17 = "Nenhum\n" + txtsublin(misc:aulas, 1)
#
const nome18 = "Msg invisível"
const tipo18 = "opc_linha"
const vari18 = "lojainvisivel"
#
const nome19 = "Msg não negocia"
const tipo19 = "opc_linha"
const vari19 = "lojanaonegocia"
#
const nome20 = "Msg fechado"
const tipo20 = "opc_linha"
const vari20 = "lojafechada"
#
const nome21 = "Msg não entende"
const info21 = "Quando não entende o idioma do jogador"
const tipo21 = "opc_linha"
const vari21 = "lojamsgidioma"


classe menu_pcomandos
herda comum_perso_comandos
const menufim = var.menufim
#
const nulo1 = fnulo1(vari1)
const nulo2 = fnulo1(vari2)
const nulo3 = fnulo1(vari3)
const nulo4 = fnulo1(vari4)
const nulo5 = fnulo2(vari5, "h_cmd_dormir", "m_nao_consegue")
const nulo6 = fnulo2(vari6, "h_cmd_descansar", "m_nao_consegue")
const nulo7 = fnulo2(vari7, "h_cmd_sentar", "m_nao_consegue")
const nulo8 = fnulo2(vari8, "h_cmd_montar", "m_nao_consegue")

func fnulo1
  refvar v = $t_[[classe]:tipo1].[arg0]
  ret !txt(v) || v ? "\c61 Sim" : "\c60 Não"

func fnulo2 # arg0 = variável do personagem, arg0=classe, arg1=variável
  refvar v = $t_[[classe]:tipo1].[arg0]
  ret v, "\c3" + v
  prog p
  p.iniherdainv(arg1)
  ret "\c3" + $[p.texto].[arg2]


classe menu_pmorreu
herda menu_morreu
const menufim = var.menufim
#
const nome1 = "Imortal"
const tipo1 = "opc_simnao"
const vari1 = "p_imortal"
#
const nome2 = "Experiência"
const info2 = "Quanta experiência dá quando morre, em porcentagem"
const tipo2 = "opc_numero"
const vari2 = "p_exp"
#
const nulo3 = "\c3" + fnulo("p_morreu0")
const nulo4 = "\c3" + fnulo("p_morreu1")
const nulo5 = "\c3" + fnulo("p_morreu2")
const nulo6 = "\c6" + fnulo_opc("p_corpo_tipo", extr6)
const nulo7 = "\c3" + fnulo("p_corpo_ident")
const nulo8 = "\c3" + fnulo("p_corpo_descnome")
const nulo9 = "\c3" + fnulo("p_corpo_descsala")
const nulo12 = "\c6" + fnulo_opc("p_corpo_msexo", extr12)
const nulo13 = "\c6" + fnulo("p_corpo_tempo")
const nulo14 = "\c3" + fnulo("p_corpo_some")

func fnulo
  refvar v = $t_[[classe]:tipo1].[arg0] ?? $t_[[classe]:tipo2].[arg0]
  ret v ?? $t_[[classe]:tipo2].[arg0] ?? $t_[[classe]:tipo3].[arg0] ?? perso_cfg:[arg0]

func fnulo_opc
  refvar opc = fnulo(arg0)
  ret txt(opc) + " " + txtsublin(arg1, opc, 1)


classe menu_psom
herda comando_menu_adm
const titulo = "Sons"
const menufim = var.menufim
#
const nome1 = "Entrou"
const info1 = "Para quem recebe a mensagem do personagem entrando na sala"
const tipo1 = "opc_linha"
const vari1 = "p_som_entra"
#
const nome2 = "Entrou voando"
const info2 = "Para quem recebe a mensagem do personagem entrando na sala"
const tipo2 = "opc_linha"
const vari2 = "p_som_voaentra"
#
const nome3 = "Saiu"
const info3 = "Para quem recebe a mensagem do personagem saindo da sala"
const tipo3 = "opc_linha"
const vari3 = "p_som_sai"
#
const nome4 = "Saiu voando"
const info4 = "Para quem recebe a mensagem do personagem saindo da sala"
const tipo4 = "opc_linha"
const vari4 = "p_som_voasai"


classe menu_pcomportamento1
herda comando_menu_adm
const titulo = "Comportamento"
const menufim = var.menufim
#
const nome1 = "Movimentar"
const info1 = "Nota: mesmo quando não sai do lugar, pode sair para perseguir"
const tipo1 = "opc_opcao"
const vari1 = "p_mover"
const extr1 = "Não sai do lugar\nSomente na área\nQualquer lugar"
const exec1 = "p_proc_exec"
#
const nome2 = "Tempo move"
const info2 = "Tempo médio em décimos de segundo para ir para outra sala"
const tipo2 = "opc_numero"
const vari2 = "p_movervel"
const extr2 = "5 1000"
const exec2 = "p_proc_exec"
#
const nome3 = "Come corpos"
const tipo3 = "opc_simnao"
const vari3 = "p_comecorpo"
const exec3 = "p_proc_exec"


classe menu_pcomportamento2
herda menu_pcomportamento1
const titulo = "Comportamento"
const menufim = var.menufim
#
const nome4 = "Agressivo"
const tipo4 = "opc_opcao"
const vari4 = "p_agressivo"
const extr4 = "Pacífico\nSe atacarem\nSim"
#
const nome5 = "Foge abaixo de"
const info5 = "Se os pontos de vida caírem abaixo desse número, o personagem foge"
const tipo5 = "opc_numero"
const vari5 = "p_fugir"
#
const nome6 = "Sem resgate"
const info6 = "Se não permite resgatar jogadores lutando com esse personagem"
const tipo6 = "opc_simnao"
const vari6 = "p_naoresg"
#
const nome7 = "Tempo lembra"
const info7 = "Por quanto tempo se lembra dos jogadores que atacaram, em minutos"
const tipo7 = "opc_numero"
const vari7 = "p_lembra"
const extr7 = "0 1747" # Valor máximo de inttempo dividido por 600
#
const nome8 = "Anda ataque"
const info8 = "Se deve ir na direção de quem atacou, quando recebe ataque de outra sala"
const tipo8 = "opc_simnao"
const vari8 = "p_atk_anda"
#
const nome9 = "Desvia ataque"
const info9 = "Se sempre desvia de ataques vindos de outras salas"
const tipo9 = "opc_simnao"
const vari9 = "p_atk_desvia"
#
const nome10 = "Alvo dos ataques"
const info10 = "Como o personagem escolhe quem atacar, quando está lutando com vários"
const tipo10 = "opc_opcao"
const vari10 = "p_atk_alvo"
const extr10 = "Não muda\nAleatório\nPersonagem de menor nível"
#
const nome11 = "Persegue jogadores"
const tipo11 = "opc_opcao"
const vari11 = "p_persegue"
const extr11 = "Não\nMesma área se atacarem\nQualquer lugar se atacarem"
#
const nome12 = "Tempo persegue"
const info12 = "Tempo médio em décimos de segundo para ir para outra sala"
const tipo12 = "opc_numero"
const vari12 = "p_perseguevel"
const extr12 = "5 1000"
#
const nome13 = "Pede ajuda"
const info13 = "Quem deve ajudar esse personagem quando ele for atacado"
const tipo13 = "opc_listaperso"
const vari13 = "p_atk_ajuda"
#
const nome14 = "Msg luta individual"
const info14 = "Se estiver definido, as lutas com esse personagem serão um contra um\n\
Quem tentar entrar na luta recebe essa mensagem"
const tipo14 = "opc_linha"
const vari14 = "p_atk_individual"


classe menu_pcomportamento3
herda menu_pcomportamento2
const titulo = "Comportamento"
const menufim = var.menufim
#
const nome15 = "Personagem luta"
const info15 = "Somente personagens que podem ter animais"
const tipo15 = "opc_opcao"
const vari15 = "p_animalatk"
const extr15 = "Personagem e animais\nSomente personagem\nSomente animais"


classe menu_pdomar
herda comando_menu_adm
const titulo = "Domar e montar"
const menufim = var.menufim
#
const nome1 = "Lugar após domar"
const tipo1 = "opc_opcao"
const vari1 = "p_animal"
const extr1 = "Comando Animal, protege o dono\n\
Sala, luta sozinho, sai do jogo se morrer\n\
Comando Animal ou sala, luta sozinho\n\
Comando Animal ou sala, protege o dono"
#
const nome2 = "Domar"
const info2 = "Se pode ser domado"
const tipo2 = "opc_opcao"
const vari2 = "p_captura"
const extr2 = "Não\nMuito fácil\nFácil\nNormal\nDifícil\nMuito difícil"
#
const nome3 = "Habilidade domar"
const info3 = "Nome da habilidade necessária para domar"
const tipo3 = "opc_linha"
const vari3 = "p_domar_hab"
#
const nome4 = "Aulas domar"
const info4 = "Quando precisa conhecer para domar"
const tipo4 = "opc_opcao"
const vari4 = "p_domar_aulas"
const extr4 = "Nenhum\n" + txtsublin(misc:aulas, 1)
#
const nome5 = "Montar"
const tipo5 = "opc_opcao"
const vari5 = "p_montar_tipo"
const extr5 = "Não\n\
Somente se tiver dono\n\
Sem dono o personagem não obedece\n\
Sem dono o personagem anda por si\n\
Obedece se tiver alguém montado"
#
const nome6 = "Habilidade montar"
const info6 = "Nome da habilidade necessária para montar"
const tipo6 = "opc_linha"
const vari6 = "p_montar_hab"
#
const nome7 = "Aulas dono"
const info7 = "Quando o dono precisa conhecer para montar"
const tipo7 = "opc_opcao"
const vari7 = "p_montar_aulas1"
const extr7 = "Nenhum\n" + txtsublin(misc:aulas, 1)
#
const nome8 = "Aulas sem dono"
const info8 = "Quando precisa conhecer para montar no animal sem dono"
const tipo8 = "opc_opcao"
const vari8 = "p_montar_aulas2"
const extr8 = "Nenhum\n" + txtsublin(misc:aulas, 1)
#
const nome9 = "Lugares"
const info9 = "Se 0, não é possível montar"
const tipo9 = "opc_numero"
const vari9 = "p_lugar"


classe menu_perso1
herda menu_pcomum1
const titulo = "Perso simples " + txt(var.classe1, 2)
#
const nome34 = "Atributos"
const tipo34 = "menu_patribs1--"
#
const nome35 = "Comportamento"
const tipo35 = "menu_pcomportamento1--"


classe menu_perso2
herda menu_pcomum1, menu_pcomum2
const titulo = "Perso batalha " + txt(var.classe1, 2)
#
const nome34 = "Atributos"
const tipo34 = "menu_patribs2--"
#
const nome35 = "Comportamento"
const tipo35 = "menu_pcomportamento2--"
#
const nome39 = "Domar e montar"
const tipo39 = "menu_pdomar--"
#
const nome40 = "Dar e soltar"
const info40 = "Se esse personagem pode ser dado ou solto"
const tipo40 = "opc_opcao"
const vari40 = "p_soltar"
const extr40 = "Pode-se dar e soltar\nPode-se apenas soltar\nNão se pode dar nem soltar"


classe menu_perso3
herda menu_pcomum1, menu_pcomum2
const titulo = "Perso completo " + txt(var.classe1, 2)
#
const nome34 = "Atributos"
const tipo34 = "menu_patribs2--"
#
const nome35 = "Comportamento"
const tipo35 = "menu_pcomportamento3--"
