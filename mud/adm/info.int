classe adm_info
herda comando_adm
const objcmd = arg1.i_perso ? este
const m_ajuda = "-t\n\
-s [personagem ou item]\n\
Mostra informações sobre um personagem ou item, na sala ou que você carrega.\n\
Sem argumentos, mostra informações sobre a sala aonde você está."

func escr
  ret !arg1, info(arg0.dono, arg0.sock.txtmais) + arg0.sock.txtmostra
  listaobj l
  l.addfim(arg0.dono.dentro1, arg0.dono.dentro2, arg0.dentro1)
  ref r = misc:itemlista(arg0, arg1, l)
  ret !r, arg0.msg("\bNão há nenhum item ou personagem chamado " + arg1)
  info(r, arg0.sock.txtmais), arg0.sock.txtmostra

func cabe # Cabeçalho: o nome do item/personagem/sala a partir da classe
# arg0 = nome ou objeto da classe
  casovar txtmin(txt(arg0, 0, 2))
  casose "s_"
    ret "\b\c6Sala " + txt(arg0, 2) + ":\b"
  casose "p_"
    ret "\b\c6Perso " + txt(arg0, 2) + ", " + arg0.descnome2 + ":\b"
  casose "i_"
    ret "\b\c6Item " + txt(arg0, 2) + ", " + arg0.descnome2 + ":\b"
  casofim
  ret txt(arg0) == "jogador", "\b\c6Jogador " + arg0.descnome2 + ":\b"
  ret "\b\c6Objeto " + arg0 + ":\b"

func info # Usado por escr
# arg0 = sala, personagem ou item
# arg1 = textotxt aonde enviar as mensagens
  arg1.limpar
  arg1.addfim(cabe(arg0))
# Quantidade de objetos que esse objeto representa
  se arg0.objtot != 1
    arg1.addfim("Equivale a " + arg0.objtot + " objetos")
  fimse
  txt100 lin
# Peso
  lin = "Peso:   " + arg0.pesoobj + " do objeto, " + arg0.pesoden
  lin += " dentro, " + arg0.pesovar
  lin += " variáveis, " + arg0.pesotot + " ao todo" + (!arg0.pesoadd ? "  voando")
  arg1.addfim(lin)
# Volume
  lin = "Volume: " + arg0.volobj + " do objeto, " + arg0.volden
  lin += " dentro, " + arg0.voltot + " ao todo, "
  lin += arg0.volexp ? "expande" : "não expande"
  arg1.addfim(lin)
# Objetos dentro
  lin = "Dentro: " + arg0.socktot + " jogador" + (arg0.socktot != 1 ? "es")
  lin += ", " + arg0.dentro2.total + " perso, " + arg0.dentro2.total
  lin += (arg0.dentro1.total == 1 ? " item" : " itens") + ", representa "
  lin += txt(arg0.objnum >> 1) + (arg0.objnum >> 1 == 1 ? " item" : " itens")
  arg1.addfim(lin)
# Personagens
  se arg0.s_sala
    lin = "Limite: " + (arg0.jogtot >> 1) + "/" + int(arg0.s_jog) + " jogadores"
    lin += ", " + (arg0.pnjtot >> 1) + "/" + int(arg0.s_pnj) + " PNJs sem dono"
    arg1.addfim(lin)
  fimse
# Seguindo
  arg0.iseguir && arg1.addfim("Seguindo:         " + nobj(arg0.iseguir.objlista))
  se arg0.lseguir.total
    arg1.addfim("Sendo seguido por:")
    listaitem i
    epara i = arg0.lseguir.ini, i, i.depois
      arg1.addfim("  " + nobj(i.obj))
    efim
  fimse
# Eventos do objeto
  arg0.evrec.0 && arg1.addfim("Evento hora de:   " + nobj(arg0.evrec.0.objlista))
  arg0.evrec.1 && arg1.addfim("Evento objeto de: " + nobj(arg0.evrec.1.objlista))
  arg0.evrec.2 && arg1.addfim("Evento dono de:   " + nobj(arg0.evrec.2.objlista))
# Eventos
  se arg0.evento.total
    arg1.addfim("Recebem eventos desse objeto:")
    listaitem i
    epara i = arg0.evento.ini, i, i.depois
      arg1.addfim("  " + nobj(i.obj))
    efim
  fimse

func nobj # Retorna o nome de um objeto
# arg0 = objeto
  casovar txt(arg0, 0, 2)
  casose "s_"
    ret txt(arg0) + ", " + arg0.s_titulo
  casose "p_"
  casose "i_"
    ret txt(arg0) + ", " + arg0.descnome2
  casofim
  casovar arg0
  casose "misc_evento"
    ret txt(arg0) + (arg0.perso1 ? ", em " + arg0.perso1.obj)
  casose "misc_tempo"
    ret txt(arg0) + ", função " + arg0.obj + ":" + arg0.func
  casose "jogador"
    ret txt(arg0) + ", " + arg0.descnome2
  casofim
  ret txt(arg0)


classe adm_ivar
herda adm_info
const objcmd = arg1.c_ivar ? este
const m_ajuda = "-t\n\
-s [personagem ou item]\n\
Mostra as variáveis criadas dinamicamente de um personagem ou item,\n\
na sala ou que você carrega. Sem argumentos, mostra as variáveis da\n\
sala aonde você está."

func info # Usado por escr
# arg0 = sala, personagem ou item
# arg1 = textotxt aonde enviar as mensagens
  arg1.limpar
  arg1.addfim(cabe(arg0))
  txt100 t1
  refvar var = arg0.var
  epara t1 = var.ini, t1, t1 = var.depois(t1)
    arg1.addfim(t1 + var.tipo(t1) + "=" + var.[t1])
  efim
  arg1.linhas <= 1 && arg1.addfim("Nenhuma variável")


classe adm_iobj
herda adm_info
const objcmd = arg1.c_iobj ? este
const m_ajuda = "-t\n\
-s [personagem ou item]\n\
Mostra os objetos dentro de um personagem ou item, na sala ou que você\n\
carrega. Sem argumentos, mostra os objetos da sala aonde você está."

func info # Usado por escr
# arg0 = sala, personagem ou item
# arg1 = textotxt aonde enviar as mensagens
  arg1.limpar
  arg1.addfim(cabe(arg0))
  listaitem i
  arg0.dentro1 && arg1.addfim("Dentro1:")
  epara i = arg0.dentro1.ini, i, i.depois
    refvar titulo = i.obj.s_sala ? i.obj.s_titulo : i.obj.descnome2
    arg1.addfim(txt(i.obj) + "  " + i.obj.objtot + "x  " + titulo)
  efim
  arg0.dentro2 && arg1.addfim("Dentro2:")
  epara i = arg0.dentro2.ini, i, i.depois
    refvar titulo = i.obj.s_sala ? i.obj.s_titulo : i.obj.descnome2
    arg1.addfim(txt(i.obj) + "  " + i.obj.objtot + "x  " + titulo)
  efim
  arg1.linhas <= 1 && arg1.addfim("Nenhum objeto")


classe adm_ihab
herda comando_adm
const objcmd = arg1.i_perso ? este
const m_ajuda = "-t\n\
-s [personagem] [número do animal]\n\
Informa as habilidades de um personagem na sala."

func escr
  refvar r = misc:persoinfo(arg0, arg1)
  ret !r, 1
  txt100 t1
  txt100 t2
  refvar txtmais = arg0.sock.txtmais
  txtmais.limpar
  epara t1 = r.var.ini("h_"), t1, t1 = r.var.depois(t1, "h_")
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    t2 += " / " + txtsublin(misc:aulas, r.var.[t1]_, 1)
    txt2(r.var.[t1]) && (t2 += " R" + txt2(r.var.[t1]))
    txtmais.addfim(t2)
  efim
  se !txtmais.linhas
    txtmais.addfim(txtcopiamai(r.descnome2, "A") + " não conhece habilidades.")
  senao
    txtmais.addini("\b\c6Habilidades de " + r.descnome2 + ":\b")
  fimse
  arg0.sock.txtmostra


classe adm_imag
herda comando_adm
const objcmd = arg1.i_perso ? este
const m_ajuda = "-t\n\
-s [personagem] [número do animal]\n\
Informa as magias de um personagem na sala."

func escr
  refvar r = misc:persoinfo(arg0, arg1)
  ret !r, 1
  txt100 t1
  txt100 t2
  refvar txtmais = arg0.sock.txtmais
  txtmais.limpar
  epara t1 = r.var.ini("m_"), t1, t1 = r.var.depois(t1, "m_")
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    t2 += " / " + txtsublin(misc:aulas, r.var.[t1]_, 1)
    txt2(r.var.[t1]) && (t2 += " R" + txt2(r.var.[t1]))
    txtmais.addfim(t2)
  efim
  se !txtmais.linhas
    txtmais.addfim(txtcopiamai(r.descnome2, "A") + " não conhece magias.")
  senao
    txtmais.addini("\b\c6Magias de " + r.descnome2 + ":\b")
  fimse
  arg0.sock.txtmostra


classe adm_ief
herda comando_adm
const objcmd = arg1.i_perso ? este
const m_ajuda = "-t\n\
-s [personagem] [número do animal]\n\
Informa os efeitos afetando um personagem na sala."

func escr
  refvar r = misc:persoinfo(arg0, arg1)
  ret !r, 1
  refvar txtmais = arg0.sock.txtmais
  txtmais.limpar
  listaitem i
  epara i = r.dentro2.ini, i, i.depois
    continuar !i.obj.e_nome
    txtmais.addfim("1 " + i.obj.e_nome + (i.obj.t_duracao ? " (" + int(i.obj.t_duracao / 10) + \
")"))
  efim
  se !txtmais.linhas
    txtmais.addfim("Nenhum efeito afetando " + r.descnome2 + ".")
  senao
    txtmais.ordenalin("", "x")
    txtmais.addini("\b\c6Efeitos afetando " + r.descnome2 + ":\b")
  fimse
  arg0.sock.txtmostra


classe adm_ijog
herda comando_adm
const objcmd = arg1.i_perso ? este
const m_ajuda = "-t\n\
-s [jogador]\n\
Mostra algumas informações do jogador: como está conectado, nível, moedas,\n\
e-mail, sala e jogo salvo. Se não estiver online, procura no jogo salvo.\n\
Sem argumentos, mostra aonde cada jogador online está."
#
sav textovar var # Variáveis criadas sob demanda
sav txt20 nome # Nome do personagem
txt100 cnome # Para obter o nome codificado
sav txt20 jogperm
sav txt20 jogarea
sav txt40 salanome # Nome da sala
sav int1 psexo
const msexo2 = int(var.z_msexo ?? psexo)
sav uint16 pnivel
sav uint16 prenascer
sav txt32 tipo1
sav txt32 tipo2
sav txt32 tipo3
sav int1 jogconfig.32
sav int32 tempojogo1
sav uint16 tempojogo2

func escr
  se !arg1
    textotxt t
    t.addfim("\b\c6Jogadores:\b")
    ref r
    epara r = $jogador, r && t.linhas < 500, r = objdepois(r)
      t.addfim(r.nome + lugar(r))
    efim
    indiceitem item
    epara item.ini("un "), txt1(item.txt) == "un", item.depois
      refvar obj = item.obj
      continuar obj.perso.jog # Continuar se personagem é jogador
      continuar !obj.perso # Continua se não tem personagem
      t.addfim(obj.nome + " em " + obj.perso.nome + lugar(obj.perso))
    efim
    arg0.msg2(t.remove(500))
    ret
  fimse
# Obtém: p = objeto do personagem
  ref p # Objeto do personagem
  enquanto 1
    refvar nomesav = txts(txtnome(arg1))
    indiceitem item
    item.ini("pn " + nomesav)
    p = item.obj
    sair p
    ret !misc:nomeperso(arg1), arg0.msg("Nome inválido para jogador: " + arg1)
    arqsav sav1
    listaobj l1
    p = este, l1.addfim(p)
    p.cnome = "x " + nomesav
    sair sav1.ler("sav1/" + nomesav + ".sav", l1, 1)
    item.ini("un " + nomesav)
    p = item.obj
    ret !p, arg0.msg("Jogador inexistente: " + arg1)
    txt100 lin
    arg0.msg(p.nome + ", sem personagem")
    arg0.msg("Conexão:      " + p.info)
    ret
  efim
# Mostra os dados do personagem
  textotxt t
  txt100 lin
  lin = "\b\c6Jogador" + (p.psexo ? " " : "a ") + p.nome
  t.addfim(lin + (p.var.z_titulo ? ", " + p.var.z_titulo) + "\b")
  p.jogperm && p.jogperm != "jog" && t.addfim("Permissão:    " + p.jogperm)
  p.jogarea && t.addfim("Perm área:    " + p.jogarea)
  t.addfim("Nível:        " + (p.prenascer ? "R" + p.prenascer + " ") + p.pnivel)
  p.var.z_moedas_ && t.addfim("Moedas:       " + p.var.z_moedas_)
  lin = ""
  txt100 nome
  nome = !p.msexo2 ? $t_[p.tipo1].nome2 ?? $t_[p.tipo1].nome ?? p.tipo1
  nome && (lin += ", " + nome)
  nome = !p.msexo2 ? $t_[p.tipo2].nome2 ?? $t_[p.tipo2].nome ?? p.tipo2
  nome && (lin += ", " + nome)
  nome = !p.msexo2 ? $t_[p.tipo3].nome2 ?? $t_[p.tipo3].nome ?? p.tipo3
  nome && (lin += ", " + nome)
  lin && t.addfim("Raça/classe:  " + txt2(lin))
  p.sock && t.addfim("Conexão:      " + p.sock.info)
  p.cnome && t.addfim("Jogo salvo:   " + txt2(p.cnome))
  se p.dono
    t.addfim("Está em:      " + p.dono)
  senao p.salanome
    t.addfim("Entrará em:   " + p.salanome)
  fimse
  p.var.z_email && t.addfim("E-mail:       " + p.var.z_email)
  lin = "Tempo total de jogo: "
  p.tempojogo2 == 1 && (lin += "1 dia ")
  p.tempojogo2 > 1 && (lin += txt(p.tempojogo2) + " dias ")
  lin += intdiv((864000 - p.tempojogo1) / 36000)
  lin += ":"
  lin += intdiv((864000 - p.tempojogo1) / 600) % 60
  t.addfim(lin + " horas")
  arg0.msg2(t.remove(1000))

func lugar
# arg0=jogador
  ref s
  txt100 lin
  epara s = arg0.dono, s, s = s.dono
    se s.perso
      lin = (s.jog ? ", jogador" : ", " + txt(s, 2)) + " (" + s.nome + ")" + lin
    senao s.item
      lin = ", " + txt(s, 2) + " (" + s.nome + ")" + lin
    senao
      lin = ", " + txt(s, 2) + " (" + s.s_titulo + ")" + lin
    fimse
  efim
  ret lin


classe adm_inv
herda comando_adm_ajuda
const m_ajuda = "-t\n\
-s [personagem] [número do animal]\n\
Mostra os itens que um personagem da sala está carregando."


classe adm_estat
herda comando_adm_ajuda
const m_ajuda = "-t\n\
-s [personagem] [número do animal]\n\
Mostra estatísticas e diversas informações sobre um personagem da sala."


classe adm_hist
herda comando_adm
const objcmd = arg1.i_perso ? este
const m_ajuda = "-t\n\
-s [personagem] [número do animal]\n\
Mostra o histórico de um personagem na mesma sala ou animal desse\n\
personagem, ou seja, os últimos 10 personagens que ele matou."

func escr
  refvar r = misc:persoinfo(arg0, arg1)
  ret !r, 1
  ret !r.p_hist.linhas, arg0.msg(txtcopiamai(r.descnome2, "A") + " não matou ninguém.")
  arg0.sock.txtmais.limpar
  arg0.sock.txtmais.addfim("\b\c6Histórico de " + txtcopiamai(r.descnome2, "A") + ":\b")
  arg0.sock.txtmais.addfim(r.p_hist.ini.textolin(100))
  arg0.sock.txtmostra
