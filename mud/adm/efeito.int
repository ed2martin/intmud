classe adm_efeito
herda comando_adm_ajuda
const m_ajuda = "-t Efeitos e modificadores\n\
-m LEF Lista efeitos existentes\n\
-m CEF Cria um efeito\n\
-m EEF Edita um efeito\n\
-m AEF Apaga um ou mais efeitos\n\
-m LMOD Lista modificadores existentes\n\
-m CMOD Cria um modificador\n\
-m EMOD Edita um modificador\n\
-m AMOD Apaga um ou mais modificadores\n\
Magias e habilidades podem lançar efeitos sobre um personagem.\n\
Já os modificadores funcionam como efeitos, mas possuem menos opções.\n\
Porém, itens que agrupam também podem receber modificadores.\n\
Internamente, efeitos são objetos e modificadores são variáveis.\n\
Para um personagem ou item ser criado com um modificador, definir\n\
uma variável f_. Exemplo, no comando EITEM, colocar f_invisivel=1\n\
na opção \"Variáveis\" coloca o modificador invisivel."


classe adm_lef
herda comando_adm
const m_ajuda = "-t\n\
-s [nome]\n\
Lista os efeitos que começam com o nome especificado.\n\
Se o nome for omitido, lista todos os efeitos."

func escr
  prog p
  se !p.iniclasse("e_" + arg1)
    arg0.msg("\bNenhum efeito encontrado.")
  senao
    textotxt t
    txt100 lin
    t.addfim("\b\c6Efeito, Descrição interna\b")
    enquanto p.lin && t.linhas < 500
      t.addfim(txtcopiamai(txt2(txte(p.texto)), "A") + ", " + [p.texto]:desc)
      p.depois
    efim
    arg0.msg2(t.remove(500))
  fimse


classe adm_lmod
herda comando_adm
const m_ajuda = "-t\n\
-s [nome]\n\
Lista os modificadores que começam com o nome especificado.\n\
Se o nome for omitido, lista todos os modificadores."

func escr
  prog p
  se !p.iniclasse("f_" + arg1)
    arg0.msg("\bNenhum modificador encontrado.")
  senao
    textotxt t
    txt100 lin
    t.addfim("\b\c6Modificador, Descrição interna\b")
    enquanto p.lin && t.linhas < 500
      t.addfim(txtcopiamai(txt2(txte(p.texto)), "A") + ", " + [p.texto]:desc)
      p.depois
    efim
    arg0.msg2(t.remove(500))
  fimse


classe adm_cef
herda comando_adm
const m_ajuda = "-t\n\
-s <nome>\n\
Cria um efeito com o nome especificado.\n\
O nome deve ser composto de letras, mas pode ter espaços no meio."

func escr
  prog p
# Checa se digitou nome do efeito
  se arg1 == ""
    ret arg0.msg("Tecle o nome do efeito após CEF")
  fimse
# Checa se nome válido
  txt80 nome = txte(txtremove(arg1, "EMDSA"))
  se txtproc(txtsepara(txttroca(nome, " ", ""), "O+DOL,DOL+O"), " ") >= 0
    ret arg0.msg("Nome inválido para efeito: " + nome)
  senao inttotal(nome) > 40
    ret arg0.msg("Nome deve ter até 40 caracteres: " + nome)
  senao p.existe("e_" + nome)
    ret arg0.msg("Já existe o efeito: " + nome)
  fimse
# Cria efeito
  txt200 lin = "e_" + txts(txtmin(nome)) + "\nconfig/efeito\nherda comum_efeito"
  lin += "\nconst e_nome = \"" + txtcopiamai(nome, "A") + "\""
  prog p
  p.criar(lin)
  criar("admordena", "config/efeito")
# config:salvar
  arg0.msg("\bCriou efeito: " + nome)
  admlog(arg0, "criou efeito " + nome)


classe adm_cmod
herda comando_adm
const m_ajuda = "-t\n\
-s <nome>\n\
Cria um modificador com o nome especificado.\n\
O nome deve ser composto de letras, mas pode ter espaços no meio."

func escr
  prog p
# Checa se digitou nome do modificador
  se arg1 == ""
    ret arg0.msg("Tecle o nome do modificador após CMOD")
  fimse
# Checa se nome válido
  txt80 nome = txte(txtremove(arg1, "EMDSA"))
  se txtproc(txtsepara(txttroca(nome, " ", ""), "O+DOL,DOL+O"), " ") >= 0
    ret arg0.msg("Nome inválido para modificador: " + nome)
  senao inttotal(nome) > 40
    ret arg0.msg("Nome deve ter até 40 caracteres: " + nome)
  senao p.existe("f_" + nome)
    ret arg0.msg("Já existe o modificador: " + nome)
  fimse
# Cria modificador
  txt200 lin = "f_" + txts(txtmin(nome)) + "\nconfig/efeito\nherda comum_modif"
  lin += "\nconst e_nome = \"" + txtcopiamai(nome, "A") + "\""
  prog p
  p.criar(lin)
  criar("admordena", "config/efeito")
# config:salvar
  arg0.msg("\bCriou modificador: " + nome)
  admlog(arg0, "criou modificador " + nome)


classe adm_aef
herda comando_adm
const m_ajuda = "-t\n\
-s <nomes dos efeitos>\n\
Apaga uma ou mais efeitos, com os nomes especificados.\n\
Para apagar um efeito cujo nome contém espaços no meio, use sublinhado\n\
no lugar dos espaços. Exemplo, se o nome do efeito for Ver Invisível,\n\
você deve teclar: aef Ver_Invisivel"

func escr # Apagar efeito
  prog p
  se arg1 == ""
    ret arg0.msg("Tecle um ou mais nomes de efeitos após AEF")
  fimse
  uint16 x
  enquanto txtsub(arg1, x, 1)
    se !p.existe("e_" + txtsub(arg1, x, 1))
      ret arg0.msg("Efeito não existe: " + txtsub(arg1, x, 1))
    senao e_[txtsub(arg1, x, 1)]:interno
      ret arg0.msg("Efeito não pode ser apagado: " + txtsub(arg1, x, 1))
    fimse
    x++
  efim
  arg0.sock.tpasso = arg1
  passo(arg0.sock, "")

func passo # Confirmar que quer apagar efeito
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    uint16 x
    enquanto txtsub(arg0.tpasso, x, 1)
      p.apagar("e_" + txtsub(arg0.tpasso, x, 1))
      x++
    efim
    config:salvar
    se x < 2
      arg0.msg("Efeito apagado: " + arg0.tpasso)
      admlog(arg0, "apagou efeito " + arg0.tpasso)
    senao
      arg0.msg("Efeitos apagados: " + arg0.tpasso)
      admlog(arg0, "apagou efeitos " + arg0.tpasso)
    fimse
  senao
    arg0.passo = este
    refvar m1 = txt2(arg0.tpasso) ? "efeitos" : "efeito"
    arg0.msg("Apagar " + m1 + " " + arg0.tpasso + "? Tecle S ou N")
  fimse
  ret 1


classe adm_amod
herda comando_adm
const m_ajuda = "-t\n\
-s <nomes dos modificadores>\n\
Apaga uma ou mais modificadores, com os nomes especificados.\n\
Para apagar um modificador cujo nome contém espaços no meio, use sublinhado\n\
no lugar dos espaços. Exemplo, se o nome do modificador for Ver Invisível,\n\
você deve teclar: amod Ver_Invisivel"

func escr # Apagar efeito
  prog p
  se arg1 == ""
    ret arg0.msg("Tecle um ou mais nomes de efeitos após AEF")
  fimse
  uint16 x
  enquanto txtsub(arg1, x, 1)
    se !p.existe("f_" + txtsub(arg1, x, 1))
      ret arg0.msg("Modificador não existe: " + txtsub(arg1, x, 1))
    fimse
    x++
  efim
  arg0.sock.tpasso = arg1
  passo(arg0.sock, "")

func passo # Confirmar que quer apagar efeito
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    uint16 x
    enquanto txtsub(arg0.tpasso, x, 1)
      p.apagar("f_" + txtsub(arg0.tpasso, x, 1))
      x++
    efim
    config:salvar
    se x < 2
      arg0.msg("Modificador apagado: " + arg0.tpasso)
      admlog(arg0, "apagou efeito " + arg0.tpasso)
    senao
      arg0.msg("Modificadores apagados: " + arg0.tpasso)
      admlog(arg0, "apagou modificadores " + arg0.tpasso)
    fimse
  senao
    arg0.passo = este
    refvar m1 = txt2(arg0.tpasso) ? "modificadores" : "modificador"
    arg0.msg("Apagar " + m1 + " " + arg0.tpasso + "? Tecle S ou N")
  fimse
  ret 1


classe adm_eef
herda comando_adm
const m_ajuda = "-t\n\
-s <nome>\n\
Edita o efeito com o nome especificado."

func escr # Editar efeito
  prog p
  se arg1 == ""
    arg0.msg("Tecle o nome do efeito após EEF")
  senao !p.existe("e_" + arg1)
    arg0.msg("Efeito não existe: " + arg1)
  senao e_[txtsub(arg1, x, 1)]:interno
    arg0.msg("Efeito não pode ser editado: " + txtsub(arg1, x, 1))
  senao
    arg0.sock.var.classe1 = "e_" + txts(txtmin(arg1))
    arg0.sock.var.menufim = "menu_efeito"
    arg0.sock.m_menu(arg0.sock.var.menufim)
  fimse


classe adm_emod
herda comando_adm
const m_ajuda = "-t\n\
-s <nome>\n\
Edita o modificador com o nome especificado."

func escr # Editar modificador
  prog p
  se arg1 == ""
    arg0.msg("Tecle o nome do modificador após EMOD")
  senao !p.existe("f_" + arg1)
    arg0.msg("Modificador não existe: " + arg1)
  senao
    arg0.sock.var.classe1 = "f_" + txts(txtmin(arg1))
    arg0.sock.var.menufim = "menu_modif"
    arg0.sock.m_menu(arg0.sock.var.menufim)
  fimse


classe menu_efeito
herda comando_menu_adm
const titulo = "Efeito " + txt(var.classe1, 2)
#
const nome1 = "Nome"
const info1 = "Nome no comando Efeito"
const tipo1 = "opc_linha"
const vari1 = "e_nome"
#
const nome2 = "Descrição"
const info2 = "Descrição do efeito, para os jogadores"
const tipo2 = "opc_texto"
const vari2 = "e_desc"
#
const nome3 = "Descrição interna"
const info3 = "Uma breve descrição do que faz; aparece apenas no comando Lef"
const tipo3 = "opc_linha"
const vari3 = "desc"
#
const nome4 = "Quantidade máx."
const info4 = "Quantos efeitos desse tipo um personagem pode ter"
const tipo4 = "opc_numero"
const vari4 = "maximo"
const extr4 = "1 10"
#
const nome5 = "Condição perso"
const tipo5 = "opc_opcao"
const vari5 = "e_condicao"
const extr5 = "Nenhuma; permanente\n\
Tem pontos de vida\n\
Durante a batalha e tem pontos de vida\n\
Fora da batalha e tem pontos de vida"
const exec5 = "ajustaobj"
#
const nome6 = "Ao renascer"
const tipo6 = "opc_opcao"
const vari6 = "e_renascer"
const extr6 = "Mantém o efeito\n\Remove o efeito"
#
const nome7 = "Tipos imunes"
const info7 = "Em quais tipos de personagens esse efeito não é criado"
const tipo7 = "opc_tipos"
const vari7 = "e_tipos"
#
const nome8 = "Condição efeitos"
const info8 = "Quais efeitos impedem que esse efeito seja criado"
const tipo8 = "opc_listaefeito"
const vari8 = "e_ef_condicao"
const extr8 = "100"
#
const nome9 = "Anula efeitos"
const info9 = "Quais efeitos são anulados quando esse efeito é criado"
const tipo9 = "opc_listaefeito"
const vari9 = "e_ef_apaga"
const extr9 = "100"
#
const nome10 = "Duração"
const info10 = "Quantos décimos de segundo o efeito dura ou 0 se não expira"
const tipo10 = "opc_numero"
const vari10 = "tempo1"
const extr10 = "0 1000000"
#
const nome11 = "Duração por nível"
const info11 = "Quantos décimos de segundo dura para cada nível de quem lançou"
const tipo11 = "opc_numero"
const vari11 = "tempo2"
const extr11 = "0 100000"
#
const nome12 = "Atrib texto"
const info12 = "Aparece na frente da descrição do personagem, entre parênteses\n\
Para aparecer em baixo, adicionar um * (asterisco) na frente\n\
Exemplo: *  ... e está protegid$s por uma luz"
const tipo12 = "opc_linha"
const vari12 = "m_atribs2"
const exec12 = "atribs_dono"
#
const nome13 = "Atrib números"
const info13 = "Afetam apenas personagens"
const tipo13 = "opc_atribnum"
const vari13 = "recalc2_auto"
const exec13 = "recalc_dono"
#
const nome14 = "Atrib itens"
const info14 = "Afetam apenas itens"
const tipo14 = "opc_atribobj"
const vari14 = "recalc2_auto"
const exec14 = "recalc_dono"
#
const nome15 = "Atrib sim/não"
const tipo15 = "opc_atribbit"
const vari15 = "recalc2_auto"
const exec15 = "recalc_dono"
#
const nome16 = "Atrib ataque"
const info16 = "Afetam os danos quando o personagem ataca alguém"
const tipo16 = "opc_atribatk"
const vari16 = "recalc2_auto"
const exec16 = "recalc_dono"
#
const nome17 = "Atrib defesa"
const info17 = "Afetam os danos quando alguém ataca o personagem"
const tipo17 = "opc_atribdef"
const vari17 = "recalc2_auto"
const exec17 = "recalc_dono"
#
const nome18 = "Tempo reduzir"
const info18 = "De quantos em quantos décimos de segundo reduz algo"
const tipo18 = "opc_numero"
const vari18 = "r_tempo"
const extr18 = "0 10000"
#
const nome19 = "Reduz vida"
const tipo19 = "opc_numero"
const vari19 = "r_vida"
#
const nome20 = "Reduz mana"
const tipo20 = "opc_numero"
const vari20 = "r_mana"
#
const nome21 = "Reduz vigor"
const tipo21 = "opc_numero"
const vari21 = "r_move"
#
const nome22 = "Mensagens"
const tipo22 = "menu_efeito_msg--"
#
const nome51 = "Eventos hora"
const info51 = "Se a função cmd_hora é chamada quando a hora MUD mudar (5 minutos)"
const tipo51 = "opc_simnao"
const vari51 = "evhora"
const exec51 = "ajustaobj"
#
const nome52 = "Eventos perso"
const info52 = "Se recebe eventos do personagem que está com o efeito"
const tipo52 = "opc_simnao"
const vari52 = "evperso"
const exec52 = "ajustaobj"


classe menu_efeito_msg
herda comando_menu_adm
const titulo = "Mensagens"
const menufim = var.menufim
#
const titu1 = " * Criou"
#
const nome1 = "Perso"
const tipo1 = "opc_linha"
const vari1 = "msgini1"
#
const nome2 = "Outros"
const tipo2 = "opc_linha"
const vari2 = "msgini2"
#
const titu3 = " * Falhou"
#
const nome3 = "Perso"
const tipo3 = "opc_linha"
const vari3 = "msgfalhou1"
#
const nome4 = "Outros"
const tipo4 = "opc_linha"
const vari4 = "msgfalhou2"
#
const titu5 = " * Não teve efeito"
#
const nome5 = "Perso"
const tipo5 = "opc_linha"
const vari5 = "msgnulo1"
#
const nome6 = "Outros"
const tipo6 = "opc_linha"
const vari6 = "msgnulo2"
#
const titu7 = " * Apagou"
#
const nome7 = "Perso"
const tipo7 = "opc_linha"
const vari7 = "msgfim1"
#
const nome8 = "Outros"
const tipo8 = "opc_linha"
const vari8 = "msgfim2"
#
const titu9 = " * Ao reduzir vida/mana/vigor"
#
const nome9 = "Perso"
const tipo9 = "opc_linha"
const vari9 = "msgreduz1"
#
const nome10 = "Outros"
const tipo10 = "opc_linha"
const vari10 = "msgreduz2"


classe menu_modif
herda comando_menu_adm
const titulo = "Modificador " + txt(var.classe1, 2)
#
const nome1 = "Nome"
const info1 = "Nome que aparece no comando Lmod"
const tipo1 = "opc_linha"
const vari1 = "e_nome"
#
const nome2 = "Descrição interna"
const info2 = "Uma breve descrição do que faz; aparece apenas no comando Lmod"
const tipo2 = "opc_linha"
const vari2 = "desc"
#
const nome3 = "Atrib texto"
const info3 = "Aparece na frente da descrição do personagem, entre parênteses\n\
Para aparecer em baixo, adicionar um * (asterisco) na frente\n\
Exemplo: *  ... e está protegid$s por uma luz"
const tipo3 = "opc_linha"
const vari3 = "m_atribs2"
#
const nome4 = "Atrib números"
const info4 = "Afetam apenas personagens"
const tipo4 = "opc_atribnum"
const vari4 = "recalc2_auto"
#
const nome5 = "Atrib itens"
const info5 = "Afetam apenas itens"
const tipo5 = "opc_atribobj"
const vari5 = "recalc2_auto"
#
const nome6 = "Atrib sim/não"
const tipo6 = "opc_atribbit"
const vari6 = "recalc2_auto"
#
const nome7 = "Atrib ataque"
const info7 = "Afetam os danos quando o personagem ataca alguém"
const tipo7 = "opc_atribatk"
const vari7 = "recalc2_auto"
#
const nome8 = "Atrib defesa"
const info8 = "Afetam os danos quando alguém ataca o personagem"
const tipo8 = "opc_atribdef"
const vari8 = "recalc2_auto"
#
const nome9 = "Atualizar"
const tipo9 = "opc_modif"
const vari9 = "recalc2_auto"


classe opc_modif
herda opc_opcao
const menu = ""

func passo # Mudar o estado atual
  int32 total
  prog p
  debug d
  ref r
  refvar nome = txt(arg0.var.classe1) + " "
  d.exec = 500000
  epara p.iniherdainv("comum_perso"), p.lin, p.depois
    epara r = $[p.texto], r, r = objdepois(r)
      r.var.valor(nome) && (total += r.recalc = 1)
    efim
  efim
  epara p.iniherdainv("comum_item"), p.lin, p.depois
    epara r = $[p.texto], r, r = objdepois(r)
      r.var.valor(nome) && (total += r.recalc = 1)
    efim
  efim
  se total == 0
    arg0.msg("Nenhum personagem ou item com o modificador")
  senao total = 1
    arg0.msg("Um personagem/item atualizado")
  senao
    arg0.msg(txt(total) + " personagens/itens atualizados")
  fimse
  ret passosair(arg0)
