1. Personagens (arquivos obj/perso*.int)

Para criar um personagem
criar("nome da classe", aonde está, nível do personagem, "variáveis")
Se o nível for omitido, será 0.
Variáveis é um texto do tipo "variável=valor". Quando houver mais de uma
variável, separar por vírgula (exemplo, "v1=10,v2=20").
São criadas as variáveis correspondentes em 'textovar var' do personagem.

Personagens dos jogadores são criados da seguinte forma:
criar("jogador", aonde está, tipo1, tipo2, tipo3)

const perso = 1
1 = personagem que não batalha (classe comum_perso)
2 = personagem que batalha (classe comum_persobat)
3 = personagem que batalha e carrega animais (classe comum_persoanimal)

ref persoesc
Animal escolhido pelo personagem. Na maioria dos personagens, persoesc = este.

func persobat
Animal que recebe os ataques ao personagem. Na maioria dos personagens,
persobat = este.

func contr
Quem está controlando o personagem. Se estiver sendo controlado por outro
personagem, ele não luta sozinho.

func persodomador
A quem pertence o personagem.

func temdomador
Verdadeiro (1) se pertence a outro personagem ou falso (0) se não pertence.

func mudadomador( personagem )
Muda o domador (a quem esse personagem pertence). Se o argumento não for
personagem ou estiver ausente, passa a não pertencer a nenhum domador.
Essa função não tem efeito se estiver no comando Animal (estiver em outro
personagem).

func montar( personagem )
Monta em um personagem ou desmonta se o argumento não for personagem
ou estiver ausente.

func cabedentro( sala )
Retorna 1 se o personagem cabe na sala especificada ou 0 se não cabe.
Essa função checa o volume e a quantidade de personagens na sala.

func tipoiteminv
Retorna os tipos de item que está carregando (aparecem no comando Inventário).
É um valor numérico em hexadecimal em que cada bit corresponde a um tipo
de produto da lista em config:item_tipos, no arquivo config/config.int.

func tipoitemvestir
Retorna os tipos de item que está vestindo e empunhando.
É um valor numérico em hexadecimal em que cada bit corresponde a um tipo
de produto da lista em config:item_tipos, no arquivo config/config.int.

func positemtotal
Retorna as posições aonde pode vestir itens ou usar equipamentos, em
um texto hexadecimal.

func positemvestir
Retorna as posições em que está vestindo algum item, em um texto hexadecimal.

func objitemvestir( posições )
Retorna o primeiro item (objeto) que está em uma das posições especificadas
ou nulo se não houver nenhum item. Posições é um texto hexadecimal.

uint32 expatual
Quanta experiência possui no nível atual.

func expmax
func expmax( nível , quantas vezes renasceu )
Retorna a quantidade de experiência para subir para o próximo nível.

uint16 pnivel
Nível atual do personagem.

func pnivelmax
Nível máximo que o personagem pode atingir, ou 0 se não há um nível definido.

sav uint8 posicao
Posição do personagem:
0 = morto
1 = mortalmente ferido
2 = incapacitado
3 = fraco
4 = dormindo
5 = descansando
6 = sentado
7 = lutando
8 = em pé

const pospadr = 8
Posição padrão do personagem.

func descpos
arg0 = personagem que está consultando essa constante
Descrição quando está na sala. Apresenta uma mensagem de acordo com a posição
atual. Internamente, chama uma das constantes/funções descperso, abaixo.

const descperso0 = "$P jaz aqui."
const descperso1 = "$P está aqui mortalmente ferid$s."
const descperso2 = "$P está aqui incapacitad$s."
const descperso3 = "$P está aqui, muito frac$s."
const descperso4c = "$P dorme aqui."
const descperso4i = "$P dorme $e $o."
const descperso5c = "$P descansa aqui."
const descperso5i = "$P descansa $e $o."
const descperso6c = "$P está sentad$s."
const descperso6i = "$P está sentad$s $e $o."
const descperso6p = "$P está montad$s $e $b."
const descperso7a = "$P está lutando."
const descperso7b = "$P está lutando com você."
const descperso7c = "$P está lutando com $a."
const descperso8 = "$P está em pé aqui."
const descpersoN = "$P está aqui."
arg0 = personagem que está consultando essa constante
Descrição quando está na sala, por posição. Vide variável posicao.

func desccond
arg0 = personagem que está consultando essa constante
Retorna um texto que contém o estado atual do personagem.
Internamente, chama uma das constantes/funções desccond, abaixo.

const desccond0 = "desmaiad$s"
const desccond1 = "está à beira da morte"
const desccond2 = "está sangrando bastante"
const desccond3 = "está muito machucad$s"
const desccond4 = "está bastante machucad$s"
const desccond5 = "está um pouco machucad$s"
const desccond6 = "possui algumas escoriações"
const desccond7 = "está perfeitamente saudável"

const sexoini = 2
Sexo inicial: 0=feminino, 1=masculino, 2=aleatório
Aleatório escolhe um quando o personagem é criado.

int1 psexo
Sexo do personagem: 0=feminino, 1=masculino

const tipo1 = 0
Primeiro tipo associado ao personagem; geralmente é a raça.

const tipo2 = 0
Segundo tipo associado ao personagem; geralmente é a classe.

const tipo3 = 0
Terceiro tipo associado ao personagem.

const equip1 = 0
Se não for 0, são as posições aonde pode usar equipamentos.
Cada bit corresponde a uma posição.
Nota: é muito mais fácil alterar essa constante pela edição online.

const equip2 = 0
Adicionar essas posições no personagem.
Nota: é muito mais fácil alterar essa constante pela edição online.

const equip3 = 0
Remover essas posições no personagem.
Nota: é muito mais fácil alterar essa constante pela edição online.

sav textotxt p_hist
Histórico do personagem: quem o personagem matou.

const p_recebe = 0
arg0 = quem quer dar alguma coisa para este personagem
Se recebe itens (se podem dar itens ao personagem); 0=não pode, 1=pode.
Nos jogadores, essa constante é 1 (pode receber).

const p_naoseguir = 0
arg0 = quem quer quer seguir este personagem
Se não é possível seguir o personagem (0=podem seguir, 1=não podem).
Nos jogadores, depende da opção "config +seguir", devido à linha:
const p_naoseguir = !i.obj.jogconfig.5

const p_atktipo = 0
Tipo de ataque, quando o personagem ataca automaticamente e sem arma.
Os tipos estão definidos na constante config:atk_txt, arquivo
config/config.int.
Nota: é muito mais fácil alterar essa constante pela edição online.

const p_imortal = 0
Se é personagem imortal (0=pode morrer, 1=não pode).
Nos jogadores, depende da opção "config +imortal", devido à linha:
const p_imortal = jogconfig.20

const j_imortal = 0
Se é jogador imortal (0=não é, 1=é).
Jogadores imortais atravessam qualquer porta, comem qualquer coisa,
sempre conseguem fugir de batalha, não gastam movimentos, etc.

const p_corpo_tipo = 0
Se o corpo do personagem fica quando ele morre:
0 Não deixa corpo
1 Deixa corpo vazio
2 Deixa corpo com itens e moedas, somem com o corpo
3 Deixa corpo com itens e moedas, depois vão para sala
4 Deixa itens e moedas na sala, não deixa corpo

const p_exp = 100
arg0 = personagem que está consultando essa constante
Quanta experiência dá quando morre, em porcentagem.
Com essa opção é possível fazer alguns PNJs darem mais experiência que
outros, independente do nível.

const p_morreu1 = "$P morreu."
Mensagem quando o personagem morreu e não tem dono.

const p_morreu2 = "$P desmaiou."
Mensagem quando o personagem morreu e tem dono (percente a outro personagem).

func teclou( texto do comando )
func teclouperm( texto do comando, objeto que contém as permissões )
Chamado sempre que o personagem tecla algum comando.
Nota: na dúvida, usar a função teclou, que é mais simples.

func p_espera_exec
Pega o próximo comando da lista.

func teclouproc( texto do comando )
Processa comando, sem espera.

func podeposicao( número da posição )
Verifica se uma posição é válida para o personagem, retorna 1 se é válida
ou 0 se não é. Se a posição for "M", verifica se pode montar.

func msgposicao
Envia uma mensagem conforme a posição atual, para indicar que o que
o personagem digitou não pode ser feito.

func desccarga
Retorna texto dos personagens montados, ou um texto vazio se ninguém
está montado.

func acertapos
func acertapos(1)
Acerta posição do personagem, conforme pontos de vida e batalha.
Para checar se morreu, chamar com: acertapos(1)
Retorna o corpo do personagem, se ele morreu e ficou o corpo.

func ganahexp( valor )
func ganahexp( valor, 1 )
Personagem ganha experiência. Se valor for um número negativo, perde
experiência. Com dois argumentos, sendo que o segundo é verdadeiro
(a segunda sintaxe de ganhaexp), não avisa o personagem que ele ganhou
experiência.

func batalhaexp( valor )
Dá experiência a quem estiver atacando o personagem
Valor é o fator do ganho de experiência

func batalhafim
Encerra a batalha
Para checar se morreu, chamar com: batalhafim(1)

func atktempo
É chamado após algum tempo sem golpes, para encerrar a batalha.

func pvidaok
Se retornar verdadeiro, os pontos de vida são suficientes para o personagem
ficar vivo. Se retornar falso, o personagem deve morrer.

func morreu
func morreu( quem matou o personagem )
Executa procedimentos quando o personagem morre.
Se for fornecido o personagem, é ele quem pegará as moedas.
Retorna o corpo do personagem, se ele morreu e ficou o corpo.

func animalmais
Retorna quantos animais ainda pode adquirir no comando Animal.

func animaltot
Retorna quantos animais possui no comando Animal.

func animal2mais
Retorna quantos animais soltos pode adquirir.

func animal2tot
Retorna quantos animais estão soltos.

func msg( mensagem )
Envia mensagem para o personagem.

func msg2( mensagem )
Envia mensagem para o personagem, mas se passar de 10 linhas, envia também
a mensagem "Tecle M para mais".

func msgsom( nome do som )
Envia mensagem para tocar um som, desde que o som exista e o jogador
esteja com a configuração config +som.

func msgvis( mensagem )
Envia mensagem para o personagem, se ele estiver vendo o autor da mensagem.
Essa função funciona em conjunto com a classe mens, mais especificamente
a função: $mens.p( autor, alvo, objeto )

func msginv( mensagem )
Envia mensagem para o personagem, mesmo se o autor da mensagem estiver
invisível. Vide comentários na documentação de msgvis (logo acima).

func dentrocasa
Retorna 1 se o jogador está dentro da própria casa ou nulo se não está.
Para personagens não jogador, essa função retorna sempre nulo.

func dentrocasa( sala )
Retorna 1 se a sala pertenca a uma casa do jogador ou nulo se não pertence.
Para personagens não jogador, essa função retorna sempre nulo.

func mudaobjeto( nome da classe do personagem )
Muda o objeto desse personagem. Tecnicamente, cria um objeto de personagem,
coloca no lugar, transfere todos os animais, itens e efeitos e apaga esse
ebjeto. Retorna o objeto do novo personagem ou null se não mudou.
Nota 1: Não funciona com o objeto que representa o jogador.
Nota 2: O novo personagem deve ser do mesmo tipo (não luta/luta/usa animais).

func mudaobjdono( antigo dono, novo dono )
Transfere o personagem para outro objeto. Essa função é chamada pela função
mudaobjeto do personagem, quando o personagem passa a ser outro objeto.


2. Personagens não jogador (arquivos obj/perso*.int)

const p_captura = 0
Se pode ser capturado:
0 = Não
1 = Muito fácil
2 = Fácil
3 = Normal
4 = Difícil
5 = Muito difícil

const p_soltar = 0
Se pode ser dado ou solto:
0 = Pode-se dar e soltar
1 = Pode-se apenas soltar
2 = Não se pode dar nem soltar

const p_mover = 0
Aonde pode se movimentar:
0 = Não sai do lugar
1 = Somente na área
2 = Qualquer lugar

const p_movervel = 140
Tempo médio em décimos de segundo para ir para outra sala.

const p_agressivo = 0
func p_agressivo(personagem)
Se ataca os jogadores.
0 = Pacífico
1 = Se atacarem
2 = Sim

const p_fugir = 0
Foge de uma luta se os pontos de vida estiverem abaixo desse valor.

const p_naoresg = 0
Se não permite resgatar jogadores lutando com esse personagem.
(0=permite resgatar, 1=não permite)

const p_comecorpo = 0
Se come corpos de outros personagens (desde que esteja cordado).
(0=não come, 1=come)

const p_lembra = 0
Por quanto tempo se lembra dos jogadores que atacaram, em minutos.

const p_persegue = 0
Se deve perseguir jogadores.
(0=não, 1=se atacarem)

const p_atk_anda = 0
Se deve ir na direção de quem atacou, quando recebe ataque de outra sala.
(0=não, 1=sim)

const p_atk_desvia = 0
Se sempre desvia de ataques vindos de outras salas.
(0=não, 1=sim)

const p_atk_ajuda = ""
Lista de personagens que deverão ajudar esse personagem quando ele for
atacado. Cada linha contém o nome de uma classe sem o "p_" no começo.
Exemplo: const p_atk_ajuda = "teste005\nteste008"

const lojaini = 0
Que horas a loja abre ou o PNJ começa a ensinar.

const lojafim = 0
Que horas a loja abre ou o PNJ pára de ensinar.
Se for igual ao horário de abertura, nunca fecha.

const taxavenda = 0
arg0 = personagem que está consultando essa constante
Lucro na venda, em porcentagem (0=sem lucro; paga o valor do item).

const taxacompra = 0
arg0 = personagem que está consultando essa constante
Lucro na compra, em porcentagem (de 0=preço normal a 100=não paga pelo item).

const taxaaula = 0
arg0 = personagem que está consultando essa constante
Preço da aula em porcentagem (exemplo, 0=de graça e 100=preço da aula).

const lojaitem = ""
arg0 = personagem que está consultando essa constante
Tipos de produtos que vende. É um texto sendo que cada linha é um produto,
no seguinte formato: <item>  <nível>
Exemplo:
const lojaitem = "teste012 3\nteste013 0"

const lojainv = 0
Produtos inv: se vende os produtos listados no comando inv (0=não, 1=sim).

const lojasala = ""
Produtos sala: Nome da sala com os produtos que serão vendidos.

const lojacasa = 0
Vende casas: se compra e vende casas na área aonde está (0=não, 1=sim).

const lojachave = 0
Chaveiro: Se vende chaves e fechaduras para casas da área aonde está
(0=não, 1=sim).

const tipoitem = "0"
Tipos de produtos que compra.
É um valor numérico em hexadecimal em que cada bit corresponde a um tipo
de produto da lista em config:item_tipos, no arquivo config/config.int.
Nota: é muito mais fácil alterar essa constante pela edição online.

const lojaaula = ""
arg0 = personagem que está consultando essa constante
Aulas que ensina. É um texto sendo que cada linha é uma aula, no seguinte
formato:  <nome da variável>  <nível>
O nome da variável pode começar com:
  "h_" para habilidade, como h_Chutar
  "m_" para magia, como m_Retornar
  "i_" Para idioma, como i_Hebráico
  "e_" para extra (aparece no comando Outros)
O nível pode ser:
  1 = Iniciante
  2 = Muito básico
  3 = Básico
  4 = Intermediário
  5 = Avançado
  6 = Muito avançado
  7 = Mestre
  8 = Perito
Exemplo:
const lojaaula = "h_Chutar 3\nm_Retornar 7"

const lojanao = ""
Raças e classes de personagens com quem não negocia (não compra, não vende
e não ensina). É um texto sendo que cada linha é uma raça ou classe.
Exemplo:
const lojanao = "anão\nguerreiro"


* const p_fora = 0
NÃO ESTÁ PRONTO
Não entra em lugares fechados

* const p_pegar = 0
NÃO ESTÁ PRONTO
0 = não pega itens do chão
1 = pega itens
2 = pega somente itens de valor

* const p_nadar = 0
NÃO ESTÁ PRONTO
Pode atravessar lugares em que não se pode nadar.

mata jogadores que mataram ou roubaram outros
ataca jogadores que mataram ou roubaram outros
pega lixo
patrulha: encerra brigas
