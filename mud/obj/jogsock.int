classe jogsock
# Comunicação com o jogador
# Funções predefinidas:
# ini = objeto foi criado
# fim = objeto está sendo apagado
# info = tipo (l=local, t=telnet, p=papovox, b=bot) + espaço + extra
# infotelnet = 1 (verdadeiro) se estiver conectado via Telnet
# sendo que extra pode ser o endereço IP ou o nome da sala
# msgsock(texto) = envia mensagem para o jogador
# msgprompt = executado quando acabou de enviar as mensagens
# recebe(texto) = executado sempre que receber mensagem do jogador
# salaobj(listaobj) = adicionar na listaobj com os objetos na mesma sala
#
ref perso # Personagem controlado pelo jogador
indiceobj cnome # "un " + nome codificado
txt20 nome # Nome do personagem
txt60 nomefim # Informações da conexão, apresentada quando o usuário sair do jogo
textotxt txtmais # Texto do tecle M para mais
txt20 jogperm # Permissões do personagem (objeto $perm_[jogperm])
txt20 jogarea # Área aonde o personagem tem permissão
int1 jogconfig.32 # Configurações do personagem
txt512 ultimocom # Último comando digitado pelo usuário
textotxt comandos # Cada 2 linhas = comando em espera para ser processado + permissões
intexec execprompt # Para enviar mensagens do prompt
intinc tempojogo # Tempo da sessão
txt100 msgsom_t # Nome do último som enviado ao jogador
inttempo tempofim1 # Para sair do jogo após algum tempo sem digitar nada
int8 tempofim2 # Para sair do jogo após algum tempo sem digitar nada
textovar msgtempo1 # Próximas mensagens de msg
inttempo msgtempo2 # Tempo para enviar a próxima mensagem de msgtempo1
#
txt30 passo # Passo atual; "" se estiver jogando
txt100 tpasso # Texto usado no passo atual
textovar var # Variáveis criadas dinamicamente
textotxt teditor # Texto usado no editor
textopos leditor # Linha atual no editor
textopos leditor1 # Início de bloco
textopos leditor2 # Fim de bloco
listaobj lmonit # Lista de quem está monitorando esse jogador
listaitem imonit # Um item de lmonit
txt512 peditor # Texto sendo procurado, opção P do editor
textotxt transf # Área de transferência do editor
const msgtroca_v = ""
const msgtroca_v@_ = ", "

func ini
  jogconfig.bits = 12 # Cores(8) + acentuação(4)
  refvar t = txtsub(info, 0, 2)
  se $miscban2.banido(txt2(t))
    config:apresban2 && msg(config:apresban2)
    apagar(este)
    ret
  fimse
  refvar apres = $miscban1.banido(txt2(t)) ? config:apresban : config:apres
  apres && msg(apres)
  reinicia

func fim
  lmonit.limpar
  $mens.p(perso)
  $mens.mvis2("", perso_cfg:ini_perso_caiu)
  mudaperso(nulo)
  indiceitem ind
  ind.obj("pn " + txt2(cnome)).sock_saiu(txt1(info) == "b")
  se nomefim
    $jogsock_msg.p(este, nomefim)
    se txt(passo, 0, 4) == "ini_"
      $jogsock_msg.msg("Cancelou: $p, $c", config:naocriar_msgadm)
    senao
      $jogsock_msg.msg("Saiu: $p, $c", config:saiu_msgadm, config:saiu_msgjog)
    fimse
  fimse

func mudaperso # Muda o personagem, arg0=novo personagem
  ret perso == arg0 || arg0.sock, nulo
# Acerta variáveis
  se perso
    se arg0.jog
      arg0.jogconfig.bits = jogconfig.bits
      msg("Você retorna para " + arg0.nome)
    senao arg0
      arg0.var.z_prompt = perso.var.z_prompt
      arg0.var.z_pbprompt = perso.var.z_bprompt
      arg0.jogconfig.bits = jogconfig.bits
      msg("Você assume " + arg0.nome)
    fimse
    se !perso.jog
      perso.var.z_prompt = ""
      perso.var.z_bprompt = ""
      perso.jogconfig.bits = 0
    fimse
  fimse
# Som da sala
  perso.dono != arg0.dono && msgsom((!misc:luz ? arg0.dono.s_somnoite) ?? arg0.dono.s_som, 1)
# Indica que o jogador não controla o antigo personagem
  ref r
  epara r = perso, r, r = r.dono
    r.socktot--
  efim
  perso.sock = nulo
# Indica que o jogador controla o novo personagem
  perso = arg0
  perso.sock = este
  epara r = perso, r, r = r.dono
    r.socktot++
  efim

func reinicia # Volta ao início: pede o nome do personagem
  se nomefim
    $jogsock_msg.p(este, nomefim)
    se txt(passo, 0, 4) == "ini_"
      $jogsock_msg.msg("Cancelou: $p, $c", config:naocriar_msgadm)
    senao
      $jogsock_msg.msg("Saiu: $p, $c", config:saiu_msgadm, config:saiu_msgjog)
    fimse
    nomefim = ""
  fimse
  jogconfig.bits = 12 # Cores(8) + acentuação(4)
  cnome = "un", nome = ""
  mudaperso(nulo)
  $ini_perso1.passo(este)

func recebe # Recebeu mensagem do jogador
# Atualiza tempo para sair do MUD
  temposair
# Situações em que não se pode usar atalhos
  se arg0 == "m" && txtmais.linhas # Tecle M para mais
    lmonit && avisamonit(arg0)
    txtmostra
    ret
  senao $[passo] # Passo atual
    lmonit && avisamonit(arg0)
    txtmais.limpar
    comandos.limpar
    !$[passo].passo(este, arg0) && (passo = "")
    ret
  senao !perso # Checa se está controlando um personagem
    lmonit && avisamonit(arg0)
    cnome = "un", nome = ""
    $ini_perso1.passo(este)
    ret
  senao arg0 && arg0 == config:senhaadm # Administração
    lmonit && avisamonit(arg0)
    ret !perso.jog, msg("Primeiro precisa retornar para seu personagem")
    txt512 t1
    t1 = $perm_[jogperm].saiumsg
    t1 && msg(t1)
    jogperm = jogperm == "admin" ? "jog" : "admin"
    jogconfig.19 = $perm_[jogperm].c_ac # Canal AC
    perso.jogperm = jogperm
    perso.jogconfig.bits = jogconfig.bits
    perso.recalc = 1 # Para atualizar perso.bitver
    t1 = $perm_[jogperm].entroumsg
    t1 && msg(t1)
    se jogperm == "admin"
      t1 = "*** " + perso.nome + " virou admin."
      $misclog.cmdlog("adm " + arg0.nome + ": Virou admin")
    senao
      t1 = "*** " + perso.nome + " deixou de ser admin."
      $misclog.cmdlog("adm " + arg0.nome + ": Deixou de ser admin")
    fimse
    indiceitem item
    epara item.ini("un "), txt1(item.txt) == "un", item.depois
      refvar obj = item.obj
      obj != este && $perm_[obj.jogperm].i_admin && obj.msg(t1)
    efim
    ret
# Coloca na variável ultimocom o comando que deve executar
  senao arg0 != "!"
    ultimocom = arg0
  fimse
# Obtém os comandos, desmembra atalho do personagem
  textotxt t
  refvar a1 = perso.var.t_[txt1(ultimocom)]
  se a1
    $cmdatalho.texto = txt2(ultimocom)
    t.addfim($cmdatalho.mens(a1))
  senao
    t.addfim(ultimocom)
  fimse
# Processa comandos
  refvar perm = $perm_[jogperm] # Permissões do jogador
  debug d
  txt512 lin
  enquanto t.linhas
    d.ini
    lin = txtremove(t.remove, "ED")
    txt(lin, 0, 2) == "\b " && (lin = "\b" + txtremove(txt(lin, 1), "ED"))
    lmonit && avisamonit(lin)
    se txtcor(lin) == "m" && txtmais.linhas # Tecle M para mais
      txtmostra
    senao $[passo] # Passo atual
      txtmais.limpar
      comandos.limpar
      ret !$[passo].passo(este, txtcor(lin)), passo = ""
    senao !perso # Checa se está controlando um personagem
      txtmais.limpar
      cnome = "un", nome = ""
      $ini_perso1.passo(este)
      ret
    senao
      txtmais.limpar
      se txt(lin, 0, 1) != "\b"
        refvar atalho = perm.cmd_[txt1(lin)] # Atalho definido nas permissões
        se atalho
          $cmdatalho.texto = txttroca(txttroca(txt2(lin), "\"", "\c2\""), "\\", "\c2\\")
          t.addini($cmdatalho.adm(atalho))
          lin = txtremove(t.remove, "ED")
          txt(lin, 0, 2) == "\b " && (lin = "\b" + txtremove(txt(lin, 1), "ED"))
        fimse
      fimse
      casovar txt1(lin)
      casose "\bcmd"
      casose "\bcmdp"
      casose "\bcmdj"
      casose "\bcmdi"
        lin = txttroca(txttroca(lin, "\c1", "\""), "\c2", "\\")
      casofim
      ret recebe1(txtcor(lin), txt(lin, 0, 1) == "\b" ? $perm_admin : perm), nulo
    fimse
  efim

func recebe1 # Função recebe após todos os atalhos
# arg0 = o que o jogador digitou
# arg1 = permissões do personagem
# Retorna verdadeiro se deve cancelar os comandos do atalho
#
# Comando de administração
  refvar r = $adm_[txt1(arg0)].objcmd(perso, arg1)
  se r
    comandos.limpar
    r.escr(perso, txt2(arg0), arg1)
    ret
  fimse
# Atalhos predefinidos
  txt512 com
  casovar txt(arg0, 0, 1)
  casose "."
    prog p
    p.iniherdainv("h_cmd_chat")
    $[p.texto].v_tipo && (com = txt(p.texto, 4) + " " + txt(arg0, 1))
    sair
  casose "'"
    prog p
    p.iniherdainv("h_cmd_falar")
    p.texto && (com = txt(p.texto, 4) + " " + txt(arg0, 1))
    sair
  casose "="
    prog p
    p.iniherdainv("h_cmd_telepatia")
    p.texto && (com = txt(p.texto, 4) + " " + txt(arg0, 1))
    sair
  casose
    com = arg0
  casofim
# Comando para o persongem
  se !perso.p_espera # Checa se pode processar o comando
    perso.teclouperm(com, arg1)
    perso.p_espera < 2 && (perso.p_espera = 2)
  senao perso.atktempo # Checa se está batalhando
    comandos.limpar
    comandos.addfim(com)
    comandos.addfim(arg1)
  senao comandos.bytes < 1024 # Não chegou ao limite de comandos
    comandos.addfim(com)
    comandos.addfim(arg1)
  senao # Chegou ao limite de comandos
    msg("Aguarde")
    ret 1
  fimse

func avisamonit # Avisa quem está monitorando o personagem
# arg0 = o que o jogador digitou
  casovar passo
  casose
    listaitem i
    epara i = lmonit.ini, i, i.depois
      i.obj.msg("<" + arg0, 1), i.obj.execprompt = 1
    efim
  casose "ini_criasenha1"
  casose "ini_criasenha2"
  casose "ini_entrasenha"
  casose "ini_mudasenha1"
  casose "ini_mudasenha2"
  casose "ini_mudasenha3"
  casose "cmd_autoapagar"
  casofim

func espera_exec # Chamado por p_espera do personagem
  se comandos
    refvar com = comandos.remove(1)
    refvar perm = $[comandos.remove(1)]
    perso.teclouperm(com, perm) # Personagem processa comando
    perso.p_espera < 2 && (perso.p_espera = 2)
  fimse

func temposair # Acerta variáveis de tempo para sair do MUD
  tempofim2 = 1
  casovar txt1(info)
  casose "t" # Conectado via Papovox
  casose "p" # Conectado via Telnet
    se perso
      tempofim1 = jogconfig.20 ? 0 : 4800 # 8 * 600 (8 minutos)
    senao
      tempofim1 = 1800, tempofim2 = 0
    fimse
    ret
  casofim
  tempofim1 = 0

func tempofim1_exec
  se tempofim2
    tempofim1 = 600
    tempofim2 = 0
    msg("Você caminha em direção ao vazio.")
  senao
    msg("Muito tempo sem digitar.")
    apagar(este)
    indiceitem ind
    apagar(ind.obj("pn " + txt2(cnome)))
  fimse

func msg2 # Mensagem grande para o jogador
  txtmais.limpar
  txtmais.addfim(arg0)
  txtmostra

func txtmostra # Mostra próximo bloco de txtmais
# Via bot, o chat corta a mensagem em aproximadamente 10 linhas
# Conectado diretamente, até 2048 bytes; 20 linhas é uma margem segura
  refvar lin = txt1(info) == "b" ? 10 : 20
  textopos pos = txtmais.ini
  epara pos.depois(lin), pos.linha > 1 && pos.byte >= 2000, pos.antes
  efim
  se !pos.lin
    msg(txtmais.remove(lin))
  senao
    pos.linha >= lin && pos.antes
    msg(txtmais.remove(pos.linha) + "\nTecle M para mais")
  fimse

func msg # Envia mensagem
# arg0=mensagem
# arg1 é verdadeiro se deve apenas enviar a mensagem
  textotxt t
  t.addfim(arg0)
  textopos p = t.ini
# Mensagens enviadas depois de um tempo, com "\d+" seguido do tempo
  se p.txtproc("\n\d+") >= 0
    textopos p2
    uint32 agora = msgtempo1.ini ? msgtempo1.ini - msgtempo2 : 1000000000
    uint32 tempo = agora
    enquanto p.lin
      refvar num1 = txt1(p.texto(2, 8))
      p.mudar("", 0, inttotal(num1) + 3)
      tempo += intmax(1, intmin(600, num1))
      p2 = p, p2.depois, p2.txtproc("\n\d+") < 0 && (p2 = t.fim)
      refvar linhas = p2.linha - p.linha
      msgtempo1.[tempo] = msgtempo1.[tempo] + "\n" + p.textolin(linhas)
      p.remove(linhas)
    efim
    msgtempo2 = msgtempo1.ini ? msgtempo1.ini - agora
    p = t.ini
  fimse
# Sons
  enquanto p.txtproc("\d=") >= 0
    refvar ini = p.txtproc("\d=")
    refvar som = txt(txt1(p.texto(ini, 80)), 2)
    p.mudar("", ini, inttotal(som) + 3)
    !p.texto(0, 1) && p.remove
    casovar txt1($som_[som].tipo)
    casose "2" # Música contínua
      continuar !(jogconfig.23 || jogconfig.24) || msgsom_t == som
      msgsom_t = som
      p.mudar($som_[som].var.som[jogconfig.24][jogconfig.23] + "\n", 0, 0)
      sair
    casose "1" # Música de fundo
      continuar !(jogconfig.23 || jogconfig.24)
      msgsom_t = som
      p.mudar($som_[som].var.som[jogconfig.24][jogconfig.23] + "\n", 0, 0)
      sair
    casose "0" # Efeito
      continuar !(jogconfig.13 || jogconfig.14)
      p.mudar($som_[som].var.som[jogconfig.14][jogconfig.13] + "\n", 0, 0)
    casofim
  efim
  ret !t.linhas, nulo
# Monitoramento e prompt
  se arg1
  senao lmonit
    execprompt = 1
    listaitem i
    epara i = lmonit.ini, i, i.depois
      i.obj.msg(">" + arg0, 1), i.obj.execprompt = 1
    efim
  senao
    execprompt = 1
  fimse
# Configuração do jogador
  casovar jogconfig.bits & 12
  casose "0" # -CORES -ACENTO
    ret msgsock(txtremove(vartrocacod(t.remove(1000), "\d", "msgtroca_"), "C7"))
  casose "4" # +CORES -ACENTO
    ret msgsock(txtremove(vartrocacod(t.remove(1000), "\d", "msgtroca_"), "7"))
  casose "8" # -CORES +ACENTO
    ret msgsock(txtremove(vartrocacod(t.remove(1000), "\d", "msgtroca_"), "C"))
  casose "12" # +CORES +ACENTO
    ret msgsock(vartrocacod(t.remove(1000), "\d", "msgtroca_"))
  casofim

func msgtempo2_exec # Envia mensagens pendentes depois de um tempo
  se msgtempo1.ini
    refvar m1 = msgtempo1.[msgtempo1.ini]
    refvar m2 = txt(m1, 1)
    uint32 agora = msgtempo1.ini
    m1 = "", msgtempo2 = msgtempo1.ini ? msgtempo1.ini - agora, msg(m2)
  fimse

func msgsom # Envia mensagem
# arg0=nome do som
# arg1 é verdadeiro se não deve repassar para quem estiver monitorando
  ret !arg0, nulo
  se !arg1 && lmonit
    listaitem i
    epara i = lmonit.ini, i, i.depois
      i.obj.msgsom(arg0, 1)
    efim
  fimse
# Som
  txt200 lin
  epara lin = arg0, txt1(lin), lin = txt2(lin)
    refvar som = txt1(lin)
    casovar txt1($som_[som].tipo)
    casose "2" # Música contínua
      continuar !(jogconfig.23 || jogconfig.24) || msgsom_t == som
      msgsom_t = som
      msgsock($som_[som].var.som[jogconfig.24][jogconfig.23])
      continuar
    casose "1" # Música de fundo
      continuar !(jogconfig.23 || jogconfig.24)
      msgsom_t = som
      msgsock($som_[som].var.som[jogconfig.24][jogconfig.23])
      continuar
    casose "0" # Efeito
      continuar !(jogconfig.13 || jogconfig.14)
      msgsock($som_[som].var.som[jogconfig.14][jogconfig.13])
    casofim
  efim

func execprompt_exec
  msgprompt
  se passo || !perso
  senao perso.atkenv
    ret !jogconfig.7, j_t_prompt
    refvar t1 = $mens_prompt.mens(perso.var.z_bprompt, perso) + "\b"
    msg(t1, 1)
  senao
    ret !jogconfig.6, j_t_prompt
    refvar t1 = $mens_prompt.mens(perso.var.z_prompt, perso) + "\b"
    msg(t1, 1)
  fimse

const m_menu = $[arg0].passo(este, "\b")


classe ini_perso1
# Entrando no jogo: digitar o nome do personagem
const iniclasse = !$[arg0] && criar(arg0)

func passo
  indiceitem ind
  txt20 texto
  arqsav sav1
  arg0.passo = este, arg0.tpasso = arg0.nome = arg0.cnome = ""
  casovar txt1(arg0.info)
  casose "t" # Conectado via Papovox
  casose "p" # Conectado via Telnet
    arg0.tempofim1 = 600
  casofim
  texto = txts(txtnome(arg1))
  se !arg1
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_perso1 + "\cn")
  senao inttotal(arg1) < 3 || inttotal(arg1) > 16
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_perso_caract)
  senao !misc:nomeperso(arg1)
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_perso_invalido)
  senao sav1.existe("sav1/" + texto + ".sav") # Carregar jogo salvo
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_perso_existe, txtmaimin(arg1))
    arg0.tpasso = txtmaimin(arg1)
    $ini_entrasenha.passo(arg0)
  senao ind.obj("un " + texto)
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_perso_uso)
  senao # Criar personagem
    refvar t = arg0.info
    se txt1(t) != "l" && $miscban1.banido(txt2(t))
      arg0.msg(config:apresban)
      txt1(t) != "b" && apagar(arg0)
    senao $admnomesnao.nomes.n_[texto] # Checa se nome permitido
      $jogsock_msg.msgsock(arg0, perso_cfg:ini_perso_perm, txtmaimin(arg1))
    senao
      arg0.cnome = "un " + texto
      arg0.nome = txtmaimin(arg1)
      $ini_perso2.passo(arg0)
    fimse
  fimse
  ret 1


classe ini_perso2
const iniclasse = !$[arg0] && criar(arg0)

func passo
  se arg1 == "N"
    $ini_perso1.passo(arg0)
  senao arg1 == "S"
    se config:salvacria
      $ini_criasenha1.passo(arg0)
    senao config:email
      $ini_email1.passo(arg0)
    senao
      $ini_sexo1.passo(arg0)
    fimse
    arg0.nomefim = arg0.info
    $jogsock_msg.p(arg0, arg0.nomefim)
    $jogsock_msg.msg("Criando: $p, $c", config:criar_msgadm)
  senao
    arg0.passo = este
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_perso_confirma, arg0.nome)
  fimse
  ret 1


classe ini_criasenha1
# Digitar a senha ao criar personagem
const iniclasse = !$[arg0] && criar(arg0)

func passo
  arg0.passo = este
  se !arg1
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_criar1 + "\cm", arg0.nome)
  senao inttotal(arg1) < 5 || inttotal(arg1) > 16
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_inv1, arg0.nome)
  senao intsenha(arg1) == 3
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_inv2, arg0.nome)
  senao intsenha(arg1)
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_inv3, arg0.nome)
  senao
    arg0.var.j_senha = arg1
    $ini_criasenha2.passo(arg0)
  fimse
  ret 1


classe ini_criasenha2
# Repetir a senha ao criar personagem
const iniclasse = !$[arg0] && criar(arg0)

func passo
  arg0.passo = este
  se !arg1
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_repetir1, arg0.nome)
  senao arg1 !== arg0.var.j_senha
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_diferente1, arg0.nome)
    arg0.var.limpar("j_")
    $ini_perso1.passo(arg0)
  senao
    config:email ? $ini_email1.passo(arg0) : $ini_sexo1.passo(arg0)
  fimse
  ret 1


classe ini_email1
# Digitar o e-mail
const iniclasse = !$[arg0] && criar(arg0)

func passo
  arg0.passo = este
  txt100 lin.3
  se !arg1
    se config:email == 1
      $jogsock_msg.msgsock(arg0, perso_cfg:ini_email1 + "\cn")
    senao
      $jogsock_msg.msgsock(arg0, perso_cfg:ini_email2 + "\cn")
    fimse
  senao arg1 == "n" && config:email == 1
    $ini_sexo1.passo(arg0)
  senao txtproc(arg1, " ") >= 0
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_email_espaco)
  senao txtremove(arg1, "7") !== arg1 || lin.separar(arg1, "@") != 2
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_email_inv)
  senao lin.0 == "" || txtfim(lin.1, 1) == "." || txtproc(lin.1, ".") <= 0
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_email_inv)
  senao
    arg0.var.j_email = arg1
    $ini_sexo1.passo(arg0)
  fimse
  ret 1


classe ini_sexo1
# Digitar H ou M
const iniclasse = !$[arg0] && criar(arg0)

func passo
  arg0.passo = este
  se arg1 != "H" && arg1 != "M"
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_sexo1)
    ret 1
  fimse
  arg0.var.j_sexo = arg1 == "H" # 0=feminino, 1=masculino
  ret $ini_raca1.passo(arg0)


classe ini_raca1
# Começa a escolha de raça, classe e subclasse
const iniclasse = !$[arg0] && criar(arg0)

func passo
  arg0.tpasso = 1
  ret $ini_raca2.passo(arg0)


classe ini_raca2
# Escolhe raça, classe e subclasse
const iniclasse = !$[arg0] && criar(arg0)

func passo
  arg0.passo = este
  ret !passo1(arg0, arg1), 1
  enquanto passo1(arg0, "")
  efim
  ret 1

func passo1
  txt100 lin
  prog p
  refvar tpasso = arg0.tpasso
# Informações da raça
  se txt2(tpasso)
    se arg1 == "S"
      ret escolheu(arg0)
    senao arg1 == "N"
      tpasso = txt1(tpasso)
      ret 1
    senao
      $jogsock_msg.msgsock(arg0, perso_cfg:ini_tipo[txt1(tpasso)]_quer)
      ret 0
    fimse
  fimse
# Obtém a lista de raças/classes/subclasses e checa se escolheu alguma
  arg0.txtmais.limpar
  epara p.iniclasse("t_"), p.lin, p.depois
    refvar r = $[p.texto]
    continuar txt(r.menu) != tpasso
    se !r.racas || tpasso < 2
    senao txtproclin(r.racas, arg0.var.j_tipo1) < 0
      continuar
    fimse
    continuar r.sexo && arg0.var.j_sexo != r.sexo - 1
    se !r.classes || tpasso < 3
    senao txtproclin(r.classes, arg0.var.j_tipo2) < 0
      continuar
    fimse
    refvar nome = arg0.var.j_sexo == "0" ? r.nome2 ?? r.nome
    arg0.txtmais.addfim(txt(arg0.txtmais.linhas + 1) + ". " + nome)
    lin = p.texto
    continuar txt(arg1) != txt(arg0.txtmais.linhas)
    arg0.txtmais.limpar
    tpasso += " " + p.texto
    arg0.msg2(arg0.var.j_sexo == "0" ? r.desc2 ?? r.desc ?? nome)
    ret 1
  efim
# Uma ou nenhuma: escolhe automaticamente
  se arg0.txtmais.linhas <= 1
    arg0.txtmais.limpar
    tpasso += " " + lin
    ret escolheu(arg0)
# Mais de uma raça: apresenta o menu
  senao
    lin = int(tpasso) == 1 ? "raça" : int(tpasso) == 2 ? "classe" : "subclasse"
    refvar msg = perso_cfg:ini_tipo[txt1(tpasso)]_[arg1 ? "inv" : "esc"]
    arg0.txtmais.addini($jogsock_msg.txtsock(arg0, msg))
    arg0.txtmostra
    ret 0
  fimse

func escolheu # Jogador fez a escolha
# arg0 = personagem
# txt1(arg0.tpasso) = 1 se raça, 2 se classe, 3 se subclasse
# txt2(arg0.tpasso) = nome da classe t_ alguma coisa
# Retorna 1 se deve fazer mais uma escolha: se txt1(arg0.tpasso)<=3
  arg0.var.j_tipo[txt1(arg0.tpasso)] = txt(txt2(arg0.tpasso), 2)
  arg0.tpasso = int(arg0.tpasso) + 1
  ret arg0.tpasso <= 3, 1
  arg0.var.j_criarperso_ = 1
  $config_menuentra.v_tipo > 1 ? $config_menuentra.passo(arg0) : $ini_entrajogo.passo(arg0)
  ret 0


classe ini_entrasenha
# Entrar com a senha para carregar jogo salvo
const iniclasse = !$[arg0] && criar(arg0)
sav textovar var # Para carregar dados do jogo salvo
sav uint16 pnivel
sav int1 psexo # Sexo do personagem: 0=feminino, 1=masculino
sav txt40 tipo1
sav txt40 tipo2
sav txt40 tipo3

func passo
  indiceitem ind
  txt20 texto = txts(txtnome(arg0.tpasso))
  arqsav sav1
  arg0.passo = este
  se !arg1
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_entrar1 + " \cm", arg0.nome)
    ret 1
  senao arg1 == "z"
    arg0.nome = ""
    ret $ini_perso1.passo(arg0)
  senao !sav1.senha("sav1/" + texto + ".sav", arg1)
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_entrar2, arg0.nome)
    casovar txt1(arg0.info)
    casose "t" # Conectado via Papovox
    casose "p" # Conectado via Telnet
    casose "h" # Conectado via navegador
      apagar(arg0)
      ret 1
    casofim
    ret $ini_perso1.passo(arg0)
  fimse
# Desconecta outro jogador usando o mesmo personagem
  se 1
    refvar r = ind.obj("un " + texto)
    casovar txt1(r.info)
    casose "t" # Conectado via Papovox
    casose "p" # Conectado via Telnet
    casose "h" # Conectado via navegador
      apagar(r)
      r.mudaperso(nulo)
      $jogsock_msg.msgsock(r, perso_cfg:ini_usarperso, arg0.info)
      r.nomefim = ""
      r.cnome = ""
      arg0.var.z_hist_falar = r.var.z_hist_falar
      arg0.var.z_hist_gritar = r.var.z_hist_gritar
      arg0.var.z_hist_gchat = r.var.z_hist_gchat
      arg0.var.z_hist_sussurrar = r.var.z_hist_sussurrar
      arg0.var.z_hist_telepatia = r.var.z_hist_telepatia
    casose ""
      sair
    casose
      $jogsock_msg.msgsock(r, perso_cfg:ini_usarperso, arg0.info)
      r.reinicia
    casofim
  fimse
# Reconectar no mesmo personagem
  se ind.obj("pn " + texto)
    arg0.passo = ""
    arg0.jogconfig.bits = ind.obj("pn " + texto).jogconfig.bits # Acerta config de som
    arg0.mudaperso(ind.obj("pn " + texto))
    arg0.nome = arg0.perso.nome
    arg0.cnome = "un " + texto
    arg0.perso.sock_entrou # Indica que o objeto sock voltou
    arg0.jogperm = arg0.perso.jogperm
    arg0.jogarea = arg0.perso.jogarea
    arg0.temposair # Acerta tempo para sair do MUD
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_reconectando + "\cn", arg0.nome)
    $mens.p(arg0.perso)
    $mens.mvis2("", perso_cfg:ini_perso_reconectou)
    txt200 lin
    arg0.nomefim = arg0.info
    $jogsock_msg.p(arg0, arg0.nomefim, arg0.perso.pnivel, arg0.perso.var.z_moedas)
    $jogsock_msg.msg("Entrou: $p, $c", config:entrou_msgadm, config:entrou_msgjog)
    refvar alvo = arg0.perso.atkenv.objlista
    se !alvo
      arg0.perso.teclou("olhar")
    senao !alvo.visivel(arg0.perso)
      $jogsock_msg.msgsock(arg0, perso_cfg:ini_lutando1)
    senao
      $jogsock_msg.msgsock(arg0, perso_cfg:ini_lutando2, txtcopiamai(alvo.descnome2, "A"))
    fimse
# Carrega personagem ou vai para o menu de entrada com alguns dados do personagem
  senao
    arg0.nome = arg0.tpasso
    arg0.cnome = "un " + texto
    arg0.var.j_senha = arg1
    arg0.var.j_criarperso_ = 0
    se $config_menuentra.v_tipo
      listaobj l1
      l1.addfim(este)
      sav1.ler("sav1/" + texto + ".sav", l1, 1)
      arg0.var.j_email = var.z_email
      arg0.var.j_nivel_ = pnivel
      arg0.var.j_sexo = psexo
      arg0.var.j_tipo1 = tipo1
      arg0.var.j_tipo2 = tipo2
      arg0.var.j_tipo3 = tipo3
      var.limpar, pnivel = 0, tipo1 = tipo2 = tipo3 = ""
      $config_menuentra.passo(arg0)
    senao
      $ini_entrajogo.passo(arg0)
    fimse
  fimse
  ret 1


classe ini_mudasenha1
# Digitar a senha atual para mudar a senha
const iniclasse = !$[arg0] && criar(arg0)

func passo
  arg0.passo = este
  se !arg1
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_atual1, arg0.nome)
  senao arg1 == "z"
    arg0.passo = ""
    arg0.msg("Cancelado")
  senao
    arqsav sav1
    refvar p = arg0.perso
    se p.senhacod ? !sav1.senhacod(arg1, p.senha) : arg1 !== p.senha
      $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_atual2, arg0.nome)
      arg0.passo = ""
    senao
      $ini_mudasenha2.passo(arg0)
    fimse
  fimse
  ret 1


classe ini_mudasenha2
# Digitar a nova senha
const iniclasse = !$[arg0] && criar(arg0)

func passo
  arg0.passo = este
  se !arg1
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_mudar1, arg0.nome)
  senao arg1 == "z"
    arg0.passo = ""
    arg0.msg("Cancelado")
  senao inttotal(arg1) < 5 || inttotal(arg1) > 16
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_inv1, arg0.nome)
  senao intsenha(arg1) == 3
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_inv2, arg0.nome)
  senao intsenha(arg1)
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_inv3, arg0.nome)
  senao
    arg0.tpasso = arg1
    $ini_mudasenha3.passo(arg0)
  fimse
  ret 1


classe ini_mudasenha3
# Repetir a senha digitada
const iniclasse = !$[arg0] && criar(arg0)

func passo
  arg0.passo = este
  se !arg1
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_repetir1, arg0.nome)
  senao arg0.tpasso !== arg1
    $jogsock_msg.msgsock(arg0, perso_cfg:ini_senha_diferente2, arg0.nome)
    arg0.passo = ""
  senao
    arqsav sav1
    arg0.perso.senha = sav1.senhacod(arg1)
    arg0.perso.senhacod = arg0.perso.senha != "" # Se a senha está codificada
    !arg0.perso.senhacod && (arg0.perso.senha = arg1)
    se arg0.perso.salvar
      $jogsock_msg.msgsock(arg0, perso_cfg:ini_salvar_sim, arg0.nome)
    senao
      $jogsock_msg.msgsock(arg0, perso_cfg:ini_salvar_nao, arg0.nome)
    fimse
    arg0.passo = ""
  fimse
  ret 1


classe ini_menuentra
# Menu antes de entrar no jogo
const m_menu = "Bemvind$artigo ao MUD\n\
$Nome, nível $nivel, raça/classe $tipo1 $tipo2 $tipo3\n\
Escolha uma opção:\n\
1. Entrar no jogo\n\
2. Ler a história deste mundo\n\
3. Desconectar do jogo"
const v_jogar = "1"
const v_sair = "3"
const v_texto1 = "2"
const m_texto1 = "Em construção."
const m_genero0 = "mulher"
const m_genero1 = "homem"
const admordem = "v_tipo m_menu m_menubot v_jogar v_sair\n\
v_texto1 m_texto1 v_texto2 m_texto2 v_texto3 m_texto3 m_genero0 m_genero1"
#
ref perso
const opc_@g = "$"
const opc_nome = txtcopiamai(perso.nome, intchr(arg0) < 95 ? "A" : "")
const opc_genero = txtcopiamai(m_genero[perso.var.j_sexo], intchr(arg0) < 95 ? "A" : "")
const opc_tipo1 = o_tipo(arg0, perso.var.j_tipo1)
const opc_tipo2 = o_tipo(arg0, perso.var.j_tipo2)
const opc_tipo3 = o_tipo(arg0, perso.var.j_tipo3)
const opc_nivel = perso.var.j_nivel_
const opc_email = perso.var.j_email

func opc_artigo
  ret txtcopiamai(perso.var.j_sexo == "0" ? "a" : "o", intchr(arg0) < 95 ? "A" : "")

func o_tipo
  refvar t1 = perso.var.j_sexo == "0" ? $t_[arg1].nome2 ?? $t_[arg1].nome
  ret txtcopiamai(t1, intchr(arg0) < 95 ? "A" : "")

func iniclasse
  ret arg0 != "ini_menuentra", !$[arg0] && criar(arg0)
  prog p
  ret p.existe("config_menuentra"), nulo
  p.criar("config_menuentra\nconfig/config\nherda " + arg0)
  misccriar:add("config_menuentra")

func mostramenu
  perso.msg2(vartrocacod(txt1(info) == "b" ? m_menubot : m_menu, "$", "opc_"))

func passo
  arg0.passo = este
  perso = arg0
  se arg1 == ""
    mostramenu
  senao arg1 == v_jogar
    $ini_entrajogo.passo(arg0)
  senao arg1 == v_sair
    casovar txt1(arg0.info)
    casose "t" # Conectado via Papovox
    casose "p" # Conectado via Telnet
    casose "h" # Conectado via navegador
      apagar(arg0)
      sair
    casose "l" # Jogando localmente
      $miscsav.salvartudo
      terminar
    casose "b" # Como bot
      arg0.reinicia
    casofim
  senao arg1 == v_texto1 && m_texto1
    arg0.msg2(vartrocacod(m_texto1, "$", "opc_"))
  senao arg1 == v_texto2 && m_texto2
    arg0.msg2(vartrocacod(m_texto2, "$", "opc_"))
  senao arg1 == v_texto3 && m_texto3
    arg0.msg2(vartrocacod(m_texto3, "$", "opc_"))
  senao
    mostramenu
  fimse
  ret 1


classe ini_entrajogo
# Entrar no jogo: cria ou carrega personagem
const iniclasse = !$[arg0] && criar(arg0)

func passo
  arg0.passo = ""
  arg0.var.j_criarperso_ ? criar_perso(arg0) : carregar_perso(arg0)
  arg0.var.limpar("j_")

func criar_perso # Cria personagem
# arg0 = objeto jogsock do jogador
  arqsav sav1
  arg0.jogconfig.bits = config:jogconfig # Configurações iniciais
  $jogsock_msg.msgsock(arg0, perso_cfg:ini_iniciando, arg0.nome)
  refvar v = arg0.var
  arg0.mudaperso(criar("jogador", nulo, v.j_tipo1, v.j_tipo2, v.j_tipo3))
  refvar p = arg0.perso
  p.cnome = "pn " + txt2(arg0.cnome)
  p.nome = arg0.nome
  p.jogconfig.bits = arg0.jogconfig.bits
  p.psexo = arg0.var.j_sexo
  p.senha = arg0.var.j_senha ? sav1.senhacod(arg0.var.j_senha) : ""
  p.senhacod = p.senha != "" # Se a senha está codificada
  !p.senhacod && (p.senha = arg0.var.j_senha)
  p.var.z_email = arg0.var.j_email
  refvar salaini = $t_[p.tipo1].salaini ?? $t_[p.tipo2].salaini ?? $t_[p.tipo3].salaini
  p.mudadono(salaini ?? config:salaini)
  arg0.temposair # Acerta tempo para sair do MUD
  arg0.jogperm = config:autorizar ? "autorizar" : "jog"
  p.jogperm = arg0.jogperm
  se p.senha && !$perm_[arg0.jogperm].c_salvar
    !p.salvar && $jogsock_msg.msgsock(arg0, perso_cfg:ini_salvar_nao, arg0.nome)
  fimse
  $jogsock_msg.p(arg0, arg0.nomefim, p.pnivel, p.var.z_moedas)
  $jogsock_msg.msg("Criou: $p, $c", config:criou_msgadm, config:criou_msgjog)
  $mens.p(p)
  $mens.mvis2("", perso_cfg:ini_perso_entrou)
  ret 1

func carregar_perso # Carrega personagem
# arg0 = objeto jogsock do jogador
  txt20 texto = txts(txtnome(arg0.tpasso))
# Primeiro cria personagem
  arg0.mudaperso(criar("jogador"))
  arg0.perso.cnome = "pn " + texto
  arg0.perso.nome = arg0.nome
  arg0.perso.senha = sav1.senhacod(arg0.var.j_senha)
  arg0.perso.senhacod = arg0.perso.senha != "" # Se a senha está codificada
  !arg0.perso.senhacod && (arg0.perso.senha = arg0.var.j_senha)
  arg0.var.j_senha = ""
# Carrega personagem
  arqsav sav1
  listaobj l1
  l1.addfim(arg0.perso)
  sav1.ler("sav1/" + texto + ".sav", l1)
  arg0.nome = arg0.perso.nome
  arg0.jogconfig.bits = arg0.perso.jogconfig.bits
  refvar perm = arg0.perso.jogperm
  (!perm || !$perm_[perm]) && (perm = "jog")
  arg0.jogperm = perm
  arg0.jogarea = arg0.perso.jogarea
  arg0.perso.tseguir = 0
# Acerta variáveis
  listaitem item
  debug d
  epara item = l1.ini, item, item.depois
    d.ini, item.obj.ajustaobj
  efim
  epara item = l1.fim, item, item.antes
    d.ini
    ref obj = item.obj
    obj.jog && obj.ajustajog
    obj.item == 2 && !obj.objtot && (obj.objtot = 1)
    obj.var.limpar("d_", "j_")
    obj.ajustapeso, obj.acertapos, obj.acertanumero, obj.recalc = 1
  efim
  epara item = arg0.perso.dentro2.ini, item, item.depois
    continuar !item.obj.perso || item.obj.var.z_dono
    item.obj.var.z_dono = arg0.perso.descnome2
    item.obj.var.z_pnivel = item.obj.pnivel
  efim
# Muda de sala e volta ao jogo
  arg0.perso.p_espera = 2 # Para processar um comando do jogador só após mudar de sala
  criar("jogsock_retorna", arg0.perso, $[arg0.perso.salanome], l1) # Para mudar de sala
  $jogsock_msg.msgsock(arg0, perso_cfg:ini_continuando + "\cn", arg0.nome)
  arg0.nomefim = arg0.info
  $jogsock_msg.p(arg0, arg0.nomefim, arg0.perso.pnivel, arg0.perso.var.z_moedas)
  $jogsock_msg.msg("Entrou: $p, $c", config:entrou_msgadm, config:entrou_msgjog)


classe jogsock_msg
# Mensagens de jogador entrando no MUD ou saindo:
# $jogsock_msg.p(objeto jogsock, texto conexão, texto nível, texto moedas)
# $jogsock_msg.msg(mensagem log, mensagem admin, mensagem jogadores)
#
# Mensagem de jogsock:
# $jogsock_msg.msgsock(objeto jogsock, mensagem, texto de $m)
#
# Obter texto da mensagem de jogsock (retorna o texto:
# $jogsock_msg.txtsock(objeto jogsock, mensagem, texto de $m)
#
const iniclasse = !$[arg0] && criar(arg0)
txt100 m_p # Personagem
txt100 m_c # Conexão com o MUD
txt10 m_n # Nível do personagem
txt30 m_m # Quantidade de moedas
const m_@g = "$"
ref obj # Personagem
txt100 s_m # Texto de msgsock()
const s_@g = "$"

func p # Preenche os dados do personagem
  obj = arg0, m_p = arg0.nome, m_c = arg1, m_n = arg2, m_m = arg3

func msg # Envia mensagem de entrando ou saindo
# arg0 = mensagem para o log
# arg1 = mensagem para administradores
# arg2 = mensagem para jogadores
  $misclog.entrou(vartrocacod(arg0, "$", "m_"))
  refvar sock = obj
  refvar adm = vartrocacod(arg1, "$", "m_")
  refvar jog = !sock.jogconfig.17 ? vartrocacod(arg2, "$", "m_")
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    continuar item.obj == sock
    refvar i_entrando = $perm_[item.obj.jogperm].i_entrando
    se i_entrando == 2
      adm && item.obj.msg(adm)
    senao i_entrando == 1 && jog
      item.obj.msg(jog)
    fimse
  efim

func msgsock # Envia mensagem de jogsock
  s_m = arg2
  arg0.msg(vartrocacod(arg1, "$", "s_"))

func txtsock # Envia mensagem de jogsock
  s_m = arg2
  ret vartrocacod(arg1, "$", "s_")


classe jogsock_retorna
# Coloca o jogador na sala em que estava, logo após entrar no MUD
# Chamar com:
# criar("jogsock_retorna", personagem, sala, lista de objetos do personagem)
ref perso
ref sala
listaobj l
intexec ex1
intexec ex2

func ini
  perso = arg0, sala = arg1, l.addfim(arg2), ex1 = 1
# telatxt t
# t.msg("Perso " + arg0 + " sala " + arg1 + "\n")

func ex1_exec # Coloca o jogador em uma sala
  ex2 = 1
  ref s = ref(sala.s_voltar(perso)) ?? sala ?? config:salasav
  s = perso.cabedentro(s) ? s : config:salasav
  listaitem item
  debug d
  epara item = l.fim, item, item.antes
    d.ini, !item.obj.dono && item.obj.mudadono(s)
  efim
  !perso.dono && perso.mudadono(s)
  temposair # Acerta tempo para sair do MUD
  $mens.p(perso)
  $mens.mvis2("", perso_cfg:ini_perso_entrou)

func ex2_exec # Coloca na sala se necesário e chama evento cmd_sav dos objetos
  ex2 = 1
  ref r
  debug d
  enquanto l.objfim
    r = l.objfim, l.fim.remove, r.cmd_sav(perso), d.ini
  efim
  apagar(este)


classe cmdatalho
# Para processar o comando atalho
const iniclasse = !$[arg0] && criar(arg0)
txt512 texto # O que o usuário digitou
# Comandos comuns
const mens = vartrocacod(arg0, "$", "m_")
# Comandos de administração
const adm = "\b" + vartrocacod(arg0, "$", "a_")
#
const m_0 = texto
const m_1 = txt1(m_0)
const m_2 = txtsub(texto, 1, 1)
const m_3 = txtsub(texto, 2, 1)
const m_4 = txtsub(texto, 3, 1)
const m_5 = txtsub(texto, 4, 1)
const m_6 = txtsub(texto, 5, 1)
const m_7 = txtsub(texto, 6, 1)
const m_8 = txtsub(texto, 7, 1)
const m_9 = txtsub(texto, 8, 1)
const m_S = txtsub(texto, 1)
const m_T = txtsub(texto, 2)
const m_Z = "\n"
const m_@g = "$"
#
# Em cmd, cmdp, cmdj e cmdi: \c1 vira aspas, \c2 vira barra invertida
# Nos outros comandos, \c1 e \c2 são eliminados
const a_0 = "\c1" + texto + "\c1"
const a_1 = "\c1" + txt1(texto) + "\c1"
const a_2 = "\c1" + txtsub(texto, 1, 1) + "\c1"
const a_3 = "\c1" + txtsub(texto, 2, 1) + "\c1"
const a_4 = "\c1" + txtsub(texto, 3, 1) + "\c1"
const a_5 = "\c1" + txtsub(texto, 4, 1) + "\c1"
const a_6 = "\c1" + txtsub(texto, 5, 1) + "\c1"
const a_7 = "\c1" + txtsub(texto, 6, 1) + "\c1"
const a_8 = "\c1" + txtsub(texto, 7, 1) + "\c1"
const a_9 = "\c1" + txtsub(texto, 8, 1) + "\c1"
const a_S = "\c1" + txtsub(texto, 1) + "\c1"
const a_T = "\c1" + txtsub(texto, 2) + "\c1"
const a_Z = "\n\b"
const a_@g = "$"
