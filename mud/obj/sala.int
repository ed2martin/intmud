classe area
inttempo resetcont # Tempo para o próximo reset
const iniclasse = arg0 != "area" && !$[arg0] && criar(arg0)
const a_nivelmin = 0
const a_nivelmax = 65536
#
# Ordem que deve organizar as constantes:
const admordem = "a_nome a_autor a_desc a_nivelmin a_nivelmax a_areatipo\n\
a_tempo a_reset a_txtreset a_regiao a_regiaoori a_retornarsala"

func ini
  resetcont = rand(a_tempo * 500, a_tempo * 700)

func resetcont_exec
  resetcont = rand(a_tempo * 500, a_tempo * 700)
  ret !a_reset, nulo # Retorna se modo de reset é nunca
  se a_reset == 1 # Checa reset quando não há jogadores
    prog p
    epara p.iniherdainv("b_" + txt(este, 2)), p.lin, p.depois
      ret $[p.texto].socktot, nulo
    efim
  fimse
  reset_exec

func reset_exec # Executa o reset da área
  prog p
  debug d
  ref r
  epara p.iniherdainv("b_" + txt(este, 2)), p.lin, p.depois
    epara r = $[p.texto], r, r = objdepois(r)
      r.a_reset1, d.ini
    efim
  efim
  cmd_reset
# Avisa jogadores
  txt100 mres = a_txtreset
  ret !mres, nulo
  indiceitem i
  epara i.ini("un "), txt1(i.txt) == "un", i.depois
    epara r = i.obj.perso.dono, r.dono, r = r.dono
    efim
    "a_" + r.s_area == este && i.obj.msg(mres)
  efim

func reset_atualiza
  se resetcont <= 0 || resetcont >= a_tempo * 700
    resetcont = a_tempo * 700
  fimse


classe sala
herda comum_obj
# Estrutura de uma sala
#
const objsav = 3 # Se deve salvar a sala ao salvar casa do jogador
const s_sala = 1 # Indica que é uma sala (personagens podem entrar)
const s_titulo = "Sem nome"
const s_desc = ""
const s_item = 5 # Quantos minutos para começar a apagar itens
inttempo t_item # Tempo para começar a apagar itens da sala
const s_gritar = s_falar(arg0) # Mensagem ao gritar; se estiver vazia, pode gritar
const volmax = config:s_volmax
const objmax = config:s_objmax
const s_recup = config:s_recup # Taxa de recuperação de vida, mana e movimentos
const s_pnj = config:s_pnj # Quantidade máxima de PNJs na sala
const s_jog = config:s_jog # Quantidade máxima de jogadores na sala
const s_atk_move = config:s_atk_move
const s_som = config:s_som
const s_doarsalas = config:s_doarsalas
const s_doarsim = config:s_doarsim
const s_doarnao = config:s_doarnao
const objlimite = objmax
int1 objmudou # Para salvar sala ao salvar a casa
listaitem s_rastreio # Usado em misc:rastrear: de qual sala veio para essa
txt10 s_rastrdir # Usado em misc:rastrear: direção para chegar nessa sala
inttempo s_salarand # Para embaralhar as saídas quando necessário
listaobj dentrodir # Objetos que podem mudar a saída em dirsala e diritem
#
uint8 porta_n # Tipo de saída
uint8 porta_s # Tipo de saída
uint8 porta_l # Tipo de saída
uint8 porta_o # Tipo de saída
uint8 porta_c # Tipo de saída
uint8 porta_b # Tipo de saída
uint8 porta_ne # Tipo de saída
uint8 porta_no # Tipo de saída
uint8 porta_se # Tipo de saída
uint8 porta_so # Tipo de saída
uint8 porta_entrar # Tipo de saída
uint8 porta_sair # Tipo de saída
#
# Ordem que deve organizar as constantes:
const admordem = "s_area\n\
s_titulo s_desc s_noite\n\
s_doarsalas s_doarsim s_doarnao\n\
s_entrada\n\
s_falar\n\
s_fome\n\
s_item\n\
s_luta\n\
s_luz\n\
s_morre\n\
s_naoresg\n\
s_ocultar\n\
s_pnj\n\
s_jog\n\
s_pegarmsg1 s_pegarmsg2\n\
s_recup\n\
s_reserva\n\
s_retornar\n\
s_semmagia\n\
s_soltartipo s_soltarmsg1 s_soltarmsg2\n\
s_terreno\n\
s_atk_move\n\
s_visitou\n\
s_voltar\n\
s_som s_somnoite\n\
s_mudadir\n\
volmax\n\
objmax\n\
evhora\n\
eveste\n\
dir_n dir_s dir_l dir_o dir_c dir_b dir_ne dir_no dir_se dir_so dir_entrar dir_sair\n\
portaini_n portaini_s portaini_l portaini_o portaini_c portaini_b\n\
portaini_ne portaini_no portaini_se portaini_so portaini_entrar portaini_sair\n\
portanome_n portanome_s portanome_l portanome_o portanome_c portanome_b\n\
portanome_ne portanome_no portanome_se portanome_so portanome_entrar portanome_sair\n\
portaartigo_n portaartigo_s portaartigo_l portaartigo_o portaartigo_c portaartigo_b\n\
portaartigo_ne portaartigo_no portaartigo_se portaartigo_so\n\
portaartigo_entrar portaartigo_sair\n\
fechadura_n fechadura_s fechadura_l fechadura_o fechadura_c fechadura_b\n\
fechadura_ne fechadura_no fechadura_se fechadura_so fechadura_entrar fechadura_sair\n\
comechave_n comechave_s comechave_l comechave_o comechave_c comechave_b\n\
comechave_ne comechave_no comechave_se comechave_so comechave_entrar comechave_sair\n\
fugir_n fugir_s fugir_l fugir_o fugir_c fugir_b\n\
fugir_ne fugir_no fugir_se fugir_so fugir_entrar fugir_sair\n\
inv_n inv_s inv_l inv_o inv_c inv_b inv_ne inv_no inv_se inv_so inv_entrar inv_sair\n\
fecha_n fecha_s fecha_l fecha_o fecha_c fecha_b\n\
fecha_ne fecha_no fecha_se fecha_so fecha_entrar fecha_sair\n\
tranc_n tranc_s tranc_l tranc_o tranc_c tranc_b\n\
tranc_ne tranc_no tranc_se tranc_so tranc_entrar tranc_sair\n\
voar_n voar_s voar_l voar_o voar_c voar_b\n\
voar_ne voar_no voar_se voar_so voar_entrar voar_sair\n\
som_abrir_n som_abrir_s som_abrir_l som_abrir_o som_abrir_c som_abrir_b\n\
som_abrir_ne som_abrir_no som_abrir_se som_abrir_so som_abrir_entrar som_abrir_sair\n\
som_fechar_n som_fechar_s som_fechar_l som_fechar_o som_fechar_c som_fechar_b\n\
som_fechar_ne som_fechar_no som_fechar_se som_fechar_so som_fechar_entrar som_fechar_sair\n\
som_tranc_n som_tranc_s som_tranc_l som_tranc_o som_tranc_c som_tranc_b\n\
som_tranc_ne som_tranc_no som_tranc_se som_tranc_so som_tranc_entrar som_tranc_sair\n\
som_destr_n som_destr_s som_destr_l som_destr_o som_destr_c som_destr_b\n\
som_destr_ne som_destr_no som_destr_se som_destr_so som_destr_entrar som_destr_sair\n\
msg_sai0_n msg_sai1_n msg_sai2_n msg_sai3_n msg_sai4_n\n\
msg_sai0_s msg_sai1_s msg_sai2_s msg_sai3_s msg_sai4_s\n\
msg_sai0_l msg_sai1_l msg_sai2_l msg_sai3_l msg_sai4_l\n\
msg_sai0_o msg_sai1_o msg_sai2_o msg_sai3_o msg_sai4_o\n\
msg_sai0_c msg_sai1_c msg_sai2_c msg_sai3_c msg_sai4_c\n\
msg_sai0_b msg_sai1_b msg_sai2_b msg_sai3_b msg_sai4_b\n\
msg_sai0_ne msg_sai1_ne msg_sai2_ne msg_sai3_ne msg_sai4_ne\n\
msg_sai0_no msg_sai1_no msg_sai2_no msg_sai3_no msg_sai4_no\n\
msg_sai0_se msg_sai1_se msg_sai2_se msg_sai3_se msg_sai4_se\n\
msg_sai0_so msg_sai1_so msg_sai2_so msg_sai3_so msg_sai4_so\n\
msg_sai0_entrar msg_sai1_entrar msg_sai2_entrar msg_sai3_entrar msg_sai4_entrar\n\
msg_sai0_sair msg_sai1_sair msg_sai2_sair msg_sai3_sair msg_sai4_sair\n\
msg_entra1_n msg_entra2_n msg_entra3_n msg_entra4_n\n\
msg_entra1_s msg_entra2_s msg_entra3_s msg_entra4_s\n\
msg_entra1_l msg_entra2_l msg_entra3_l msg_entra4_l\n\
msg_entra1_o msg_entra2_o msg_entra3_o msg_entra4_o\n\
msg_entra1_c msg_entra2_c msg_entra3_c msg_entra4_c\n\
msg_entra1_b msg_entra2_b msg_entra3_b msg_entra4_b\n\
msg_entra1_ne msg_entra2_ne msg_entra3_ne msg_entra4_ne\n\
msg_entra1_no msg_entra2_no msg_entra3_no msg_entra4_no\n\
msg_entra1_se msg_entra2_se msg_entra3_se msg_entra4_se\n\
msg_entra1_so msg_entra2_so msg_entra3_so msg_entra4_so\n\
msg_entra1_entrar msg_entra2_entrar msg_entra3_entrar msg_entra4_entrar\n\
msg_entra1_sair msg_entra2_sair msg_entra3_sair msg_entra4_sair\n\
msg_abrir1_n msg_abrir2_n msg_abrir3_n\n\
msg_abrir1_s msg_abrir2_s msg_abrir3_s\n\
msg_abrir1_l msg_abrir2_l msg_abrir3_l\n\
msg_abrir1_o msg_abrir2_o msg_abrir3_o\n\
msg_abrir1_c msg_abrir2_c msg_abrir3_c\n\
msg_abrir1_b msg_abrir2_b msg_abrir3_b\n\
msg_abrir1_ne msg_abrir2_ne msg_abrir3_ne\n\
msg_abrir1_no msg_abrir2_no msg_abrir3_no\n\
msg_abrir1_se msg_abrir2_se msg_abrir3_se\n\
msg_abrir1_so msg_abrir2_so msg_abrir3_so\n\
msg_abrir1_entrar msg_abrir2_entrar msg_abrir3_entrar\n\
msg_abrir1_sair msg_abrir2_sair msg_abrir3_sair\n\
msg_fechar1_n msg_fechar2_n msg_fechar3_n\n\
msg_fechar1_s msg_fechar2_s msg_fechar3_s\n\
msg_fechar1_l msg_fechar2_l msg_fechar3_l\n\
msg_fechar1_o msg_fechar2_o msg_fechar3_o\n\
msg_fechar1_c msg_fechar2_c msg_fechar3_c\n\
msg_fechar1_b msg_fechar2_b msg_fechar3_b\n\
msg_fechar1_ne msg_fechar2_ne msg_fechar3_ne\n\
msg_fechar1_no msg_fechar2_no msg_fechar3_no\n\
msg_fechar1_se msg_fechar2_se msg_fechar3_se\n\
msg_fechar1_so msg_fechar2_so msg_fechar3_so\n\
msg_fechar1_entrar msg_fechar2_entrar msg_fechar3_entrar\n\
msg_fechar1_sair msg_fechar2_sair msg_fechar3_sair\n\
msg_tranc1_n msg_tranc2_n msg_tranc3_n\n\
msg_tranc1_s msg_tranc2_s msg_tranc3_s\n\
msg_tranc1_l msg_tranc2_l msg_tranc3_l\n\
msg_tranc1_o msg_tranc2_o msg_tranc3_o\n\
msg_tranc1_c msg_tranc2_c msg_tranc3_c\n\
msg_tranc1_b msg_tranc2_b msg_tranc3_b\n\
msg_tranc1_ne msg_tranc2_ne msg_tranc3_ne\n\
msg_tranc1_no msg_tranc2_no msg_tranc3_no\n\
msg_tranc1_se msg_tranc2_se msg_tranc3_se\n\
msg_tranc1_so msg_tranc2_so msg_tranc3_so\n\
msg_tranc1_entrar msg_tranc2_entrar msg_tranc3_entrar\n\
msg_tranc1_sair msg_tranc2_sair msg_tranc3_sair\n\
msg_destr1_n msg_destr2_n msg_destr3_n\n\
msg_destr1_s msg_destr2_s msg_destr3_s\n\
msg_destr1_l msg_destr2_l msg_destr3_l\n\
msg_destr1_o msg_destr2_o msg_destr3_o\n\
msg_destr1_c msg_destr2_c msg_destr3_c\n\
msg_destr1_b msg_destr2_b msg_destr3_b\n\
msg_destr1_ne msg_destr2_ne msg_destr3_ne\n\
msg_destr1_no msg_destr2_no msg_destr3_no\n\
msg_destr1_se msg_destr2_se msg_destr3_se\n\
msg_destr1_so msg_destr2_so msg_destr3_so\n\
msg_destr1_entrar msg_destr2_entrar msg_destr3_entrar\n\
msg_destr1_sair msg_destr2_sair msg_destr3_sair\n\
a_reset i_reset s_reset"
const iniclasse = !$[arg0] && criar(arg0)

func ini # Objeto foi criado: inicializa variáveis (arg0=dono, pode ser nulo)
  ret arg0.dono.dentro2.objini(este), apagar(este)
  porta_n = portaini_n
  porta_s = portaini_s
  porta_l = portaini_l
  porta_o = portaini_o
  porta_c = portaini_c
  porta_b = portaini_b
  porta_ne = portaini_ne
  porta_no = portaini_no
  porta_se = portaini_se
  porta_so = portaini_so
  porta_entrar = portaini_entrar
  porta_sair = portaini_sair
  comum_obj:ini, cmd_ini(arg0, arg1, arg2, arg3, arg4)
  arg0 && mdono(arg0) + cmd_mudadono
  s_mudadir1, a_reset1, i_reset1

func fim
  listaobj l
  prog p
  l.addfim(dentro2), dentrodir.limpar, comum_obj:fim
  epara nulo, l, l.ini.remove
    continuar !(l.objini.jog || l.objini.temdomador)
    p.iniherdainv("b_" + s_area)
    p.texto == este && p.depois
    l.objini.mudadono(ref(s_voltar(l.objini)) ?? $[p.texto] ?? config:salasav)
  efim

func msg # Mensagem para todos da sala
  ret !socktot, nulo
  listaitem i
  epara i = dentro2.ini, i, i.depois
    i.obj.msg(arg0)
  efim

func msgtodos # Mensagem para todos da sala que estiverem acordados
  ret !socktot, nulo
  listaitem i
  epara i = dentro2.ini, i, i.depois
    i.obj.posicao > 4 && i.obj.msg(arg0)
  efim

func t_item_exec # Começar a apagar objetos
  ret socktot || !s_item, nulo # Retorna se não pode apagar itens
  listaitem i
  epara i = dentro1.fim, i, i.antes
    continuar i.obj.mantersala
    apagar(i.obj)
    t_item = 300 # 30 segundos para apagar o próximo
    ret
  efim
  var.z_moedas = "" # Por último apaga as moedas

func visivel # Informa se a sala está visível (arg0=quem quer ver)
# Se retornar 0, significa que não está visível. Nesse caso, para saber
# se o motivo é estar cego, checar: !(1 & arg0.bitver)
  casovar 3 & arg0.bitver
  casose "0" # Está cego
  casose "2" # Está cego
    ret 0
  casose "1" # Não enxerga no escuro
    casovar s_luz
    casose "2" # Pode estar escuro
      ret misc:luz || luzden
    casose "3" # Está escuro
      ret luzden != 0
    casose # Está claro
      ret 1
    casofim
  casose # Enxerga no escuro
    ret 1
  casofim

func descsala # Retorna descrição da sala
# arg0 = objeto que está vendo a descrição
# arg1 é o número 0 somado com: +1 se mostra descrição completa,
# +2 se mostra saídas, +4 se mostra itens, +8 se mostra o nome da sala
# arg2 = itens e e personagens que não devem aparecer na descrição, ou nulo
  textotxt t
  se visivel(arg0)
    se !config:perigomsg
    senao dirsala("n", arg0).s_morre || dirsala("s", arg0).s_morre
      t.addfim(config:perigomsg)
    senao dirsala("l", arg0).s_morre || dirsala("o", arg0).s_morre
      t.addfim(config:perigomsg)
    senao dirsala("ne", arg0).s_morre || dirsala("no", arg0).s_morre
      t.addfim(config:perigomsg)
    senao dirsala("se", arg0).s_morre || dirsala("so", arg0).s_morre
      t.addfim(config:perigomsg)
    senao dirsala("c", arg0).s_morre || dirsala("b", arg0).s_morre
      t.addfim(config:perigomsg)
    senao dirsala("entrar", arg0).s_morre || dirsala("sair", arg0).s_morre
      t.addfim(config:perigomsg)
    fimse
    refvar titulo = txt(var.z_titulo ?? s_titulo(arg0))
    titulo && t.addfim("\b\c6" + titulo + "\b")
    se arg1 & 1
      t.addfim(var.z_desc ?? $mensjog.txt((!misc:luz ? s_noite(arg0)) ?? s_desc(arg0), arg0))
    fimse
    se arg1 & 2
      refvar s = txtsai(arg0)
      t.addfim("\bSaídas: " + (!s ? "Nenhuma" : arg0.jogconfig.25 ? txttroca(s, " ", ", ") : s))
    fimse
    arg1 & 4 && var.z_moedas && t.addfim("Aqui há " + misc:txtmoedas(var.z_moedas) + ".")
  senao 1 & arg0.bitver
    t.addfim($mensjog.txt(comando_mover_cfg:m_escuro, arg0))
  senao
    t.addfim($mensjog.txt(comando_mover_cfg:m_cego, arg0))
  fimse
  se arg1 & 4
    textotxt t2
    listaobj l
    l.addfim(dentro1, dentro2)
    l.remove(arg0, arg2)
    ref r
    enquanto l
      r = l.fim.obj, l.fim.remove
      continuar !r.visivel(arg0)
      refvar a1 = r.var.z_descpos ?? r.descpos(arg0)
      refvar a2 = txtsublin(r.atribs.ini.textolin(2), 1)
      t2.addfim(txt(r.objtot) + r.atribs.ini.texto + a1 + a2)
    efim
    t2.juntalin("(", "x)")
# t.fim.add(t2.ini, t2.linhas)
    t2.linhas && t.addfim(txttroca(t2.remove(100), "\d+", "\n"))
  fimse
  ret !(arg1 & 8), t.remove(1000)
  txt100 lin = txt(este, 2)
  ref r
  epara r = dono, r, r = r.dono
    lin += " em " + txt(r, r.s_sala ? 2)
  efim
  ret lin + "  " + t.remove(1000)

func txtsai # Retorna as saídas visíveis separadas por espaço
# Saídas trancadas vêm com uma exclamação na frente
# arg0 = personagem
  txt80 sai
  sai += tsai2("n", arg0) + tsai2("s", arg0) + tsai2("l", arg0) + tsai2("o", arg0)
  sai += tsai2("ne", arg0) + tsai2("no", arg0) + tsai2("se", arg0) + tsai2("so", arg0)
  sai += tsai2("c", arg0) + tsai2("b", arg0) + tsai2("entrar", arg0) + tsai2("sair", arg0)
  ret txt(sai, 1)

func tsai2 # Para mostrar as saídas visíveis
  refvar sala = dirsala(arg0, arg1)
  ret !(sala.s_sala || sala.item && sala.dono.s_sala) || inv_[arg0](arg1), ""
  casovar int(porta_[arg0])
  casose "0"
  casose "1"
    ret " " + arg0
  casose
    ret " !" + arg0
  casofim

func dirsala # Retorna a sala em uma direção ou nulo se não existir
# arg0 = direção
# arg1 = personagem, pode ser nulo
  ref saladest = dentrodir ? dirsalaitem(arg0, arg1) : dir_[arg0](arg1)
  se saladest.item
    ret saladest.dono.s_sala ? saladest.dono
  senao !dono
    ret saladest
  senao s_entrada && arg0 == "sair" && dono.dono.s_sala
    ret dono.dono
  senao
    ret dono.dentro2.objini(saladest)
  fimse

func diritem # Retorna o item em uma direção ou nulo se não for item
# arg0 = direção
# arg1 = personagem, pode ser nulo
  ref saladest = dentrodir ? dirsalaitem(arg0, arg1) : dir_[arg0](arg1)
  ret saladest.item && saladest.dono.s_sala, saladest
  ret s_entrada && arg0 == "sair" && dono.dono.s_sala, dono

func dirsalaitem # Retorna a sala ou item em uma direção ou nulo se não houver
# arg0 = direção
# arg1 = personagem, pode ser nulo
  ref r = dir_[arg0](arg1)
  listaobj l
  epara l.addfim(dentrodir), l, l.ini.remove
    l.objini.cmd_dirsala(este, r, arg0, arg1)
  efim
  ret r

func s_mudadir1 # Acerta opção de embaralhar as saídas da sala
  refvar r = $sala_mudadir ?? criar("sala_mudadir")
  se !intpos(s_mudadir)
    dentrodir.remove(r)
    s_salarand = 0
  senao
    dentrodir.addini1(r)
    r.rand(este)
    refvar tempo = s_mudadir * 10
    s_salarand = tempo - (r.tempo1 + r.tempo2) % tempo
  fimse

func s_salarand_exec # Embaralha saídas se necessário
  se socktot || jottot >> 1
    s_salarand = s_mudadir * 10
    $sala_mudadir.rand(este)
    $mens.p(este)
    $mens.msalatodos1(s_salarandmsg)
  fimse

const mudaporta = mudaporta0(arg0, arg1) # Chamado pelos resets de sala e de área

func mudaporta0 # Muda estado de uma saída sem enviar mensagem; variável porta_[arg0]
# arg0 = direção da saída
# arg1 = novo valor
# Retorna: 0=saída inexistente, 1=saída foi alterada
  ref r = dir_[arg0]
  ret !r.s_sala, 0 # Retorna se a saída não é uma sala
  refvar nome = misc:d2[arg0]
  se r.dir_[nome] == este && r.porta_[nome] == porta_[arg0]
    r.porta_[nome] = arg1
  fimse
  porta_[arg0] = arg1
  ret 1

func mudaporta2 # Muda estado de uma saída; variável porta_[arg0]
# arg0 = direção da saída
# arg1 = novo valor
# arg2 = mensagem enviada para a própria sala, da mesma forma que $mens.mtodos1
# arg3 = mensagem enviada para a sala vizinha, da mesma forma que $mens.mtodos1
# Nas mensagens: $m=nome da porta
# Retorna: 0=saída inexistente, 1=saída foi alterada
  ref r = dir_[arg0]
  ret !r.s_sala, 0 # Retorna se a saída não é uma sala
  refvar nome = misc:d2[arg0]
  se r.dir_[nome] == este && r.porta_[nome] == porta_[arg0]
    se !r.socktot
    senao arg1 < 2 && r.porta_[nome] >= 2 # Abriu
      r.mensporta1(nome, 0, arg3)
    senao arg1 >= 2 && r.porta_[nome] < 2 # Fechou
      r.mensporta1(nome, 1, arg3)
    senao arg1 == 3 && r.porta_[nome] == 2 # Trancou
      r.mensporta1(nome, 2, arg3)
    senao arg1 == 2 && r.porta_[nome] == 3 # Destrancou
      r.mensporta1(nome, 3, arg3)
    fimse
    r.porta_[nome] = arg1
  fimse
  se !socktot
  senao arg1 < 2 && porta_[arg0] >= 2 # Abriu
    mensporta1(arg0, 0, arg2)
  senao arg1 >= 2 && porta_[arg0] < 2 # Fechou
    mensporta1(arg0, 1, arg2)
  senao arg1 == 3 && porta_[arg0] == 2 # Trancou
    mensporta1(arg0, 2, arg2)
  senao arg1 == 2 && porta_[arg0] == 3 # Destrancou
    mensporta1(arg0, 3, arg2)
  fimse
  porta_[arg0] = arg1
  ret 1

func mudaporta3 # Muda estado de uma saída (por um personagem); variável porta_[arg0]
# arg0 = direção da saída
# arg1 = novo valor
# arg2 = mensagem para o personagem $mens.perso
# arg3 = mensagem enviada para a própria sala, da mesma forma que $mens.mtodos1
# arg4 = mensagem enviada para a sala vizinha, da mesma forma que $mens.mtodos1
# Nas mensagens: $m=nome da porta, $p=nome do personagem
# Retorna: 0=saída inexistente, 1=saída foi alterada
  ref r = dir_[arg0]
  ret !r.s_sala, 0 # Retorna se a saída não é uma sala
  refvar nome = misc:d2[arg0]
  se r.dir_[nome] == este && r.porta_[nome] == porta_[arg0]
    se !r.socktot
    senao arg1 < 2 && r.porta_[nome] >= 2 # Abriu
      r.mensporta1(nome, 0, arg4)
    senao arg1 >= 2 && r.porta_[nome] < 2 # Fechou
      r.mensporta1(nome, 1, arg4)
    senao arg1 == 3 && r.porta_[nome] == 2 # Trancou
      r.mensporta1(nome, 2, arg4)
    senao arg1 == 2 && r.porta_[nome] == 3 # Destrancou
      r.mensporta1(nome, 3, arg4)
    fimse
    r.porta_[nome] = arg1
  fimse
  se !socktot
  senao arg1 < 2 && porta_[arg0] >= 2 # Abriu
    mensporta2(arg0, 0, arg2, arg3)
  senao arg1 >= 2 && porta_[arg0] < 2 # Fechou
    mensporta2(arg0, 1, arg2, arg3)
  senao arg1 == 3 && porta_[arg0] == 2 # Trancou
    mensporta2(arg0, 2, arg2, arg3)
  senao arg1 == 2 && porta_[arg0] == 3 # Destrancou
    mensporta2(arg0, 3, arg2, arg3)
  fimse
  porta_[arg0] = arg1
  ret 1

func mensporta1 # Envia mensagem sobre porta abrindo/fechando
# arg0 = direção da saída
# arg1 = ação: 0=abrir, 1=fechar, 2=trancar, 3=destrancar
# arg2 = mensagem para a sala, pode ser nulo
  listaobj l
  prog p
  refvar tipo = portaartigo_[arg0] & 1 ? 4 : 3
  $mens.mens = portanome_[arg0] ?? $cmd_[arg0].m_porta ?? "uma porta"
  casovar arg1
  casose "0"
    p.iniherdainv("h_cmd_abrir")
    refvar s1 = som_abrir_[arg0]
    refvar m1 = arg2 ?? msg_abrir3_[arg0] ?? $[p.texto].m_porta_abriu[tipo]
    sair !m1
    epara l.addfim(dentro2), l, l.ini.remove
      $mens.msgsominv(m1, s1, l.objini)
    efim
    sair
  casose "1"
    p.iniherdainv("h_cmd_fechar")
    refvar s1 = som_fechar_[arg0]
    refvar m1 = arg2 ?? msg_fechar3_[arg0] ?? $[p.texto].m_porta_fechou[tipo]
    sair !m1
    epara l.addfim(dentro2), l, l.ini.remove
      $mens.msgsominv(m1, s1, l.objini)
    efim
    sair
  casose "2"
    p.iniherdainv("h_cmd_trancar")
    refvar s1 = som_tranc_[arg0]
    refvar m1 = arg2 ?? msg_tranc3_[arg0]
    sair !m1
    epara l.addfim(dentro2), l, l.ini.remove
      $mens.msgsominv(m1, s1, l.objini)
    efim
    sair
  casose "3"
    p.iniherdainv("h_cmd_destrancar")
    refvar s1 = som_destr_[arg0]
    refvar m1 = arg2 ?? msg_destr3_[arg0]
    sair !m1
    epara l.addfim(dentro2), l, l.ini.remove
      $mens.msgsominv(m1, s1, l.objini)
    efim
  casofim

func mensporta2 # Envia mensagem sobre alguém abrindo/fechando uma porta
# arg0 = direção da saída
# arg1 = ação: 0=abrir, 1=fechar, 2=trancar, 3=destrancar
# arg2 = mensagem para o personagem $mens.perso, pode ser nulo
# arg3 = mensagem para os outros personagens, pode ser nulo
  listaobj l
  prog p
  $mens.mens = portanome_[arg0] ?? $cmd_[arg0].m_porta ?? "uma porta"
  casovar arg1
  casose "0"
    p.iniherdainv("h_cmd_abrir")
    refvar s1 = som_abrir_[arg0]
    refvar m1 = arg2 ?? msg_abrir1_[arg0] ?? $[p.texto].m_porta_abriu1
    refvar m2 = arg3 ?? msg_abrir2_[arg0] ?? $[p.texto].m_porta_abriu2
    epara l.addfim(dentro2), l, l.ini.remove
      $mens.msgsominv(l.objini == perso ? m1 : m2, s1, l.objini)
    efim
    sair
  casose "1"
    p.iniherdainv("h_cmd_fechar")
    refvar s1 = som_fechar_[arg0]
    refvar m1 = arg2 ?? msg_fechar1_[arg0] ?? $[p.texto].m_porta_fechou1
    refvar m2 = arg3 ?? msg_fechar2_[arg0] ?? $[p.texto].m_porta_fechou2
    epara l.addfim(dentro2), l, l.ini.remove
      $mens.msgsominv(l.objini == perso ? m1 : m2, s1, l.objini)
    efim
    sair
  casose "2"
    p.iniherdainv("h_cmd_trancar")
    refvar s1 = som_tranc_[arg0]
    refvar m1 = arg2 ?? msg_tranc1_[arg0] ?? $[p.texto].m_porta_trancou1
    refvar m2 = arg3 ?? msg_tranc2_[arg0] ?? $[p.texto].m_porta_trancou2
    epara l.addfim(dentro2), l, l.ini.remove
      $mens.msgsominv(l.objini == perso ? m1 : m2, s1, l.objini)
    efim
    sair
  casose "3"
    p.iniherdainv("h_cmd_destrancar")
    refvar s1 = som_destr_[arg0]
    refvar m1 = arg2 ?? msg_destr1_[arg0] ?? $[p.texto].m_porta_destrancou1
    refvar m2 = arg3 ?? msg_destr2_[arg0] ?? $[p.texto].m_porta_destrancou2
    epara l.addfim(dentro2), l, l.ini.remove
      $mens.msgsominv(l.objini == perso ? m1 : m2, s1, l.objini)
    efim
  casofim

func totalmove # Quantos movimentos consome, conforme o terreno
  casovar int(s_terreno)
  casose "0" # Dentro
    ret 1
  casose "1" # Rua de uma cidade
    ret 2
  casose "2" # Campo
    ret 2
  casose "3" # Pântano
    ret 3
  casose "4" # Floresta densa
    ret 3
  casose "5" # Colina
    ret 4
  casose "6" # Montanha
    ret 6
  casose "7" # Água pode nadar
    ret 4
  casose "8" # Água requer barco
    ret 50
  casose "9" # Em baixo d'água
    ret 10
  casose "10" # Ar
    ret 10
  casose "11" # Deserto
    ret 6
  casofim
  ret 1


classe sala_mudadir
# Classe responsável por deixar as saídas das salas embaralhadas
inttempo tempoX # Para atualizar tempo1 e tempo2
real2 tempo1
intinc tempo2

func tempoX_exec
  tempoX = 200000
  tempo1 += tempo2
  tempo2 = 0

func cmd_dirsala
  prog p
  se !arg0.s_salarand || !arg0.var.z_sala_[arg2] != !p.existe(arg0, "dir_" + arg2)
    este.rand(arg0)
    refvar tempo = arg0.s_mudadir * 10
    arg0.s_salarand = tempo - (tempo1 + tempo2) % tempo
  fimse
  arg0.var.z_sala_[arg2] && (arg1 = arg0.dir_[arg0.var.z_sala_[arg2]](arg3))

func rand # Embaralha as saídas da sala arg0
  !tempoX && (tempoX = tempo2 = 100000)
  prog p
  textotxt t
  p.existe(arg0, "dir_n") && t.addfim("n")
  p.existe(arg0, "dir_s") && t.addfim("s")
  p.existe(arg0, "dir_l") && t.addfim("l")
  p.existe(arg0, "dir_o") && t.addfim("o")
  p.existe(arg0, "dir_ne") && t.addfim("ne")
  p.existe(arg0, "dir_no") && t.addfim("no")
  p.existe(arg0, "dir_se") && t.addfim("se")
  p.existe(arg0, "dir_so") && t.addfim("so")
  t.rand
  arg0.var.z_sala_n = p.existe(arg0, "dir_n") ? t.remove
  arg0.var.z_sala_s = p.existe(arg0, "dir_s") ? t.remove
  arg0.var.z_sala_l = p.existe(arg0, "dir_l") ? t.remove
  arg0.var.z_sala_o = p.existe(arg0, "dir_o") ? t.remove
  arg0.var.z_sala_ne = p.existe(arg0, "dir_ne") ? t.remove
  arg0.var.z_sala_no = p.existe(arg0, "dir_no") ? t.remove
  arg0.var.z_sala_se = p.existe(arg0, "dir_se") ? t.remove
  arg0.var.z_sala_so = p.existe(arg0, "dir_so") ? t.remove
