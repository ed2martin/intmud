classe comum_item
herda comum_persoitem
# Itens
const item = 1 # Para identificar que é item
const msexo = 0 # Sexo nas mensagens: 0=feminino, 1=masculino
const msexo2 = int(var.z_msexo ?? msexo)
const nome = "sem nome"
const ident2 = var.z_ident ?? ident ?? nome
const descnome2 = var.z_descnome ?? descnome ?? nome
const descloja2 = var.z_descnome ?? descloja ?? descnome ?? nome
const descsala = config:item_descsala
const objsav = 1 # Se deve salvar o item ao salvar personagem do jogador
const pnivel = nivel # Nível atual (personagens de nível mais baixo não vestem)
const volmax = config:i_volmax
const objmax = config:i_objmax
const contr = este
const i_entraitem1 = cmd_entrar:m_entraitem1
const i_entraitem2 = cmd_entrar:m_entraitem2
const i_entraitem3 = cmd_entrar:m_entraitem3
const i_entraitem4 = cmd_entrar:m_entraitem4
const i_saiitem1 = cmd_entrar:m_saiitem1
const i_saiitem2 = cmd_entrar:m_saiitem2
const i_saiitem3 = cmd_entrar:m_saiitem3
const i_saiitem4 = cmd_entrar:m_saiitem4
const i_escondepeso = config:i_escondepeso
const i_escondevolume = config:i_escondevolume
sav uint8 vestpos # Em que posição está vestindo, 0=nenhuma
#
# Ordem que deve organizar as constantes:
const admordem = "nome\n\
ident\n\
descnome\n\
descsala\n\
descloja\n\
descver\n\
descaberto\n\
descident\n\
msexo\n\
m_atrib1 m_atrib2\n\
nivel\n\
renascer\n\
armacarregar\n\
armamanual\n\
armamax\n\
armamin\n\
armamunicao\n\
armafalha\n\
armaaddprecisao\n\
armamove\n\
armatipo\n\
f_tipo\n\
f_liquido\n\
f_totalml\n\
f_bebida\n\
f_fome\n\
f_sede\n\
f_diges\n\
f_magia1 f_magia2 f_magia2\n\
f_msgperso f_msgoutros\n\
f_nivel1 f_nivel2 f_nivel3\n\
f_remove\n\
i_captura\n\
i_chave\n\
i_itens\n\
i_pegar\n\
i_seguir\n\
i_salapegar i_salaver i_salaentrar i_salas\n\
i_entraitem0 i_entraitem1 i_entraitem2 i_entraitem3 i_entraitem4\n\
i_saiitem1 i_saiitem2 i_saiitem3 i_saiitem4\n\
i_movel i_lugar i_mover\n\
i_aberto i_abertoini\n\
i_municao\n\
i_tranc\n\
i_fechadura\n\
i_comechave\n\
i_item_tecnica i_item_nivel i_item_auto1 i_item_auto2\n\
i_item_outro1 i_item_outro2 i_item_outro3\n\
i_olhardentro i_olharvazio\n\
i_pegouitem1 i_pegouitem2 i_soltouitem1 i_soltouitem2\n\
i_abriuitem1 i_abriuitem2 i_fechouitem1 i_fechouitem2\n\
i_trancouitem1 i_trancouitem2 i_destrancouitem1 i_destrancouitem2\n\
i_escondepeso i_escondevolume\n\
luzitem\n\
luzini luzfim\n\
luzliga1 luzliga2\n\
luztxt\n\
pesoobj objmax\n\
volobj volmax volexp\n\
mantersala\n\
valor\n\
tipoitem\n\
vestiritem\n\
vestir1\n\
vestirnao\n\
vestirsim\n\
vestirsexo\n\
vestiraula\n\
vestirextra\n\
inivar evhora eveste evperso evitem evsala"

func ini # Objeto foi criado (arg0=dono, arg1 é ignorado, arg2=variáveis de var)
  se arg2 || inivar
    textotxt t
    epara t.addfim(txttroca(txt(arg2) + "\n" + inivar, ",", "\n")), t.linhas, var.mudar(t.remove)
    efim
  fimse
  i_aberto = i_abertoini, luztempo = luzini
  se f_tipo == 5 && f_totalml
    refvar liq = $liq_[f_liquido]
    liq && (var.z_liquido = txt(f_totalml) + " " + f_liquido)
    pesovar = f_totalml * liq.peso
  fimse
  comum_obj:ini, cmd_ini(arg0, arg1, arg2, arg3, arg4)
  arg0 && mudadono(arg0)
  epara nulo, var.ini("e_"), var.mudar(var.ini("e_"))
    criar(var.ini("e_"), este, var.valor(var.ini("e_")))
  efim
  se i_salas
    textotxt t
    epara t.addfim(i_salas), t.linhas, criar("s_" + t.remove, este)
    efim
  fimse
  recalc_exec

func ajustapeso
  pesovar = var.z_liquido ? txt1(var.z_liquido) * $liq_[txt2(var.z_liquido)].peso
  comum_obj:ajustapeso

func mudadono # Item muda de dono (arg0 = novo dono, arg1 = quantidade)
  dono.perso && ((vestpos ? dono.tipoitemvestir2 : dono.tipoiteminv2) = "")
  arg0.perso && (arg0.tipoiteminv2 = "")
  mdono(arg0), cmd_mudadono
  ret este

func mudaobjdono # Objeto dono foi substituído por outro
# arg0 = antigo dono, arg1 = novo dono
  int8 novapos = vestpos
  mdono(arg1)
  novapos && vestir(novapos)

func vestir # Veste o item, arg0=posição
  dono.recalc = 1 # Para recalcular atributos
  dono.tipoitemvestir2 = dono.tipoiteminv2 = ""
  idono.remove, vestpos = arg0
  se vestpos
    idono = dono.dentro2.addfim(este)
    vestpos == 50 && (dono.iempu = idono)
  senao
    idono = dono.dentro1.addfim(este)
  fimse

func vestpos2 # Retorna as posições aonde está usando este item
  ret vestpos ? (vestpos < 50 ? intbith(vestpos - 1) : "0") | vestirextra : "0"

const apagar = apagar(este), mdono(nulo) # Apaga o item (arg0 = quantidade)

func cabedentro # Retorna quantos itens iguais a esse cabem em sala/item/personagem
# arg0 = sala, item ou personagem
  ret este == arg0, 0
  refvar v1 = arg0.objmax - arg0.dentro1.total
  real2 v2 # Limite de volume
  real2 v3 # Limite de itens na sala ou no personagem
  ref r1 # Sala ou personagem aonde este item está
  epara r1 = este, r1.item, r1 = r1.dono
  efim
  se persolugar # Tem personagem sentado: Destino deve ser uma sala
    ret !arg0.s_sala, 0
    listaitem i
    int8 j = jogtot & 1 # Quantidade de jogadores
    int8 p = pnjtot & 1 # Quantidade de PNJs
    int32 vol = voltot # Volume total
    epara i = persolugar.ini, i, i.depois
      vol += i.obj.voltot, j += (i.obj.jogtot & 1), p += (i.obj.pnjtot & 1)
    efim
    ret j && j + (arg0.jogtot >> 1) > arg0.s_jog, 0
    ret p && p + (arg0.pnjtot >> 1) > arg0.s_pnj, 0
    v2 = (arg0.volmax - arg0.volden) / vol
    v3 = r1 == arg0 ? v1 : (arg0.objlimite - (arg0.objnum >> 1)) / (objnum >> 1)
  senao arg0.item # Destino é item
    v2 = (arg0.volmax - arg0.volden) / voltot
    ref r2
    epara r2 = arg0, r2.item, r2 = r2.dono
    efim
    v3 = r1 == r2 ? v1 : (r2.objlimite - (r2.objnum >> 1)) / (objnum >> 1)
  senao # Destino não é item
    v2 = (arg0.volmax - arg0.volden) / voltot
    v3 = r1 == arg0 ? v1 : (arg0.objlimite - (arg0.objnum >> 1)) / (objnum >> 1)
  fimse
  ret intpos(intdiv(intmin(v1, v2, v3)))

func recalc_exec # Ajusta variáveis
  bitver = 17, bitinv = 3
  var.z_armafalha_ = armafalha
  var.z_armaaddprecisao_ = armaaddprecisao
  var.z_armamin_ = armamin
  var.z_armamax_ = armamax
  recalc1_auto, cmd_recalc1(este)
# Modificadores
  txt512 lin
  epara lin = var.ini("f_"), lin, lin = var.depois(lin, "f_")
    [lin]:recalc2_auto, $[lin].cmd_recalc2(este)
  efim
# Efeitos
  listaitem i
  epara i = dentro2.ini, i, i.depois
    [i.obj]:recalc2_auto, i.obj.cmd_recalc2(este)
  efim
  epara i = evento.ini, i, i.depois
    i.obj.cmd_recalc3(este)
  efim
  atribs_exec
  recalc = 0

func tipoitem2
# Nota: ao adicionar ou remover algum tipo aqui, acertar também:
# 1. a classe classe menu_econfig_itens em econfig.int
# 2. a classe opc_vetoritemtipos em menus.int
  txt12 tipo = tipoitem
  i_abertoini && (tipo |= config:item_container)
  armatipo && (tipo |= config:item_arma)
  luzitem && (tipo |= config:item_luz)
  i_chave && (tipo |= config:item_chave)
  vestir1 && vestir1 != "0" && (tipo |= config:item_vestimenta)
  (f_tipo == 1 || f_tipo == 2) && (tipo |= config:item_bebida)
  f_tipo == 3 && (tipo |= config:item_comida)
  f_tipo == 4 && (tipo |= config:item_pergaminho)
  ret tipo

func tipoitem_mudou # Deve ser chamado quando o tipo de item mudou
  dono.perso && vestpos < 50 && ((vestpos ? dono.tipoitemvestir2 : dono.tipoiteminv2) = "")

func descpos
  $mens.p(este)
  ret $mens.txt(descsala(arg0), arg0)

func teclou # Processa comando
# arg0=comando
  teclouperm(arg0, $perm_[jogperm])

func teclouperm # Processa comando com permissões específicas
# arg0 = comando
# arg1 = objeto perm que contém as permissões
  ref obj # Objeto que vai processar o comando
  prog p # Para procurar o objeto
  ret !arg0, nulo
# Obtém o comando
  enquanto 1
    sair obj = $cmd_[txt1(arg0)].objcmd(este, arg1) # Checa comando exato
    uint8 nivel1 = 255
    ref obj1
    nomeobj n
    n.ini("1000 cmd_" + txt1(arg0), 1000)
    epara p.iniclasse("cmd_" + txt1(txte(arg0))), p.lin, p.depois
      continuar !(obj1 = $[p.texto].objcmd(este, arg1)) || !n.nome(obj1)
      continuar nivel1 <= obj1.objnivel(este, arg1)
      obj = obj1, nivel1 = obj1.objnivel(este, arg1)
      sair !nivel1
    efim
    sair
  efim
# Checa se é magia
  se obj.lancamagia
    txt200 lin
    lin = txtremove(txt2(arg0), "EMDSA")
    obj = ref($magia_[txt1(lin)].objcmd(este))
    se !obj && lin
      uint8 nivel1 = 255
      ref obj1
      nomeobj n
      n.ini("1000 magia_" + txt1(lin), 1000)
      epara p.iniclasse("magia_" + txt1(txte(lin))), p.lin, p.depois
        continuar !(obj1 = $[p.texto].objcmd(este, arg1)) || !n.nome(obj1)
        continuar nivel1 <= obj1.objnivel(este, arg1)
        obj = obj1, nivel1 = obj1.objnivel(este, arg1)
        sair !nivel1
      efim
    fimse
# Magia: Gera eventos
    listaobj l
    epara l.addfim(este.evento), l, l.ini.remove
      ret l.objini.cmd_escr(este, arg0, obj), nulo
    efim
# Magia: Executa comando
    se !lin
      msg("Lançar que magia?")
    senao !obj
      msg("Você não possui a magia " + lin)
    senao posicao < obj.posic
      msgposicao
    senao
      obj.escr(este, txt2(lin), arg1)
    fimse
    ret
  fimse
# Gera eventos
  listaobj l
  epara l.addfim(este.evento), l, l.ini.remove
    ret l.objini.cmd_escr(este, arg0, obj), nulo
  efim
# Executa comando
  ret !obj, msg("O quê?")
  ret posicao < obj.posic, msgposicao
  ret obj.escr(este, txt2(arg0), arg1)

func msg # Mensagem para todos das salas internas
  ret !socktot, nulo
  listaitem i1
  listaitem i2
  epara i1 = dentro2.ini, i1, i1.depois
    continuar !i1.obj.s_sala || !i1.obj.socktot
    epara i2 = i1.obj.dentro2.ini, i2, i2.depois
      i2.obj.msg(arg0)
    efim
  efim

func msgtodos # Mensagem para todos das salas internas que estiverem acordados
  ret !socktot, nulo
  listaitem i1
  listaitem i2
  epara i1 = dentro2.ini, i1, i1.depois
    continuar !i1.obj.s_sala || !i1.obj.socktot
    epara i2 = i1.obj.dentro2.ini, i2, i2.depois
      i2.obj.posicao > 4 && i2.obj.msg(arg0)
    efim
  efim


classe comum_itemgrupo
herda comum_item
# Itens mais simples:
# Quando houver mais de um em um mesmo lugar, eles são agrupados em um
# único objeto. A única exceção é quando forem vestidos (não são agrupados).
const item = 2 # Para identificar que é item
sav uint16 objtot # Quantidade de itens

func objproc # Procura um objeto do mesmo tipo em uma listaobj
# Objetivo: saber se pode agrupar objetos
# arg0 = variável listaobj
# Retorna: o objeto correspondente ou nulo se não houver
  listaitem i
  epara i = arg0.ini(este), i, i.objdepois
    ret i.obj.var == var, ref(i.obj)
  efim

func ini # Objeto foi criado (arg0=dono, arg1=quantidade, arg2=variáveis de var)
  objtot = arg1
  !objtot && (objtot = 1) # Garante pelo menos um item
  se arg2 || inivar
    textotxt t
    epara t.addfim(txttroca(txt(arg2) + "\n" + inivar, ",", "\n")), t.linhas, var.mudar(t.remove)
    efim
  fimse
  var.limpar("e_")
  comum_obj:ini, cmd_ini(arg0, arg1, arg2, arg3, arg4)
  recalc_exec
  arg0 && mudadono(arg0, objtot)

func mudadono # Item muda de dono (arg0 = novo dono, arg1 = quantidade)
  ret !ref(arg0) || 0 >= arg1, nulo
  ref r
  r = objproc(arg0.dentro1) # r = objeto no novo dono
  se objtot > arg1 # Se não vai mover tudo
    objtot -= arg1, ajustapeso
    se r
      r.objtot += arg1, r.ajustapeso
      ret r
    senao
      r = criar(este, arg0, arg1)
      r.var = var
      ret r
    fimse
  senao r # Se já existe objeto no destino
    dono.perso && ((vestpos ? dono.tipoitemvestir2 : dono.tipoiteminv2) = "")
    r.objtot += arg1, r.ajustapeso
    apagar(este), mdono(nulo)
    ret r
  senao # Senão, apenas muda o dono
    dono.perso && ((vestpos ? dono.tipoitemvestir2 : dono.tipoiteminv2) = "")
    arg0.perso && (arg0.tipoiteminv2 = "")
    mdono(arg0), cmd_mudadono
    ret este
  fimse

func vestir # Veste o item, arg0=posição
  uint8 pos = arg0
  se !pos # Checa se deve remover
    ret !vestpos, nulo # Retorna se não está vestindo
    dono.recalc = 1 # Para recalcular atributos
    refvar r = objproc(dono.dentro1) # Procura objeto que não está vestindo
    se r # Encontrou: aumenta a quantidade
      r.objtot++, r.ajustapeso, apagar(este), mdono(nulo)
      dono.tipoitemvestir2 = ""
    senao # Não encontrou: move
      vestpos = 0, idono.remove, idono = dono.dentro1.addfim(este)
      dono.tipoitemvestir2 = dono.tipoiteminv2 = ""
    fimse
  senao objtot <= 1 # Se só tem um objeto
    dono.recalc = 1 # Para recalcular atributos
    dono.tipoitemvestir2 = dono.tipoiteminv2 = ""
    vestpos = pos
    idono.remove, idono = dono.dentro2.addfim(este)
    pos == 50 && (dono.iempu = idono)
  senao # Tem mais de um objeto, cria objeto e veste
    dono.recalc = 1 # Para recalcular atributos
    dono.tipoitemvestir2 = ""
    objtot--, ajustapeso
    refvar r = criar(este)
    r.var = var
    r.mdono(dono), r.vestpos = pos
    r.idono.remove, r.idono = dono.dentro2.addfim(r)
    pos == 50 && (r.dono.iempu = r.idono)
  fimse

func apagar # Apaga o item (arg0 = quantidade)
  ret objtot -= arg0, ajustapeso
  apagar(este), mdono(nulo)

func cabedentro # Retorna quantos itens iguais a esse cabem em sala/item/personagem
# arg0 = sala, item ou personagem
  ret este == arg0, 0
  ret arg0.objmax <= arg0.dentro1.total, 0
  se arg0.item
    ref r1
    ref r2
    epara r1 = este, r1.item, r1 = r1.dono
    efim
    epara r2 = arg0, r2.item, r2 = r2.dono
    efim
    ret r1 != r2 && r2.objlimite <= r2.objnum >> 1, 0
  senao
    ref r1
    epara r1 = este, r1.item, r1 = r1.dono
    efim
    ret r1 != arg0 && arg0.objlimite <= arg0.objnum >> 1, 0
  fimse
  refvar v1 = (arg0.volmax - arg0.volden) * objtot / voltot
  ret intpos(intdiv(v1))


classe comum_itemperso
herda comum_item
# Itens completos
const item = 3 # Para identificar que é item
listaobj persolugar # Quem está sentado ou deitado
# const i_abertoini = 0 # Valor inicial de aberto
sav uint8 i_aberto # Situação atual do container, ou 0 se não for container
const luztipo = intpos(luztempo) ? 2 : 0
sav inttempo luztempo # Quanto tempo produz luz, <0 se estiver apagado
# const luzitem = 0 # Tipo de luz
# const luzini = 1000 # Duração da luz
# const luztxt = "" # Mensagem quando a luz acaba
# const luzfim = 0 # Se item some quando a luz acaba

func fim # Objeto foi apagado
  persolugar.limpar, comum_obj:fim

func mudadono # Item muda de dono (arg0 = novo dono, arg1 = quantidade)
  dono.perso && ((vestpos ? dono.tipoitemvestir2 : dono.tipoiteminv2) = "")
  arg0.perso && (arg0.tipoiteminv2 = "")
  mdono(arg0), cmd_mudadono
  listaobj l
  epara l.addfim(persolugar), l, l.ini.remove
    l.objini.mudadono(dono, 1)
  efim
  ret este

func recalc_exec # Acerta variáveis
  bitver = 17, bitinv = intpos(luztempo) ? 1 : 3
  var.z_armafalha_ = armafalha
  var.z_armaaddprecisao_ = armaaddprecisao
  var.z_armamin_ = armamin
  var.z_armamax_ = armamax
  recalc1_auto, cmd_recalc1(este)
  int(i_abertoini) < 2 || i_aberto < 2 ? (i_aberto = i_abertoini)
  se int(luzitem) != 7 # Se não acende ao vestir
  senao vestpos && luztempo < 0 # Vestiu: acende
    luztempo.pos, ajustapeso
    refvar d = dono
    listaobj l
    epara l.addfim(d.evento), l, l.ini.remove
      l.objini.cmd_acendeu(d, este, d)
    efim
    epara l.addfim(evento), l, l.ini.remove
      l.objini.cmd_acendeu(d, este, este)
    efim
  senao !vestpos && luztempo > 0 # Removeu: apaga
    luztempo.neg, ajustapeso
    refvar d = dono
    listaobj l
    epara l.addfim(d.evento), l, l.ini.remove
      l.objini.cmd_apagou(d, este, d)
    efim
    epara l.addfim(evento), l, l.ini.remove
      l.objini.cmd_apagou(d, este, este)
    efim
  fimse
# se intpos(luztempo) > 0
# textopos p
# p = atribs.ini, p.txtproc("\nBrilhando\n", 0) >= 0 && p.remove
# atribs.addini("Aceso")
# fimse
# Modificadores
  txt512 lin
  epara lin = var.ini("f_"), lin, lin = var.depois(lin, "f_")
    [lin]:recalc2_auto, $[lin].cmd_recalc2(este)
  efim
# Efeitos
  listaitem i
  epara i = dentro2.ini, i, i.depois
    [i.obj]:recalc2_auto, i.obj.cmd_recalc2(este)
  efim
  epara i = evento.ini, i, i.depois
    i.obj.cmd_recalc3(este)
  efim
  atribs_exec
  recalc = 0

func luztempo_exec # A luz apagou
  se luztxt
    ref r
    epara r = dono, r.perso, r = r.dono
    efim
    r.msg(luztxt)
  fimse
  luzfim && apagar(este)
  listaobj l
  epara l.addfim(evento), l, l.ini.remove
    l.objini.cmd_apagou(nulo, este, este)
  efim
  !luzfim && ajustapeso + recalc_exec

func vestir # Veste o item, arg0=posição
  luzitem == 7 && (recalc = 1) # Para acender ou apagar o item
  dono.recalc = 1 # Para recalcular atributos
  dono.tipoitemvestir2 = dono.tipoiteminv2 = ""
  idono.remove, vestpos = arg0
  se vestpos
    idono = dono.dentro2.addfim(este)
    vestpos == 50 && (dono.iempu = idono)
  senao
    idono = dono.dentro1.addfim(este)
  fimse


classe comum_corpo
herda comum_item
# Corpo de um personagem que morreu
const i_aberto = 1 # Para indicar que é container (sempre aberto)
const descver = var.z_descver
const descident = var.z_descident
uint32 pesoobj # Peso do objeto (em gramas)
uint32 volobj # Volume do objeto quando estiver vazio
const volmax = 0 # Para não poder colocar nada no corpo
const nome = "corpo"
inttempo tempo
int8 tipocorpo # Variável p_corpo_tipo do personagem que gerou o corpo
# Se tipocorpo >= 2, transfere os itens do personagem que morreu
# Se tipororpo >= 3, quando o corpo se decompõe, itens e dinheiro vão para a sala

func ini # arg0 = personagem que morreu, arg1 = variável p_corpo_tipo
  volobj = arg0.volobj, pesoobj = arg0.pesoobj
  tempo = 10 * arg0.varherda("p_corpo_tempo")
  tipocorpo = arg1
  $mensvis.p(arg0, este)
  $mensvis.mens = arg0.ident2
  var.z_ident = $mensvis.txt(arg0.varherda("p_corpo_ident"), nulo)
  var.z_descnome = $mensvis.txt(arg0.varherda("p_corpo_descnome"), nulo)
  var.z_descpos = $mensvis.txt(arg0.varherda("p_corpo_descsala"), nulo)
  var.z_descver = $mensvis.txt(arg0.varherda("p_corpo_descver"), nulo)
  var.z_descident = $mensvis.txt(arg0.varherda("p_corpo_descident"), nulo)
  var.z_corpo_some = $mensvis.txt(arg0.varherda("p_corpo_some"), nulo)
  refvar infosexo = arg0.varherda("p_corpo_msexo")
  var.z_msexo = infosexo != 2 ? infosexo : arg0.msexo2
  comum_obj:ini
  arg0.dono && mudadono(arg0.dono)
  recalc_exec
# Acorda personagens que comem corpos
  se tipocorpo
    listaitem i
    epara i = dono.dentro2.ini, i, i.depois
      i.obj.p_comecorpo && i.obj.p_proc == 0 && (i.obj.p_proc = 1)
    efim
  fimse
# Transfere itens e moedas para o corpo
  ret tipocorpo < 2, nulo
  var.z_moedas = arg0.var.z_moedas
  listaobj l
  epara l.addfim(arg0.dentro1, arg0.dentro2), l, l.ini.remove
    l.objini.item && l.objini.mudadono(este, l.objini.objtot)
  efim
  se var.z_moedas
    $mens.p(arg0, este)
    se dentro1.total
      $mens.mvis2("", perso_cfg:p_corpo_itens_moedas)
    senao
      $mens.mvis2("", perso_cfg:p_corpo_moedas)
    fimse
  senao dentro1.total
    $mens.p(arg0, este)
    $mens.mvis2("", perso_cfg:p_corpo_itens)
  fimse

func tempo_exec
  refvar d = ref(dono)
  d.msg(var.z_corpo_some)
  este.apagar(100000) # Nota: isso altera a variável dono
  se tipocorpo >= 3
    d.var.z_moedas_ += var.z_moedas_
    var.z_moedas_ = 0
    listaobj l
    epara l.addfim(dentro1, dentro2), l, l.ini.remove
      l.objini.mudadono(d, l.objini.objtot)
    efim
  fimse


classe comum_chave
herda comum_item
# Chave da casa de um jogador
const nome = "chave"
const ident = $[txt1(i_chave)].c_chave_ident ?? "chave"
const descnome = $[txt1(i_chave)].c_chave_descnome ?? "a chave de uma casa"
const descver = $[txt1(i_chave)].c_chave_descver
const manterperso = 1 # Para não perder a chave ao entrar em uma sala que perde itens
sav txt50 i_chave # Código da chave

func descpos
  refvar r = $[txt1(i_chave)].c_chave_descsala
  ret r ?? txtcopiamai(var.z_descnome ?? descnome, "A") + " está aqui."
