classe casa
listaobj salas
intexec inicasa
const iniclasse = arg0 != "casa" && !$[arg0] && criar(arg0)
const ini = inicasa = 1
sav indiceobj nomejog # "cj " + nome codificado + " " + prefixo da área
sav txt50 chave # Código da chave que abre a porta da casa
sav int32 diataxa # A partir de quando deve pagar a taxa de manutenção da casa
int8 infotaxa # 0=taxa em dia, 1=avisar, 2=bloquear casa
inttempo tempotaxa # Para atualizar infotaxa
int1 objmudou # Se as informações da casa foram mudadas (precisa salvar a casa)
const ident = nome
#
# Ordem que deve organizar as constantes:
const admordem = "area\nnome\ndesc\nident\nvalor\nc_salas\n\
c_chave_ident c_chave_descnome c_chave_descsala c_chave_descver"

func fim # Apaga arquivo da casa
  ret inttotal(este) != 1, nulo # Por segurança: só apaga arquivo se tiver 1 objeto
  arqsav sav1
  sav1.apagar("sav2/c-" + txt(este, 2) + ".sav")

func inicasa_exec # Carrega objetos da casa
  listaobj l1
  l1.addfim(este)
  arqsav sav1
  sav1.ler("sav2/c-" + txt(este, 2) + ".sav", l1)
  l1.ini.remove # Remove da lista, porque é o objeto de controle da casa
# Cria objeto casa_reset
  !$casa_reset && criar("casa_reset")
# Acerta variáveis
  listaitem item
  debug d
  epara item = l1.ini, item, item.depois
    d.ini, item.obj.ajustaobj
  efim
  epara item = l1.fim, item, item.antes
    d.ini
    ref obj = item.obj
    se txt(obj, 0, 2) == "s_" # Se for sala
      $[obj] != obj && apagar($[obj]) # Apaga a sala que já existia
      obj.ini # Inicializa essa sala
    senao !obj.dono # Se for item sem dono
      apagar(obj) # Apaga o item
    fimse
    obj.var.limpar("d_", "j_")
    obj.item == 2 && !obj.objtot && (obj.objtot = 1)
    obj.ajustapeso, obj.acertapos, obj.recalc = 1
    $casa_reset.l.addfim(obj) # Para chamar a função cmd_sav do item
  efim
# Indica que nenhuma sala mudou
  zerar
# Checa a fechadura
  !chave && mudachave
# Checa se ainda pertence a um jogador
  se nomejog
    arqsav sav
    se sav.existe("sav1/" + txtsub(nomejog, 1, 1) + ".sav")
      nomejog = "cj " + txtsub(nomejog, 1, 1) + " " + area
    senao
      nomejog = "", objmudou = 1
    fimse
  fimse
  nomejog && tempotaxa_exec

func tempotaxa_exec # Atualiza variável infotaxa
  datahora hora
  hora.agora
  refvar atraso = hora.numdias - diataxa
  se intpos(config:casatempotaxa) == 0 # Sem taxa de manutenção das casas
    infotaxa = 0
    tempotaxa = 0
  senao !nomejog # Se não pertence a nenhum jogador
    infotaxa = 0
    tempotaxa = 0
  senao !diataxa # Se o tempo quando pagou a taxa está vazio
    infotaxa = 0
    tempotaxa = (86402 - hora.numseg) * 10 # Dois segundos após o dia mudar
    refvar tempo = intpos(config:casatempotaxa)
    diataxa = hora.numdias + tempo
    tempo && (diataxa = intdiv(diataxa / tempo) * tempo)
    objmudou = 1
  senao atraso >= config:casatempoperder
    infotaxa = 0
    tempotaxa = 0
    nomejog = ""
    mudachave
  senao atraso >= config:casatempobloq
    infotaxa = 2
    tempotaxa = (86402 - hora.numseg) * 10 # Dois segundos após o dia mudar
  senao atraso >= config:casatempoaviso
    infotaxa = 1
    tempotaxa = (86402 - hora.numseg) * 10 # Dois segundos após o dia mudar
  senao
    infotaxa = 0
    tempotaxa = (86402 - hora.numseg) * 10 # Dois segundos após o dia mudar
  fimse

func acerta_mudou # Chamado quando a lista das salas da casa mudou
  acerta_funcoes(c_salas)
  config:salvar
  objmudou = 1

func acerta_funcoes # Cria lista de funções necessárias para a casa
# arg0 = lista de salas
  textotxt t
  textopos pos
  txt512 f_mudou
  txt512 f_zerar
  txt512 f_addlista
  f_mudou = "func mudou # Se houve alguma mudança\n"
  f_mudou += "# Não alterar; função criada automaticamente\nret objmudou"
  f_zerar = "func zerar # Indica que não houve mudança na casa\n"
  f_zerar += "# Não alterar; função criada automaticamente\nobjmudou=0"
  f_addlista = "func addlista # Adiciona salas da casa em uma listaobj\n"
  f_addlista += "# arg0 = listaobj\n"
  f_addlista += "# Não alterar; função criada automaticamente\n"
  arg0 && t.addfim(arg0)
  epara pos = t.ini, pos.lin, pos.depois
    refvar lin = pos.texto
    f_mudou += ((pos.linha + 1) % 3 ? "||$s_" : ",1\nret $s_") + lin + ".objmudou"
    f_zerar += (pos.linha % 3 ? ", $s_" : "\n$s_") + lin + ".objmudou=0"
    f_addlista += (pos.linha ? ",$s_" : "\narg0.addfim($s_") + lin
  efim
  t.linhas && (f_addlista += ")")
  prog p
  p.criar(este, f_mudou)
  p.criar(este, f_zerar)
  p.criar(este, f_addlista)

func limpa_sjog # Retira as permissões das salas (comando Sjog)
  ret !c_salas, nulo
  textotxt t
  epara t.addfim(c_salas), t.linhas, $s_[t.remove].var.limpar("u_")
  efim

func mudachave # Muda o código da fechadura da casa
  datahora hora
  hora.agora
  chave = txt(este) + " " + rand(10) + rand(10) + hora.numtotal
  objmudou = 1

func mudou # Se houve alguma mudança (há necessidade de salvar)
# Nota: essa função é recriada em cada casa pela função acerta_mudou
  ret objmudou

func salvar # Salva objetos da casa
  listaitem item
  listaobj lista
  debug dbg
  dbg.exec = 50000
  zerar
  lista.addfim(este)
  addlista(lista)
  item = lista.ini, item.depois
  enquanto item
    se item.obj.objsav & 1 != 1 # Se item.obj.objsav!=1 e item.obj.objsav!=3
      item.removedepois
    senao lista.total < 2000
      lista.addfim(item.obj.dentro1, item.obj.dentro2, item.obj.dentro3), item.depois
    senao
      item.depois
    fimse
  efim
  arqsav sav1
  sav1.salvar("sav2/c-" + txt(este, 2) + ".sav", lista, 365000, "x")

func descloja # Retorna informações da casa para a venda
  uint16 itens
  uint8 salas
  textotxt t
  textopos p
  c_salas && t.addfim(c_salas)
  epara p = t.ini, p.lin, p.depois
    itens += $s_[p.texto].objmax, salas++
  efim
  txt300 lin
  lin = txtcopiamai(nome, "A")
  lin += salas == 1 ? ", possui uma sala" : ", possui " + salas + " salas"
  ret lin + ", até " + itens + " itens"


classe casa_reset
# Chama a função cmd_sav dos objetos das casas (objetos da listaobj l)
intexec ex
listaobj l

func ini
  ex = 1

func ex_exec
  ex = 1
  ref r
  enquanto 1
    ret !l.objfim, apagar(este)
    r = l.objfim, l.fim.remove, r.cmd_sav(perso)
    debug d
    d.ini
  efim


classe casa_taxa
# Atualiza a variável infotaxa de todas as casas
# Deve ser chamado com: casa_taxa:atualiza
const iniclasse = !$[arg0] && criar(arg0)
prog p
debug d

func atualiza # Atualiza as casas
  d.exec = 50000
  epara p.iniherdainv("casa"), p.lin, p.depois
    $[p.texto].tempotaxa = 1
  efim
