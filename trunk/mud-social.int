classe jog_admsocial
# Comandos sociais
#
const adm_social = "\b\c3Comandos sociais\b\n\
\c2LSOC\b [nome]\n\
  Lista sociais que começam com o nome especificado.\n\
\c2CSOC\b <nome>\n\
  Cria social. Nome pode conter letras e números.\n\
\c2ESOC\b <nome>\n\
  Edita social.\n\
\c2ASOC\b <nome>\n\
  Apaga social."
const txt_posicao = "morto\n\
mortalmente ferido\n\
incapacitado\n\
fraco\n\
dormindo\n\
descansando\n\
sentado\n\
lutando\nem pé"

func cmd_lsoc # Listar sociais
  prog p
  se !p.iniclasse("soc_" + arg0)
    msg("\bNenhum social encontrado.")
  senao
    textotxt t
    txt200 n
    ref r
    t.addfim("\bComando (nome, nível, alvo):")
    enquanto p.lin
      r = $[p.texto], n = txt(r, 4) + ", " + r.nivel + ","
      r.sem1 && r.sem2 && (n += " sem_args")
      r.perso1 && r.perso2 && r.perso3 && (n += " perso")
      r.item1 && r.item2 && (n += " item")
      t.addfim(n), p.depois
    efim
    msg2(t.remove(1000))
  fimse
  ret 1

func cmd_csoc # Criar social
  prog p
  se arg0 == ""
    msg("Tecle o nome do social após CSOC")
  senao p.existe("soc_" + arg0)
    msg("Social já existe: " + arg0)
  senao
    p.criar("soc_" + txtmin(arg0) + "\nb-social\nherda soccomum")
    config:salvar
    msg("\bSocial criado: " + txtmin(arg0))
    admlog("criou social " + txtmin(arg0))
  fimse
  ret 1

func cmd_esoc # Editar social
  prog p
  se arg0 == ""
    msg("Tecle o nome do social após ESOC")
  senao !p.existe("soc_" + arg0)
    msg("Social não existe: " + arg0)
  senao
    var.classe1 = "soc_" + arg0
    m_menu("adm_social")
  fimse
  ret 1

func cmd_asoc # Apagar social
  prog p
  se arg0 == ""
    msg("Tecle o nome do social após ASOC")
  senao !p.existe("soc_" + arg0)
    msg("Social não existe: " + arg0)
  senao
    tpasso = arg0, p_asoc
  fimse
  ret 1

func p_asoc # Confirmar que quer apagar social
  passo = ""
  se arg0 == "n"
    msg("Cancelado")
  senao arg0 == "s"
    prog p
    p.apagar("soc_" + tpasso)
    config:salvar
    msg("Social apagado: " + tpasso)
    admlog("apagou social " + tpasso)
  senao
    passo = "asoc"
    msg("Apagar social " + tpasso + "? Tecle S ou N")
  fimse
  ret 1


classe adm_social
const titulo = "Social " + txt(var.classe1, 4)
#
const nome1 = "Tipo de comando       "
const tipo1 = "opcao"
const classe1 = var.classe1
const var1 = "tipo"
const extra1 = config:social_txt
#
const nome2 = "Editar tipos          "
const info2 = "Os tipos existentes na opção 1"
const tipo2 = "txtopcao--"
const classe2 = "config"
const var2 = "social_txt"
const extra2 = "1 30"
#
const nome3 = "Nível mínimo          "
const tipo3 = "numero"
const classe3 = var.classe1
const var3 = "nivel"
#
const nome4 = "Posição mínima        "
const tipo4 = "opcao"
const classe4 = var.classe1
const var4 = "posic"
const extra4 = txt_posicao
#
const nome5 = "Alvo posição mínima   "
const tipo5 = "opcao"
const classe5 = var.classe1
const var5 = "alvopos"
const extra5 = txt_posicao
#
const nome6 = "Mostrar invisível     "
const info6 = "Se o social aparece para quem não puder ver o personagem"
const tipo6 = "simnao"
const classe6 = var.classe1
const var6 = "mvis"
#
const nome7 = "Sem args; perso       "
const info7 = "Mensagem para o personagem"
const tipo7 = "linha"
const classe7 = var.classe1
const var7 = "sem1"
#
const nome8 = "Sem args; outros      "
const info8 = "Mensagem para os outros"
const tipo8 = "linha"
const classe8 = var.classe1
const var8 = "sem2"
#
const nome9 = "Argumento não existe  "
const info9 = "Quando o objeto ou personagem não existe"
const tipo9 = "linha"
const classe9 = var.classe1
const var9 = "invalido"
#
const nome10 = "Com ele mesmo; perso  "
const info10 = "Mensagem para o personagem"
const tipo10 = "linha"
const classe10 = var.classe1
const var10 = "auto1"
#
const nome11 = "Com ele mesmo; outros "
const info11 = "Mensagem para os outros"
const tipo11 = "linha"
const classe11 = var.classe1
const var11 = "auto2"
#
const nome12 = "Com personagem; perso "
const info12 = "Mensagem para o personagem"
const tipo12 = "linha"
const classe12 = var.classe1
const var12 = "perso1"
#
const nome13 = "Com personagem; alvo  "
const info13 = "Mensagem para o alvo"
const tipo13 = "linha"
const classe13 = var.classe1
const var13 = "perso2"
#
const nome14 = "Com personagem; outros"
const info14 = "Mensagem para os outros"
const tipo14 = "linha"
const classe14 = var.classe1
const var14 = "perso3"
#
const nome15 = "Com objeto; perso     "
const info15 = "Mensagem para o personagem"
const tipo15 = "linha"
const classe15 = var.classe1
const var15 = "item1"
#
const nome16 = "Com objeto; outros    "
const info16 = "Mensagem para os outros"
const tipo16 = "linha"
const classe16 = var.classe1
const var16 = "item2"
#
const nome17 = "Caracteres especiais nas mensagens"
const extra17 = "As mensagens podem conter os seguintes caracteres especiais:\n\
$$ Símbolo $\n\
$P Nome do personagem\n\
$Q Nome do personagem escolhido, ex. Lula\n\
$R Nome do personagem em batalha, ex. Lula de fulano\n\
$A Nome do alvo\n\
$B Nome do alvo escolhido, ex. Lula\n\
$C Nome do alvo em batalha, ex. Lula de fulano\n\
$D Nome do alvo, sendo que pode ser Animal X de fulano\n\
$O Nome do objeto\n\
$S Depende do personagem: o, a, um ou uma\n\
$T Depende do alvo: o, a, um ou uma\n\
$U Depende do objeto: o, a, um ou uma"


classe cmd_social
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Social\b\n\
Sintaxe: SOCIAL  [nome do comando]\n\
Sem argumentos, mostra a lista de comandos sociais disponíveis.\n\
Seguido do nome do social mostra as mensagens que o social emitirá.\n\n\
Os comandos sociais são usados para interpretação entre personagens.\n\
São comandos que enviam uma mensagem para os personagens na mesma sala,\n\
mas não causam nenhum dano nos personagens e/ou itens envolvidos."
const posic = 0
const o1 = $cmd2_socialX
const o2 = $cmd2_socialY
const o3 = $cmd2_socialZ

func escr
  ret arg1, escr_arg(arg0, arg1)
  textotxt t
  prog p
  epara p.iniclasse("soc_"), p.lin, p.depois
    arg0.pnivel >= $[p.texto].nivel && t.addfim(txt2(txte(p.texto)))
  efim
  se t.linhas
    t.addfim("Comandos sociais disponíveis:\n" + txttroca(t.remove(1000), "\n", ", "))
    t.dividelin(50, 75)
    arg0.msg2(t.remove(1000))
  senao
    arg0.msg("Nenhum comando social disponível.")

func escr_arg # Com algum argumento
  textotxt t # Mensagens
  prog p # Para obter o objeto correspondente ao comando
  ref r # Objeto correspondente ao comando
  txt100 nome # Nome do comando
  epara p.iniclasse("soc_" + arg1), p.lin, p.depois
    sair arg0.pnivel >= $[p.texto].nivel
  efim
  ret !p.lin, arg0.msg("Comando social não existe: " + arg1)
  r = $[p.texto]
  nome = txt2(txte(r))
  $mens.p(o1)
  se r.sem1 && r.sem2
    t.addfim($mens.proc("\nSe " + o1.descnome + " digitar " + nome + ", receberá:\n" + r.sem1, \
o1))
    t.addfim($mens.proc("E os demais:\n" + r.sem2, o2))
  fimse
  $mens.p(o1, o1)
  se r.auto1 && r.auto2
    t.addfim($mens.proc("\nSe " + o1.descnome + " digitar " + nome + " " + o1.nome + ", receberá:\
\n" + r.auto1, o1))
    t.addfim($mens.proc("E os demais:\n" + r.auto2, o2))
  fimse
  $mens.p(o1, o2)
  se r.perso1 && r.perso2 && r.perso3
    t.addfim($mens.proc("\nSe " + o1.descnome + " digitar " + nome + " " + o2.nome + ", receberá:\
\n" + r.perso1, o1))
    t.addfim($mens.proc("E " + o2.descnome + ":\n" + r.perso2, o2))
    t.addfim($mens.proc("E os demais:\n" + r.perso3, este))
  fimse
  $mens.p(o1, nulo, o3)
  se r.item1 && r.item2
    t.addfim($mens.proc("\nSe " + o1.descnome + " digitar " + nome + " " + o3.nome + ", receberá:\
\n" + r.item1, o1))
    t.addfim($mens.proc("E os demais:\n" + r.item2, este))
  fimse
  se t.linhas
    t.addini("\b\c3" + txtcopiamai(nome, "A") + "\b")
    arg0.msg2(t.remove(1000))
  senao
    arg0.msg("Esse social ainda não está funcionando.")


classe cmd2_socialX
# Pseudo personagem 1 para gerar mensagens do social
const perso = 1
const nome = "João"
const descnome = "João"
const sexo = 1
const visivel = 1
const persobat = este
const persoesc = este

func iniclasse
  criar(arg0)


classe cmd2_socialY
herda cmd2_socialX
# Pseudo personagem 2 para gerar mensagens do social
const nome = "Maria"
const descnome = "Maria"
const sexo = 0


classe cmd2_socialZ
# Pseudo item para gerar mensagens do social
const item = 1
const nome = "bolsa"
const descnome = "uma bolsa"
const sexo = 0
const visivel = 1

func iniclasse
  criar(arg0)


classe soccomum
herda comando_comum
# Comum a todos os sociais
const objcmd = arg0.pnivel >= nivel ? este
const nivel = 0
const posic = 5
const alvopos = 5
const mvis = 1
const invalido = "Você não vê $m."
# const auto2 = auto1
# const perso2 = perso1
# const perso3 = perso1
# const item2 = item1
# const item2 = item1

func escr
  $mens.mens = arg1
  listaobj l
  se !arg1 # Sem argumentos
    ret !sem1, arg0.msg("Digite alguma coisa após " + txt(este, 4))
    $mens.p(arg0)
    mvis ? $mens.mtodos2(sem1, sem2) : $mens.mvis2(sem1, sem2)
    epara l.addfim(arg0.evento), l, l.ini.remove
      l.objini.cmd_social1(arg0, nulo, este)
    efim
    ret
  fimse
  nomeobj n
  ref r
  n.ini(arg1, 1)
  perso1 && l.addfim(arg0.dono.dentro2)
  item1 && l.addfim(arg0.dono.dentro1, arg0.dentro1)
  epara nulo, l, l.ini.remove
    r = l.objini
    continuar !r.visivel(arg0) || !n.nome(r.ident)
    se r.var.u_[arg0.nome]
      ret arg0.msg(r.nome + " ignora suas palavras.")
    senao arg0.var.u_[r.nome]
      ret arg0.msg("Você está ignorando " + r.nome + ".")
    senao r == arg0 && auto1
      ret r.posic < alvopos, arg0.msg("Você não está em condições.")
      $mens.p(arg0)
      mvis ? $mens.mtodos2(auto1, auto2) : $mens.mvis2(auto1, auto2)
    senao r.perso
      $mens.p(arg0, r)
      ret r.posic < alvopos, $mens.mtodos2("$P não está em condições.", "")
      mvis ? $mens.mtodos3(perso1, perso2, perso3) : $mens.mvis3(perso1, perso2, perso3)
    senao
      $mens.p(arg0, nulo, r)
      mvis ? $mens.mtodos2(item1, item2) : $mens.mvis2(item1, item2)
    fimse
    l.limpar
    epara l.addfim(arg0.evento), l, l.ini.remove
      l.objini.cmd_social1(arg0, r, este)
    efim
    epara l.addfim(r.evento), l, l.ini.remove
      l.objini.cmd_social2(arg0, r, este)
    efim
    ret
  efim
  $mens.p(arg0)
  $mens.mtodos2(invalido, "")
