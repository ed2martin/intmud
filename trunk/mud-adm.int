classe comando_adm
# Funções necessárias para os comandos de administração
#
const iniclasse = !$[arg0] && criar(arg0)
const admcod = txttroca(txttroca(arg0, "\"", "\\\""), "\n", "\\n")
const admdec = txttroca(txtvis(arg0), "\\\"", "\"")

func passosair # Sai do passo atual, volta para o menu
  $[arg0.passo = arg0.var.opcpasso].passo(arg0, "\b")
  ret 1

func admlog # Mensagem para todos com a opção "config +admlog"
# arg0.nome = nome do personagem
# arg1 = mensagem
  $misclog.admlog(arg0.nome + ": " + arg1)
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    item.obj.jogconfig.21 && item.obj.msg("\b\d1(adm) " + arg0.nome + " " + arg1 + "\b")
  efim

func cmdlog # Mensagem para todos com a opção "config +cmdlog"
# arg0.nome = nome do personagem
# arg1 = nome do comando
# arg2 = comando (se não tiver nenhuma letra, não envia o texto)
  se txtproc(txtsepara(txttroca(arg2, " ", ""), "L+DLEOV,DLEOV+L"), " ") >= 0
    $misclog.cmdlog(arg1 + " " + arg0.nome + ": " + arg2)
    refvar t = "\b(cmd) " + arg0.nome + " " + arg1 + ": " + arg2 + "\b"
    indiceitem item
    epara item.ini("un "), txt1(item.txt) == "un", item.depois
      item.obj.jogconfig.22 && item.obj.msg(t)
    efim


classe comando_menu
herda comando_adm
const txt_legenda = "Legenda:\n\
<nulo> Significa que a opção não foi definida.\n\
<herda> É herdado de outra classe.\n\
Exemplo, as salas herdam as propriedades das nas áreas.\n\
Outro texto entre os sinais de menor e maior indicam o modo\n\
como a opção foi definida. Exemplo, <func> significa função."
const menu = "<menu>"
ref sock # Objeto jogsock do jogador
const var = sock.var

func passo
  sock = arg0
  casovar txtmin(arg1)
  casose ""
  casose "\b"
    arg0.var.opcnome = "", arg0.var.opcclasse = "", arg0.var.opcvar = ""
    arg0.var.opcpasso = "", arg0.var.opcextra = "", arg0.var.opcexec = ""
    arg0.passo = este
    arg0.msg(titulo + ", tecle O para saber as opções")
    ret 1
  casose "o"
    arg0.txtmais.limpar
    arg0.txtmais.addfim("\b" + titulo)
    prog p
    epara p.inifunctudo(este, "nome"), p.lin, p.depois # Opções de um dígito
      continuar inttotal(p.texto) > 5
      refvar t1 = titu[txt(p.texto, 4)]
      t1 && arg0.txtmais.addfim(t1)
      arg0.txtmais.addfim(menu2(txt(p.texto, 4)))
    efim
    epara p.inifunctudo(este, "nome"), p.lin, p.depois # Outras opções
      continuar inttotal(p.texto) == 5
      refvar t1 = titu[txt(p.texto, 4)]
      t1 && arg0.txtmais.addfim(t1)
      arg0.txtmais.addfim(menu2(txt(p.texto, 4)))
    efim
    arg0.txtmais.addfim("Tecle F seguido de um número se quiser editar como função")
    arg0.txtmais.addfim("V mostra as variáveis alteradas em cada opção (classe:variável)")
    arg0.txtmais.addfim("Z Sair, L Legenda, M seguido de um texto executa comando do MUD")
    arg0.txtmostra
    ret 1
  casose "v"
    arg0.txtmais.limpar
    txt100 lin
    prog p
    epara p.inifunctudo(este, "nome"), p.lin, p.depois # Opções de um dígito
      continuar inttotal(p.texto) > 5
      arg0.txtmais.addfim(menu3(txt(p.texto, 4)))
    efim
    epara p.inifunctudo(este, "nome"), p.lin, p.depois # Outras opções
      continuar inttotal(p.texto) == 5
      arg0.txtmais.addfim(menu3(txt(p.texto, 4)))
    efim
    arg0.txtmostra
    ret 1
  casose "z"
    ret $[menufim], $[menufim].passo(arg0, "\b")
    arg0.msg("Retornando ao jogo")
    arg0.passo = ""
    ret 1
  casose "l"
    arg0.msg(txt_legenda)
    ret 1
  casofim
  se txt(arg1, 0, 1) == "m" # Executa comando do MUD
    arg0.perso.teclou(txtremove(txt(arg1, 1), "E"))
  senao nome[arg1] # Editar opção do menu
    arg0.var.opcnome = txtremove(nome[arg1], "ED")
    arg0.var.opcclasse = clas[arg1]
    arg0.var.opcvar = vari[arg1]
    arg0.var.opcextra = extr[arg1]
    arg0.var.opcpasso = este
    arg0.var.opcvalido_ = txtproc(tipo[arg1], "--") >= 0
    arg0.var.opcexec = exec[arg1]
    vari[arg1] && arg0.msg(menu2(arg1))
    info[arg1] && arg0.msg(info[arg1])
    refvar tipo = txttroca(tipo[arg1], "-", "")
    $[tipo].passo(arg0, "\b")
  senao txt(arg1, 0, 1) == "f" && nome[txt(arg1, 1)] # Editar função
    se txtproc(tipo[txt(arg1, 1)], "-") >= 0
      arg0.msg("Essa opção não pode ser editada como função; escolha outra")
      ret 1
    fimse
    txt20 opc
    opc = txt(arg1, 1)
    arg0.var.opcnome = txtremove(nome[opc], "ED")
    arg0.var.opcclasse = clas[opc]
    arg0.var.opcvar = vari[opc]
    arg0.var.opcextra = extr[opc]
    arg0.var.opcpasso = este
    arg0.var.opcexec = exec[opc]
    se !arg0.var.opcvar
      arg0.msg2(arg0.var.opcextra)
      ret 1
    fimse
    $opc_func.passo(arg0, "\b")
  senao # Nenhuma das anteriores
    arg0.msg("Opção inválida: " + arg1)
  fimse
  ret 1

func menu2 # Usado em m_menu para obter o texto de uma opção do menu
# arg0 = número da opção
  txt100 lin
  txt80 func1 # Função que mostra o conteúdo da variável
  lin = "\b\c2" + arg0 + (txt(arg0, 1) ? "\b." : "\b. ") + nome[arg0]
  refvar maximo = int(colunas)
  inttotal(lin) < maximo && (lin = txt(lin + txtesp(maximo), 0, maximo))
  refvar tipo = txttroca(tipo[arg0], "-", "")
  ret lin + ": " + $[tipo].menu(clas[arg0], vari[arg0], extr[arg0])

func menu3 # Usado em m_menu para obter o nome da variável
# arg0 = número da opção
  txt100 lin
  lin = arg0 + (txt(arg0, 1) ? "." : ". ") + nome[arg0]
  refvar maximo = int(colunas) - 4
  inttotal(lin) < maximo && (lin = txt(lin + txtesp(maximo), 0, maximo))
  ret lin + ": " + clas[arg0] + ":" + vari[arg0]


classe opc_linha
herda comando_adm
# Texto de uma linha, do tipo "const x = \"abc\""

func menu
# arg0=nome da classe, arg1=nome da variável, arg2=nomes das opções (não usado)
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    ret p.vartexto(arg0, arg1), "\c3" + admdec([arg0]:[arg1]) + "\b"
    p.inilinha(arg0, arg1)
    ret "<" + txt1(p.texto) + ">"
  casose "2" # Em uma classe herdada
    ret p.vartexto(arg0, arg1), "<herda> \c3" + admdec([arg0]:[arg1]) + "\b"
    p.inilinha(arg0, arg1)
    ret "<herda " + txt1(p.texto) + ">"
  casose # Não foi definido
    ret "<nulo>"
  casofim

func passo # Alterando um texto de uma linha
  prog p
  se arg1 == "" || arg1 == "\b"
    arg0.passo = este
    arg0.msg("Entre com um texto, N nenhum, V Texto vazio, Z cancela")
    ret 1
  senao arg1 == "v"
    p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + "=\"\"")
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg(arg0.var.opcnome + " mudou para um texto vazio")
    admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  senao arg1 == "n"
    se !arg0.var.opcvalido
      p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
      config:salvar
      criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
      arg0.msg("Apagado: " + arg0.var.opcnome)
      admlog(arg0, "apagou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnom\
e)
    senao
      p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + "=\"\"")
      config:salvar
      criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
      arg0.msg(arg0.var.opcnome + " mudou para um texto vazio")
      admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome\
)
    fimse
  senao arg1 != "z"
    p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + "=\"" + admcod(arg1) + "\"")
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg(arg0.var.opcnome + " mudou para: " + arg1)
    admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  fimse
  ret passosair(arg0)


classe opc_ajuda
herda comando_adm
const menu = "<ajuda>"

func passo
  arg0.msg2(arg2)
  ret passosair(arg0)


classe opc_txtlinha
herda comando_adm
# Uma linha de uma variável do tipo "const x = \"abc\""

func menu
# arg0=nome da classe, arg1=nome da variável, arg2=nomes das opções
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    ret p.vartexto(arg0, arg1), "\c3" + txtsublin([arg0]:[arg1], arg2, 1) + "\b"
    p.inilinha(arg0, arg1)
    ret "<" + txt1(p.texto) + ">"
  casose "2" # Em uma classe herdada
    ret p.vartexto(arg0, arg1), "<herda> \c3" + txtsublin([arg0]:[arg1], arg2, 1) + "\b"
    p.inilinha(arg0, arg1)
    ret "<herda " + txt1(p.texto) + ">"
  casose # Não foi definido
    ret "<nulo>"
  casofim

func passo # Alterando um texto de uma linha
  prog p
  se arg1 == "" || arg1 == "\b"
    passo = este
    arg0.msg("Entre com um texto, N nenhum, Z cancela")
    ret 1
  senao arg1 != "z"
    refvar linha = int(arg0.var.opcextra)
    textotxt t1
    textopos pos
    t1.addfim([arg0.var.opcclasse]:[arg0.var.opcvar])
    t1.linhas < linha && t1.addfim(txtrepete("\n", linha - t1.linhas))
    pos = t1.ini, pos.linha = linha
    pos.mudar(arg1 == "n" ? "" : arg1)
    pos = t1.fim, pos.antes
    enquanto t1.bytes && pos.texto == ""
      pos.remove, pos.antes
    efim
    se t1.bytes == 0 && !arg0.var.opcvalido
      p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
      config:salvar
      criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
      arg0.msg("Apagado: " + arg0.var.opcnome)
      admlog(arg0, "apagou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnom\
e)
    senao
      prog p
      refvar t = "const " + arg0.var.opcvar + "=\""
      p.criar(arg0.var.opcclasse, t + txtvis(t1.remove(1000)) + "\"")
      config:salvar
      criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
      se arg1 == "n"
        arg0.msg(arg0.var.opcnome + " mudou para um texto vazio")
      senao
        arg0.msg(arg0.var.opcnome + " mudou para: " + arg1)
      fimse
      admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome\
)
    fimse
  fimse
  ret passosair(arg0)


classe opc_texto
herda comando_editor
# Um texto de várias linhas

func menu # Retorna quantidade de linhas de texto de várias linhas
# arg0=nome da classe, arg1=nome da variável, arg2=nomes das opções (não usado)
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    ret p.vartexto(arg0, arg1), menu2([arg0]:[arg1])
    p.inilinha(arg0, arg1)
    ret "<" + txt1(p.texto) + ">"
  casose "2" # Em uma classe herdada
    ret p.vartexto(arg0, arg1), "<herda> " + menu2([arg0]:[arg1])
    p.inilinha(arg0, arg1)
    ret "<herda " + txt1(p.texto) + ">"
  casose # Não foi definido
    ret "<nulo> " + menu2([arg0]:[arg1])
  casofim

func menu2 # Usado por t_texto
  txt10 x
  x = intsublin(arg0)
  ret x != "1" ? "\c6" + x + " linhas\b" : "\c6Uma linha\b"

func passo # Alterando um texto de várias linhas
  casovar txtmin(txt(arg1, 0, 1))
  casose "\b"
    textopos p1
    arg0.teditor.limpar
    arg0.teditor.addfim([arg0.var.opcclasse]:[arg0.var.opcvar])
    epara p1 = arg0.teditor.ini, p1.lin, p1.depois
      p1.mudar(admdec(p1.texto))
    efim
    arg0.teditor.bytes == 1 && arg0.teditor.limpar
    arg0.leditor = arg0.teditor.ini
    arg0.leditor1 = arg0.teditor.ini
    arg0.leditor2 = arg0.teditor.fim
    arg0.leditor2.antes
    arg0.passo = este
    arg0.msg("Editando " + arg0.var.opcnome + ", O opções, X salvar, Z sair")
    ret 1
  casose "z" # Sair do editor
    arg0.msg("Fechando editor")
    ret passosair(arg0)
  casose "x" # Salvar o texto
    prog p
    se !arg0.var.opcvalido && !arg0.teditor.linhas
      p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
      config:salvar
      criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
      arg0.msg("Apagado: " + arg0.var.opcnome)
      admlog(arg0, "apagou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnom\
e)
      ret 1
    fimse
    textopos p1
    textotxt t1
    epara p1 = arg0.teditor.ini, p1.lin, p1.depois
      t1.addfim(txtinvis(p1.texto))
    efim
    txt200 t
    t = "const " + arg0.var.opcvar + "=\""
    p.criar(arg0.var.opcclasse, t + admcod(t1.remove(1000)) + "\"")
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Salvou " + arg0.var.opcnome)
    admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
    ret 1
  casofim
  ret passoeditor(arg0, arg1, 2000, arg0.var.opcvar)


classe opc_numero
herda comando_adm

func menu # Retorna número, do tipo "const x = 10"
# arg0=nome da classe, arg1=nome da variável, arg2=nomes das opções (não usado)
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    ret p.varnum(arg0, arg1), "\c6" + [arg0]:[arg1] + "\b"
    p.inilinha(arg0, arg1)
    ret "<" + txt1(p.texto) + ">"
  casose "2" # Em uma classe herdada
    ret p.varnum(arg0, arg1), "<herda> \c6" + [arg0]:[arg1] + "\b"
    p.inilinha(arg0, arg1)
    ret "<herda " + txt1(p.texto) + ">"
  casose # Não foi definido
    ret "<nulo> \c60\b"
  casofim

func passo # Alterando um número
  prog p
  se arg1 == "" || arg1 == "\b"
    arg0.passo = este
    se arg0.var.opcvalido
      arg0.msg("Entre com um número, Z cancela")
    senao
      arg0.msg("Entre com um número, N nenhum, Z cancela")
    fimse
    ret 1
  senao arg1 == "n" && !arg0.var.opcvalido
    p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Apagado: " + arg0.var.opcnome)
    admlog(arg0, "apagou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  senao arg1 != "z"
    int32 valor
    valor = arg1
    se arg1 != valor # Checa se é número
      ret passo(arg0, "\b")
    senao arg0.var.opcextra # Checa limites mínimo e máximo
      se valor < int(txt1(arg0.var.opcextra)) || valor > int(txt2(arg0.var.opcextra))
        arg0.msg("Entre com um número de " + txt1(arg0.var.opcextra) + " a " + txt2(arg0.var.opce\
xtra) + ".")
        ret 1
      fimse
    fimse
    p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + "=" + valor)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg(arg0.var.opcnome + " mudou para: " + valor)
    admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  fimse
  ret passosair(arg0)


classe opc_numreal
herda opc_numero, comando_adm
# Retorna número, do tipo "const x = 10"

func passo # Alterando um número
  prog p
  se arg1 == "" || arg1 == "\b"
    arg0.passo = este
    se arg0.var.opcvalido
      arg0.msg("Entre com um número, Z cancela")
    senao
      arg0.msg("Entre com um número, N nenhum, Z cancela")
    fimse
    ret 1
  senao arg1 == "n" && !arg0.var.opcvalido
    p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Apagado: " + arg0.var.opcnome)
    admlog(arg0, "apagou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  senao arg1 != "z"
    real2 valor
    valor = arg1
    se arg1 != valor # Checa se é número
      ret passo(arg0, "\b")
    senao arg0.var.opcextra # Checa limites mínimo e máximo
      se valor < int(txt1(arg0.var.opcextra)) || valor > int(txt2(arg0.var.opcextra))
        arg0.msg("Entre com um número de " + txt1(arg0.var.opcextra) + " a " + txt2(arg0.var.opce\
xtra) + ".")
        ret 1
      fimse
    fimse
    p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + "=" + valor)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg(arg0.var.opcnome + " mudou para: " + valor)
    admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  fimse
  ret passosair(arg0)


classe opc_opcao
herda comando_adm

func menu # Retorna uma opção baseado numa lista de opções
# arg0=nome da classe, arg1=nome da variável, arg2=nomes das opções
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    ret p.varnum(arg0, arg1), menu2([arg0]:[arg1], arg2)
    p.inilinha(arg0, arg1)
    ret "<" + txt1(p.texto) + ">"
  casose "2" # Em uma classe herdada
    ret p.varnum(arg0, arg1), "<herda> " + menu2([arg0]:[arg1], arg2)
    p.inilinha(arg0, arg1)
    ret "<herda " + txt1(p.texto) + ">"
  casose # Não foi definido
    ret "<nulo> " + menu2(0, arg2)
  casofim

func menu2 # Retorna o texto correspondente a uma opção
# arg0 = número da opção atual
# arg1 = texto com lista de opções separadas por "\n"
# Retorna: Um texto contendo a opção atual
  uint16 valor
  textotxt t
  valor = arg0
  t.addfim(arg1)
  t.remove(valor)
  ret "\c6" + valor + (t.linhas ? " " + t.remove(1) + "\b" : " <inválido>\b")

func passo # Alterando uma opção de uma lista de opções
  prog p
  se arg1 == "" || arg1 == "\b"
    arg0.passo = este
    se arg0.var.opcvalido
      arg0.msg("Entre com uma opção, O mostra as opções, Z cancela")
    senao
      arg0.msg("Entre com uma opção, O mostra as opções, N nenhuma, Z cancela")
    fimse
    ret 1
  senao arg1 == "o"
    arg0.txtmais.limpar
    arg0.txtmais.addfim("\bOpções:\n" + arg0.var.opcextra)
    textopos pos
    pos = arg0.txtmais.ini
    epara pos.depois, pos, pos.depois
      pos.mudar(txt(pos.linha - 1) + " ", 0, 0)
    efim
    arg0.txtmostra
    ret 1
  senao arg1 == "n" && !arg0.var.opcvalido
    p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Apagado: " + arg0.var.opcnome)
    admlog(arg0, "apagou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  senao arg1 != "z"
    textotxt t
    int16 x
    x = arg1, t.addfim(arg0.var.opcextra)
    se arg1 != x || x < 0 || x >= t.linhas
      arg0.msg("Opção inválida")
      ret p_opcao("\b")
    fimse
    t.remove(x)
    txt100 lin
    lin = " # " + arg0.var.opcnome + ": " + x + " " + t.ini.texto
    p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + "=" + x + lin)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg(arg0.var.opcnome + " mudou para: " + x + " " + t.remove)
    admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  fimse
  ret passosair(arg0)


classe opc_txtopcao
herda opc_texto, comando_adm

func passo
  uint16 linha
  linha = arg1, arg0.passo = este
  se arg1 == "" || arg1 == "\b"
    se arg0.var.opcvalido
      arg0.msg("Entre com uma opção, O mostra as opções, Z sair")
    senao
      arg0.msg("Entre com uma opção, O mostra as opções, N nenhuma, Z sair")
    fimse
  senao arg1 == "o"
    textotxt t
    t.addfim([arg0.var.opcclasse]:[arg0.var.opcvar])
    arg0.txtmais.limpar
    textopos pos
    epara pos = t.ini, pos, pos.depois
      arg0.txtmais.addfim("\c2" + arg0.txtmais.linhas + ".\b" + (pos.linha <= 9 ? " ") + \
pos.texto)
    efim
    arg0.txtmais.addini("\bOpções:")
    pos.antes
    se pos.texto != "" && t.linhas < int(txt2(arg0.var.opcextra))
      arg0.txtmais.addfim("\c2" + txt(arg0.txtmais.linhas - 1) + ".\b")
    fimse
    linha = txtsub(arg0.var.opcextra, 2)
    pos = arg0.txtmais.ini, pos.depois, pos.remove(linha)
    txt100 lin
    lin = "Para alterar, tecle um número de " + linha
    lin += " a " + (txt2(arg0.var.opcextra) - 1)
    arg0.txtmais.addfim(lin + ", seguido ou não de um texto")
    arg0.txtmais.addfim("Z Sair, M seguido de um texto executa comando do MUD")
    arg0.txtmostra
  senao arg1 == "z"
    passosair(arg0)
  senao arg1 == "n" && !arg0.var.opcvalido
    prog p
    p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Apagado: " + arg0.var.opcnome)
    admlog(arg0, "apagou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  senao txt(arg1, 0, 1) == "m" # Executa comando do MUD
    arg0.perso.teclou(txtremove(txt(arg1, 1), "E"))
  senao txt(linha) != txt1(arg1)
    arg0.msg("Opção inexistente: " + txt1(arg1))
  senao linha < int(txtsub(arg0.var.opcextra, 2)) || linha >= int(txt2(arg0.var.opcextra))
    txt100 lin
    lin = "O número da linha vai de " + int(txtsub(arg0.var.opcextra, 2))
    arg0.msg(lin + " até " + (txt2(arg0.var.opcextra) - 1))
  senao
    textotxt t1
    textopos pos
    t1.addfim([arg0.var.opcclasse]:[arg0.var.opcvar])
    t1.linhas < linha && t1.addfim(txtrepete("\n", linha - t1.linhas))
    pos = t1.ini, pos.linha = linha, pos.mudar(txt2(arg1))
    pos = t1.fim, pos.antes
    uint16 linhasmin
    linhasmin = txt1(arg0.var.opcextra)
    enquanto pos.linha > linhasmin && pos.texto == ""
      pos.remove, pos.antes
    efim
    pos.linha == linhasmin && pos.texto == "" && pos.remove
    prog p
    refvar t = "const " + arg0.var.opcvar + "=\""
    p.criar(arg0.var.opcclasse, t + txtvis(t1.remove(1000)) + "\"")
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Linha " + linha + " foi alterada")
    admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  fimse
  ret 1


classe opc_vetor
herda comando_adm

func menu # Retorna as opções selecionadas de lista de opções
# arg0=nome da classe, arg1=nome da variável, arg2=nomes das opções
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    ret p.varnum(arg0, arg1), menu2([arg0]:[arg1], arg2)
    p.inilinha(arg0, arg1)
    ret "<" + txt1(p.texto) + ">"
  casose "2" # Em uma classe herdada
    ret p.varnum(arg0, arg1), "<herda> " + menu2([arg0]:[arg1], arg2)
    p.inilinha(arg0, arg1)
    ret "<herda " + txt1(p.texto) + ">"
  casose # Não foi definido
    ret "<nulo> " + menu2(0, arg2)
  casofim

func menu2 # Retorna o texto correspondente a uma opção
# arg0 = valor numérico
# arg1 = texto com lista de opções separadas por "\n"
# Retorna: Um texto contendo as opções escolhidas
  int32 valor
  textotxt t
  txt512 lin
  int8 x
  valor = arg0
  epara t.addfim(arg1), t.linhas, valor = valor >> 1
    valor & 1 ? (lin += ", " + x + "-" + t.remove) : t.remove, x += 1
  efim
  ret lin ? "\c6" + txt(lin, 2) + "\b" : ""

func passo # Alterando uma opção de uma lista de opções
  prog p
  se arg1 == "" || arg1 == "\b"
    arg0.passo = este
    se arg0.var.opcvalido
      arg0.msg("Entre com uma opção, O mostra as opções, Z sair")
    senao
      arg0.msg("Entre com uma opção, O mostra as opções, N nenhuma, Z sair")
    fimse
    ret 1
  senao arg1 == "o"
    arg0.txtmais.limpar
    arg0.txtmais.addfim("\bOpções:\n" + arg0.var.opcextra)
    textopos pos
    pos = arg0.txtmais.ini
    epara pos.depois, pos, pos.depois
      pos.mudar(txt(pos.linha - 1) + " ", 0, 0)
    efim
    arg0.txtmostra
    ret 1
  senao arg1 == "n" && !arg0.var.opcvalido
    p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Apagado: " + arg0.var.opcnome)
    admlog(arg0, "apagou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  senao arg1 != "z"
    int32 x
    x = arg1
    se arg1 != x || x < 0 || x >= intsublin(arg0.var.opcextra)
      arg0.msg("Opção inválida")
      ret passo(arg0, "\b")
    fimse
    x = intbit(x) ^ [arg0.var.opcclasse]:[arg0.var.opcvar]
    txt100 lin
    lin = txtcor(menu2(x, arg0.var.opcextra))
    p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + "=" + x + " # " + arg0.var.opcnome \
+ ": " + lin)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Escolheu: " + lin)
    admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
    ret passo(arg0, "\b")
  fimse
  ret passosair(arg0)


classe opc_tipos
herda comando_adm

func menu # Retorna uma lista de textos
# arg0=nome da classe, arg1=nome da variável, arg2=nomes das opções (não usado)
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    ret p.vartexto(arg0, arg1), "\c3" + txttroca([arg0]:[arg1], "\n", " ") + "\b"
    p.inilinha(arg0, arg1)
    ret "<" + txt1(p.texto) + ">"
  casose "2" # Em uma classe herdada
    ret p.vartexto(arg0, arg1), "<herda> \c3" + txttroca([arg0]:[arg1], "\n", " ") + "\b"
    p.inilinha(arg0, arg1)
    ret "<herda " + txt1(p.texto) + ">"
  casose # Não foi definido
    ret "<nulo>"
  casofim

func passo
  prog p
  arg0.passo = este
  se arg1 == "o"
    arg0.txtmais.limpar
    epara p.iniclasse("tipo_"), p.lin, p.depois
      arg0.txtmais.addfim(txt(p.texto, 5))
    efim
  fimse
  ret passo2(arg0, arg1, p.existe("tipo_" + txts(arg1)))

func passo2 # Usado intermanente: alterando um vetor de textos
# arg0 = objeto jogsock do jogador
# arg1 = texto digitado pelo usuário
# arg2 = verdadeiro se o texto for válido para o vetor
# Se arg0=="o", a variável txtmais deve ter a lista de opções válidas, uma por linha
  prog p
  se arg1 == "" || arg1 == "\b"
    se arg0.var.opcvalido
      arg0.msg("Entre com uma opção, O mostra as opções, Z sair")
    senao
      arg0.msg("Entre com uma opção, O mostra as opções, N nenhuma, Z sair")
    fimse
    ret 1
  senao arg1 == "o"
    se arg0.txtmais.bytes <= 1
      arg0.txtmais.limpar
      arg0.txtmais.addfim("\bNão há nenhuma opção definida")
    senao
      arg0.txtmais.addfim(txttroca(arg0.txtmais.remove(5000), "\n", ", "))
      arg0.txtmais.juntar
      arg0.txtmais.dividelin(40, 75)
      arg0.txtmais.addini("\bOpções:")
    fimse
    arg0.txtmostra
    ret 1
  senao arg1 == "n" && !arg0.var.opcvalido
    p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Apagado: " + arg0.var.opcnome)
    admlog(arg0, "apagou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  senao arg1 != "z"
    txt100 lin
    lin = txts(arg1)
    textotxt t
    t.addfim([arg0.var.opcclasse]:[arg0.var.opcvar])
    t.bytes <= 1 && t.limpar
    textopos pos
    pos = t.ini
    se pos.txtproc("\n" + lin + "\n") >= 0
      pos.remove
    senao !arg2
      arg0.msg("Opção inválida: " + lin)
      ret passo2(arg0, "\b")
    senao
      t.addfim(lin), t.ordena
    fimse
    lin = "const " + arg0.var.opcvar + "=\""
    p.criar(arg0.var.opcclasse, lin + txtvis(t.ini.textolin(1000)) + "\"")
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Escolheu: " + txttroca(t.ini.textolin(1000), "\n", " "))
    admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
    ret passo2(arg0, "\b")
  fimse
  ret passosair(arg0)


classe opc_tipodep
herda comando_adm, opc_tipos

func passo
  prog p
  arg0.passo = este
  se arg1 == "o"
    arg0.txtmais.limpar
    epara p.iniclasse("cmd_"), p.lin, p.depois
      $[p.texto].cmdmenu && arg0.txtmais.addfim("h_" + txt(p.texto, 4))
    efim
    epara p.iniclasse("magia_"), p.lin, p.depois
      arg0.txtmais.addfim("m_" + txt(p.texto, 6))
    efim
    epara p.iniclasse("idioma_"), p.lin, p.depois
      arg0.txtmais.addfim("i_" + txt(p.texto, 7))
    efim
  fimse
  casovar txtmin(txt(arg1, 0, 2))
  casose "h_"
    ret passo2(arg0, arg1, $cmd_[txt(arg1, 2)].cmdmenu != nulo)
  casose "m_"
    ret passo2(arg0, arg1, $magia_[txt(arg1, 2)] != nulo)
  casose "i_"
    ret passo2(arg0, arg1, $idioma_[txt(arg1, 2)] != nulo)
  casofim
  ret passo2(arg0, arg1, 0)


classe opc_simnao
herda comando_adm

func menu # Retorna opção que pode ser 0 (não) ou 1 (sim)
# arg0=nome da classe, arg1=nome da variável, arg2=nomes das opções (não usado)
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    se !p.varnum(arg0, arg1)
      p.inilinha(arg0, arg1)
      ret "<" + txt1(p.texto) + ">"
    senao [arg0]:[arg1]
      ret "\c6" + [arg0]:[arg1] + " Sim\b"
    senao
      ret "\c6" + [arg0]:[arg1] + " Não\b"
    fimse
  casose "2" # Em uma classe herdada
    se !p.varnum(arg0, arg1)
      p.inilinha(arg0, arg1)
      ret "<herda " + txt1(p.texto) + ">"
    senao [arg0]:[arg1]
      ret "<herda> \c6" + [arg0]:[arg1] + " Sim\b"
    senao
      ret "<herda> \c6" + [arg0]:[arg1] + " Não\b"
    fimse
  casose # Não foi definido
    ret "<nulo> \c60 Não\b"
  casofim

func passo # Alterando uma opção que pode ser "SIM" ou "NÃO"
  prog p
  casovar txtmin(arg1)
  casose "0"
  casose "1"
    txt100 lin
    lin = " # " + arg0.var.opcnome + ": " + (arg1 == 1 ? "Sim" : "Não")
    p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + "=" + arg1 + lin)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg(arg0.var.opcnome + " mudou para: " + (arg1 == 1 ? "1 sim" : "0 não"))
    admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  casose "z"
    sair
  casose "n"
    se !arg0.var.opcvalido
      p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
      config:salvar
      criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
      arg0.msg("Apagado: " + arg0.var.opcnome)
      admlog(arg0, "apagou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnom\
e)
      sair
    fimse
  casose
    arg0.passo = este
    se arg0.var.opcvalido
      arg0.msg("Escolha: 0 não, 1 sim, Z cancela")
    senao
      arg0.msg("Escolha: 0 não, 1 sim, N nenhum, Z cancela")
    fimse
    ret 1
  casofim
  ret passosair(arg0)


classe opc_sala
herda comando_adm

func menu # Retorna sala (constante do tipo "const x = $s_abc")
# arg0=nome da classe, arg1=nome da variável, arg2=nomes das opções (não usado)
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    p.inilinha(arg0, arg1)
    se txt1(p.texto) != "const"
      ret "<" + txt1(p.texto) + ">"
    senao txt(p.texto, 6, inttotal(arg1) + 6) != arg1 + " = $s_"
      ret "<const>"
    senao txtproc(txtsepara("x" + txt(txtsub(p.texto, 3), 3), "LD+EO")) >= 0
      ret "<const>"
    senao
      ret txt(p.texto, inttotal(arg1) + 12)
    fimse
  casose "2" # Em uma classe herdada
    p.inilinha(arg0, arg1)
    se txt1(p.texto) != "const"
      ret "<herda " + txt1(p.texto) + ">"
    senao txt(p.texto, 6, inttotal(arg1) + 6) != arg1 + " = $s_"
      ret "<herda const>"
    senao txtproc(txtsepara("x" + txt(txtsub(p.texto, 3), 3), "LD+EO")) >= 0
      ret "<herda const>"
    senao
      ret "<herda> " + txt(p.texto, inttotal(arg1) + 12)
    fimse
  casose # Não foi definido
    ret "<nulo>"
  casofim

func passo # Alterando a sala
  prog p
  se arg1 == "" || arg1 == "\b"
    arg0.passo = este
    se arg0.var.opcvalido
      arg0.msg("Entre com o nome da sala, Z cancela")
    senao
      arg0.msg("Entre com o nome da sala, N nenhuma, Z cancela")
    fimse
    ret 1
  senao arg1 == "n" && !arg0.var.opcvalido
    p.apagar(arg0.var.opcclasse, arg0.var.opcvar)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Apagado: " + arg0.var.opcnome)
    admlog(arg0, "apagou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  senao arg1 != "z"
    txt100 nome
    nome = txtmin(txts(arg1))
    se !p.existe("s_" + nome)
      arg0.msg("\bSala \"" + nome + "\" não existe, escolha outra.")
      ret 1
    fimse
    p.criar(arg0.var.opcclasse, "const " + arg0.var.opcvar + "=$s_" + nome)
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg(arg0.var.opcnome + " mudou para " + nome)
    admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)
  fimse
  ret passosair(arg0)


classe opc_func
herda comando_editor

func passo # Editar função
  se arg1 == "z" # Sair do editor
    arg0.msg("Fechando editor")
    ret passosair(arg0)
  fimse
  passocod(arg0, arg1, 0)
  ret 1


classe comando_editor
herda comando_adm

func passocod # Edição do código
# arg0 = personagem
# arg1 = o que escreveu
# arg2 = 0 para editar função ou 1 para editar classe
  casovar txtmin(txt(arg1, 0, 1))
  casose "\b"
    arg0.teditor.limpar
    prog p
    txt100 lin
    arg0.passo = este
    lin = arg0.var.opcclasse + ":" + arg0.var.opcvar + ", O opções, Z sair"
# Classe
    se arg2
      arg0.msg("Editando classe " + arg0.var.opcclasse + ", O opções, Z sair")
      p.inilinha(arg0.var.opcclasse)
      arg0.teditor.addfim("ARQ:" + p.arquivo(arg0.var.opcclasse))
# Variável que não existe
    senao !p.inilinha(arg0.var.opcclasse, arg0.var.opcvar)
      arg0.msg(arg0.var.opcnome + ", criando " + lin)
      arg0.teditor.addfim("const " + arg0.var.opcvar + " = nulo")
# Constante
    senao txt1(p.texto) == "const" && inttotal(p.texto) > 75
      arg0.msg(arg0.var.opcnome + ", editando " + lin)
      arg0.teditor.addfim(txttroca(p.texto, "\\n", "\\n\\\n"))
      p.depois
# Qualquer outra coisa
    senao
      arg0.msg(arg0.var.opcnome + ", editando " + lin)
    fimse
# Copia o texto para o editor
    enquanto p.lin
      arg0.teditor.addfim(txtesp(p.nivel) + p.texto), p.depois
    efim
# Divide linhas grandes acrescentando barra invertida no final
    debug d
    d.exec = 100000
    textopos pos
    int16 n
    int16 x
    epara pos = arg0.teditor.ini, pos, pos.depois
      enquanto pos.texto(100, 1)
        n = pos.txtproc("\\n", 60, 1) + 2
        se n < 60 || n > 98
          x = 60
          enquanto x && x < 100
            n = x, x = pos.txtproc(" ", x, 1) + 1
          efim
          n == 60 && (n = 100)
        fimse
        pos.mudar("\\\n", n, 0)
        pos.depois
      efim
    efim
# Acerta variáveis
    arg0.leditor = arg0.teditor.ini
    arg0.leditor1 = arg0.teditor.ini
    arg0.leditor2 = arg0.teditor.fim
    arg0.leditor2.antes
    ret 1
  casose "x" # Salvar o texto
    salvar(arg0, arg2)
    ret 1
  casofim
  ret passoeditor(arg0, arg1, 64000, arg0.var.opcnome)

func salvar # Opçao salvar
# arg0 = personagem
# arg1 = 0 para editar função ou 1 para editar classe
  textotxt t1
  textopos p1
  txt512 lin
  debug d
  d.exec = 100000
# Junta linhas e coloca em t1
  t1.ini.add(arg0.teditor.ini, arg0.teditor.linhas)
  p1 = t1.ini
  enquanto p1.txtproc("\\\n") >= 0
    p1.mudar("", inttotal(p1.texto) - 1, 1) # Tira a "\" no final
    p1.depois, p1.juntar # Junta as duas linhas
  efim
# SOMENTE FUNÇÕES
  se !arg1
# Obtém o nome da constante / função
    lin = t1.ini.texto
    enquanto txt1(lin) == "sav" || txt1(lin) == "comum"
      lin = txt2(lin)
    efim
    se t1.linhas > 1 && txt1(lin) != "func" && txt1(lin) != "varfunc"
      arg0.msg("Erro: somente FUNC e VARFUNC podem ter várias linhas")
      ret 1
    fimse
    lin = txt1(txttroca(txt2(lin), "#", " "))
# Checa se o nome mudou
    se lin != arg0.var.opcvar
      arg0.msg("Erro: mude o nome da variável de " + lin + " para " + arg0.var.opcvar)
      ret
    fimse
# Checa existência de outra função ou constante dentro
    p1 = t1.ini.texto
    epara p1.depois, p1.lin, p1.depois
      casovar txtmin(txt1(p1.texto))
      casose "func"
      casose "varfunc"
        arg0.msg("Erro: definido uma função dentro de outra")
        ret
      casose "const"
      casose "varconst"
        arg0.msg("Erro: definido uma constante dentro de uma função")
        ret
      casofim
    efim
# Tenta salvar
    prog p
    t1.addfim(p.criar(arg0.var.opcclasse, t1.remove(10000)))
  senao
# SOMENTE CLASSES
# Tenta salvar
    prog p
    se t1.ini.texto(0, 4) != "ARQ:"
      arg0.msg("Primeira linha deve conter o texto \"ARQ:\" seguido do nome do arquivo")
      ret 1
    fimse
    t1.ini.mudar("", 0, 4)
    t1.addfim(p.criar(arg0.var.opcclasse + "\n" + t1.remove(10000)))
  fimse
# Informa se conseguiu salvar
  se t1.ini.texto == ""
    config:salvar
    criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)
    arg0.msg("Salvo com sucesso")
    admlog(arg0, "editou classe " + arg0.var.opcclasse)
    ret
  fimse
# Informa erros, corrigindo os números das linhas
  arg0.msg("Erro ao salvar:")
  p1 = t1.ini
  p1.depois(8), p1.remove(1000) # Mantém somente as primeiras mensagens
  uint16 x
  enquanto t1.linhas
    x = lin = t1.remove
    se txt(x) == txt(lin, 0, inttotal(txt(x)))
      p1 = arg0.teditor.ini, arg0 && (x += 1)
      enquanto p1.txtproc("\\\n") >= 0 && p1.linha < x
        p1.depois, x += 1
      efim
      lin = txt(x) + txt(lin, inttotal(txt(x)))
    fimse
    arg0.msg(lin)
  efim

func passoeditor # Processamento de qualquer editor de texto
# arg0 = objeto jogsock do jogador
# arg1 = texto digitado
# arg2 = quantidade máxima de bytes
# arg3 = nome da opção
# teditor contém o texto, leditor é a linha atual
# Retorna sempre 1
  casovar txtmin(txt(arg1, 0, 1))
  casose "\n"
    arg0.leditor = arg0.teditor.ini
    arg0.leditor1 = arg0.teditor.ini
    arg0.leditor2 = arg0.teditor.fim
  casose "" # Entrou na opção ou apenas pressionou ENTER
    arg0.msg("Editando " + arg3 + ", O opções, Z sair")
    ret 1
  casose "." # Insere linha removendo espaços
    se arg0.teditor.bytes + inttotal(arg1) > arg2
      arg0.msg("Editor não suporta tantos caracteres")
      ret 1
    fimse
    arg0.leditor.add(txtremove(txt(arg1, 1), "ED"))
    arg0.leditor.depois
    arg0.msg("Adicionada linha " + arg0.leditor.linha)
    ret 1
  casose "," # Insere linha
    se arg0.teditor.bytes + inttotal(arg1) > arg2
      arg0.msg("Editor não suporta tantos caracteres")
      ret 1
    fimse
    arg0.leditor.add(txt(arg1, 1))
    arg0.leditor.depois
    arg0.msg("Adicionada linha " + arg0.leditor.linha)
    ret 1
  casose "a" # Apaga a linha atual
    se !arg0.leditor.lin
      arg0.msg("Está no fim do texto")
      ret 1
    fimse
    arg0.leditor.remove
    arg0.msg(arg0.leditor.lin ? "Linha apagada" : "Linha apagada; fim do texto")
    ret 1
  casose "i" # Informações sobre a linha atual
    txt100 t
    t = "Linha " + (arg0.leditor.linha + 1) + "/" + arg0.teditor.linhas
    t += ", " + inttotal(arg0.leditor.texto)
    t += " caracteres, " + arg0.teditor.bytes + "/" + arg2 + " bytes"
    arg0.msg(t)
    t = "Bloco linhas " + (arg0.leditor1.linha + 1)
    t += " a " + (arg0.leditor2.linha + 1)
    arg0.msg(t)
    ret 1
  casose "l" # Mostra a linha atual
    arg0.msg(txt(arg0.leditor.linha + 1) + " " + arg0.leditor.texto)
    ret 1
  casose "m" # Executa comando do MUD
    arg0.perso.teclou(txtremove(txt(arg1, 1), "E"))
    ret 1
  casose "o" # Mostra opções do editor
    arg0.txtmais.limpar
    arg0.txtmais.addfim(ajudaeditor)
    arg0.txtmostra
    ret 1
  casose "s" # Sobe uma ou mais linhas
    arg0.leditor.linha == 0 && arg0.msg("Início do texto")
    uint8 x
    x = txtremove(txt(arg1, 1), "E")
    x > 8 && (x = 8)
    x < 1 && (x = 1)
    enquanto x > 0
      arg0.leditor.antes, x -= 1
      arg0.msg(txt(arg0.leditor.linha + 1) + " " + arg0.leditor.texto)
      ret !arg0.leditor.linha, 1
    efim
    ret 1
  casose "d"
    uint8 x
    x = txtremove(txt(arg1, 1), "E")
    x > 8 && (x = 8)
    x < 1 && (x = 1)
    enquanto x > 0
      arg0.leditor.depois, x -= 1
      se !arg0.leditor.lin
        arg0.msg("Fim do texto")
        ret 1
      fimse
      arg0.msg(txt(arg0.leditor.linha + 1) + " " + arg0.leditor.texto)
    efim
    ret 1
  casose "p" # Procurar
    int16 col # Coluna aonde encontrou
    textopos pos # Posição aonde encontrou
    refvar t = txtremove(txt(arg1, 1), "ED")
    se t # Procura texto
      arg0.peditor = t, pos = arg0.leditor
      col = pos.txtproc(t, 0)
    senao arg0.peditor # Procura novamente
      pos = arg0.leditor, pos.depois
      col = pos.txtproc(arg0.peditor, 0)
    senao # Nada para procurar
      col = -1
    fimse
    se col >= 0
      arg0.leditor = pos
      arg0.msg("Encontrado linha " + (arg0.leditor.linha + 1) + " coluna " + (col + 1))
      arg0.msg(arg0.leditor.texto)
    senao
      arg0.msg("Nada encontrado")
    fimse
    ret 1
  casose "t" # Trocar na linha atual
    se !arg0.peditor
      arg0.msg("Nenhum texto procurado")
      ret 1
    fimse
    refvar t = txttroca(arg0.leditor.texto, arg0.peditor, txtremove(txt(arg1, 1), "ED"))
    se t === arg0.leditor.texto
      arg0.msg("Nada trocado")
    senao arg0.teditor.bytes + inttotal(t) - inttotal(arg0.leditor.texto) > arg2
      arg0.msg("Editor não suporta tantos caracteres")
    senao
      arg0.leditor.mudar(t)
      arg0.msg("Troca efetuada")
    fimse
    ret 1
  casose "u" # Trocar no texto inteiro
    se !arg0.peditor
      arg0.msg("Nenhum texto procurado")
      ret 1
    fimse
    textopos pos
    pos = arg0.teditor.ini
    se pos.txtproc(arg0.peditor, 0) < 0
      arg0.msg("Nada trocado")
      ret 1
    fimse
    enquanto pos.txtproc(arg0.peditor, 0) >= 0
      refvar t = txttroca(pos.texto, arg0.peditor, txtremove(txt(arg1, 1), "ED"))
      se arg0.teditor.bytes + inttotal(t) - inttotal(pos.texto) > arg2
        arg0.msg("Editor não suporta tantos caracteres")
        ret 1
      fimse
      pos.mudar(t), pos.depois
    efim
    arg0.msg("Troca efetuada")
    ret 1
  casose "e" # Embelezar o texto
    arg0.teditor.addini(txttroca(arg0.teditor.remove(10000), "\n", " "))
    arg0.teditor.dividelin(57, 77)
    arg0.msg("Texto embelezado; voltando à linha 1")
    ret 1
  casose "c" # Mostrar texto com as definições de cores
    textopos pos
    arg0.txtmais.limpar
    arg0.txtmais.addfim("\bTexto com cores:")
    epara pos = arg0.teditor.ini, pos.lin, pos.depois
      arg0.txtmais.addfim(txtinvis(pos.texto))
    efim
    arg0.txtmostra
    ret 1
  casofim
# Comandos de dois caracteres
  casovar txtmin(arg1)
  casose "bi"
    arg0.leditor1 = arg0.leditor
    arg0.msg("Início de bloco linha " + (arg0.leditor1.linha + 1))
    ret 1
  casose "bf"
    arg0.leditor2 = arg0.leditor
    arg0.msg("Fim de bloco linha " + (arg0.leditor2.linha + 1))
    ret 1
  casose "ba"
    refvar total = arg0.leditor2.linha - arg0.leditor1.linha + 1
    se total <= 0
      arg0.msg("Nada para ser apagado")
    senao
      arg0.leditor1.remove(total)
      se total == 1
        arg0.msg("Uma linha apagada")
      senao
        arg0.msg(txt(total) + " linhas apagadas")
      fimse
    fimse
    ret 1
  casose "bc"
    refvar total = arg0.leditor2.linha - arg0.leditor1.linha + 1
    arg0.transf.limpar
    arg0.transf.ini.add(arg0.leditor1, total)
    se arg0.transf.linhas == 1
      arg0.msg("1 linha guardada")
    senao
      arg0.msg(txt(arg0.transf.linhas) + " linhas guardadas")
    fimse
    ret 1
  casose "bx"
    refvar total = arg0.leditor2.linha - arg0.leditor1.linha + 1
    arg0.transf.limpar
    arg0.transf.ini.add(arg0.leditor1, total)
    arg0.leditor1.remove(total)
    se arg0.transf.linhas == 1
      arg0.msg("1 linha movida")
    senao
      arg0.msg(txt(arg0.transf.linhas) + " linhas movidas")
    fimse
    ret 1
  casose "bv"
    se arg0.teditor.bytes + arg0.transf.bytes > arg2
      arg0.msg("Editor não suporta tantos caracteres")
      ret 1
    fimse
    arg0.leditor.add(arg0.transf.ini, arg0.transf.linhas)
    se arg0.transf.linhas == 1
      arg0.msg("1 linha colada")
    senao
      arg0.msg(txt(arg0.transf.linhas) + " linhas coladas")
    fimse
    ret 1
  casose "be" # Embelezar o bloco
    int32 total
    total = arg0.leditor2.linha - arg0.leditor1.linha + 1
    se total <= 0
      arg0.msg("Nada para ser embelezado")
    senao
      textotxt t
      t.addfim(txttroca(arg0.leditor1.textolin(total), "\n", " "))
      t.dividelin(57, 77)
      arg0.leditor1.remove(total)
      arg0.leditor1.add(t.ini, t.linhas)
      arg0.leditor2.linha = arg0.leditor1.linha + t.linhas - 1
      se total == 1
        arg0.msg("Uma linha embelezada")
      senao
        arg0.msg(txt(total) + " linhas embelezadas")
      fimse
    fimse
    ret 1
  casose "bl" # Limpar o texto
    arg0.teditor.limpar
    arg0.msg("Texto apagado")
    ret 1
  casose "bt" # Mostra conteúdo da área de transferência
    se !arg0.transf.bytes
      arg0.msg("Área de transferência está vazia.")
    senao
      arg0.txtmais.limpar
      txt100 t1
      se arg0.transf.linhas == 1
        t1 = "Área de transferência 1 linha "
      senao
        t1 = "Área de transferência " + arg0.transf.linhas + " linhas "
      fimse
      t1 += arg0.transf.bytes == 1 ? "1 byte" : txt(arg0.transf.bytes) + " bytes"
      arg0.txtmais.addfim(t1)
      textopos pos
      epara pos = arg0.transf.ini, pos.lin, pos.depois
        arg0.txtmais.addfim(txt(pos.linha + 1) + " " + pos.texto)
      efim
      arg0.txtmostra
    fimse
    ret 1
  casofim
# Checa número de linha
  uint16 lin
  lin = arg1
  se arg1 == lin
    arg0.leditor.linha = lin - 1
    arg0.msg(txt(arg0.leditor.linha + 1) + " " + arg0.leditor.texto)
    ret 1
  fimse
# Opção desconhecida
  arg0.msg("Opção desconhecida: " + txt(arg1, 0, 1))
  arg0.msg("Editando " + arg3 + ", O opções, Z sair")
  ret 1

const ajudaeditor = "\b\c3Comandos do editor\b\n\
\c2I\b  Informações sobre a linha atual, quantidade de linhas, e bloco marcado\n\
\c2L\b  Mostra a linha atual\n\
\c2S\b  seguido ou não de um número: Sobe uma ou mais linhas no texto\n\
\c2D\b  seguido ou não de um número: Desce uma ou mais linhas no texto\n\
\c2Um número qualquer:\b  Vai para a linha correspondente\n\
As linhas começam em 1; um número bem grande, vai para o fim do texto\n\
\c2Um ponto seguido de um texto:\b\n\
Insere um texto entre a linha atual e a anterior\n\
A linha atual avança automaticamente\n\
\c2Uma vírgula seguido de um texto:\b\n\
Insere um texto entre a linha atual e a anterior, sem remover espaços\n\
Exemplo: vírgula seguido de dois espaços e a letra A insere uma linha\n\
que contém dois espaços e a letra A\n\
\c2A\b  Apaga a linha atual\n\
\c2P\b  seguido de um texto: Procura um texto a partir da linha atual\n\
\c2P\b  Procura a próxima linha que contém o texto\n\
\c2T\b  seguido do novo texto: Troca o texto da opção P na linha atual\n\
\c2U\b  seguido do novo texto: Troca o texto da opção P no texto inteiro\n\
\c2E\b  Embeleza o texto, formatando em até 77 caracteres por linha\n\
\c2C\b  Mostra o texto com as definições de cores\n\
\c2M\b  seguido de um texto: Executa um comando do MUD sem sair da edição\n\
\c2X\b  Salva o texto\n\
\c2Z\b  Encerra a edição\n\
\c2BL\b  Apaga todo o texto sendo editado\n\
\c2BI\b  Marca início do bloco na linha atual\n\
\c2BF\b  Marca fim de bloco na linha atual\n\
\c2BA\b  Apaga bloco marcado\n\
\c2BC\b  Copia bloco para a área de transferência\n\
\c2BX\b  Move bloco para a área de transferência\n\
\c2BV\b  Insere texto da área de transferência entre a linha atual e a anterior\n\
\c2BT\b  Mostra o conteúdo da área de transferência\n\
\c2BE\b  Embeleza o bloco marcado"


classe admmudou
herda comando_adm
# Organiza constantes da classe na ordem definida pela constante admordem
# da classe. Depois, se o nome da função especificada não for nulo,
# chama essa função de todos os objetos da classe.
# Modo de usar:
# criar("admmudou", <nome da classe>, [nome da função])
#
txt100 nomeclasse
txt100 nomefunc
intexec ordem
intexec repete
listaobj l # Objetos cuja função ainda não foi chamada
textotxt t # Usado para organizar as constantes no início da classe
prog p # Usado para organizar as constantes no início da classe
txt100 tantes # Nome da constante anterior em textotxt t
int1 mudou # Se ocorreu alguma mudança no programa
uint8 cont # Contador, como medida de segurança

func ini
  nomeclasse = arg0, nomefunc = arg1, ordem = 1

func ordem_exec
  tantes = ""
  t.limpar
  (cont += 1) < 50 && t.addfim(txttroca([nomeclasse]:admordem, " ", "\n"))
  p.inifunccl(nomeclasse)
  enquanto t.linhas
    se p.existe(nomeclasse, t.ini.texto) != 1 || p.vartipo(nomeclasse, t.ini.texto) != "const"
      t.remove
    senao p.texto == t.ini.texto
      p.depois, tantes = t.remove
    senao tantes
      p.fdepois(nomeclasse, t.remove, tantes)
      ordem = 1, mudou = 1
      ret
    senao
      p.fantes(nomeclasse, t.remove)
      ordem = 1, mudou = 1
      ret
    fimse
  efim
  mudou && config:salvar
# Aqui obtém os objetos para chamar uma função de cada objeto
  ret !nomefunc, apagar(este)
  se txtproc(nomefunc, ":") > 0
    refvar ind = txtproc(nomefunc, ":")
    nomeclasse = txt(nomefunc, 0, ind)
    nomefunc = txt(nomefunc, ind + 1)
  fimse
  repete = 1
  ref r
  epara r = $[nomeclasse], r, r = objdepois(r)
    l.addfim(r)
  efim

func repete_exec
  ret !l, apagar(este)
  refvar r = ref(l.objini)
  repete = 1, l.ini.remove, r.[nomefunc]


classe admordena
herda comando_adm
# Organiza as classes de um arquivo em ordem alfabética
# Modo de usar:
# criar("admordena", <sufixo do nome do arquivo>)
intexec repete
txt100 nomeclasse

func ini
  nomeclasse = arg0, repete = 1

func repete_exec
  apagar(este)
  prog p
  textotxt t
  epara p.iniarq(nomeclasse), p.lin, p.depois
    t.addfim(p.texto)
  efim
  t.ordena
  p.clini(nomeclasse, t.ini.texto)
  enquanto t.linhas > 1
    p.cldepois(t.remove, t.ini.texto)
  efim
  config:salvar
