classe comum_perso
herda comum_obj
# Personagem sem estrutura de batalha
const perso = 1 # Para identificar que é personagem
const sexo = 0 # Sexo: 0=feminino, 1=masculino
const nome = "item"
const ident = nome
const volexp = 1 # Volume expande se tiver itens dentro
const msg = sock.msg(arg0) # Mensagem pequena para o jogador
const msg2 = sock.msg2(arg0) # Mensagem grande para o jogador
ref sock # Objeto do jogador, se nulo não é contolado pelo jogador
const descver = "Você não vê nada de especial."
sav textovar var # Variáveis criadas sob demanda do personagem
inttempo p_espera # Tempo de espera para o próximo comando
sav uint8 posicao # Posição do personagem
const pospadr = 8 # Posição padrão do personagem

func ini # Coloca o objeto dentro de outro
  comum_obj:ini
  posicao = pospadr
  arg0 && mudadono(arg0)

func fim # Objeto foi apagado
  se sock # Se estiver ligado a um jogador
    casovar txt1(sock.info)
    casose "t" # Conectado via Papovox
    casose "p" # Conectado via Telnet
      apagar(sock)
      sair
    casose "l" # Jogando localmente
      terminar
    casose "b" # Como bot
      sock.reinicia
    casofim
    sock.perso = nulo # Desliga-se do jogador
    sock = nulo
  fimse
  comum_obj:fim

func mudadono # Coloca personagem em outra sala (arg0 = nova sala)
# Eventos cmd_saiu
  listaobj l
  l.addfim(evento)
  epara evento.limpar, l, l.ini.remove
    l.objini.cmd_saiu(este)
  efim
# Muda de sala
  dono = arg0
  atkrec.limpar
# Eventos cmd_chegou
  epara l.addfim(evento, arg0.evento), l, l.ini.remove
    l.objini.cmd_chegou(este, arg0)
  efim
  cmd_mudadono
# Se for jogador, executa eventos cmd_jog
  se jog
    arg0.cmd_jog(este, arg0)
    epara l.addfim(arg0.dentro2), l, l.ini.remove
      l.objini.cmd_jog(este, arg0)
    efim
  fimse
# Mostra descrição
  sock && dono.s_titulo && msg2(dono.descsala(este, 7))

func teclou # Processa comando (arg0=comando)
# Procura objeto que contém o comando
  ref obj # Objeto que vai processar o comando
  ref obj2 # Objeto com menor prioridade
  prog p # Para procurar o objeto
  casovar txtmin(txt1(arg0))
  casose ""
    ret
  casose "m"
  casose "ma"
  casose "mag"
  casose "magi"
  casose "magia"
    ret dono.s_semmagia, msg("Você não consegue lançar magias aqui.")
    p.iniclasse("cmd_magia_" + txtsub(arg0, 1, 1))
    sair
  casose
    p.iniclasse("cmd_" + txt1(arg0))
    comando = txt2(comando)
  casofim
  epara nulo, p.lin, p.depois
    obj = $[p.texto].objcmd(este, arg0)
    continuar !obj # Continua se não encontrou um objeto
    sair !obj.ultimo # Sai se não for objeto com baixa prioridade
    obj2 = obj
  efim
  !obj && (obj = obj2)
# Gera eventos
  listaobj l
  epara l.addfim(este.evento), l, l.ini.remove
    ret l.objini.cmd_escr(este, arg0, obj), nulo
  efim
# Executa comando
  se !obj
    msg("O quê?")
  senao posicao < obj.posic
    casovar posicao
    casose "0"
      msg("\c9Você está mort" + misc:sletra[sexo] + "!!!\b")
      sair
    casose "1" # Mortalmente ferido
    casose "2" # Incapacitado
      msg("\c9Você está muito mal, incapaz de fazer qualquer coisa.\b")
      sair
    casose "3" # Fraco
      msg("\c9A única coisa que você pode fazer agora é pensar nas estrelas.\b")
      sair
    casose "4" # Dormindo
      msg("\c9Nos seus sonhos...\b")
      sair
    casose "5" # Descansando
      msg("\c9Você se sente relaxad" + misc:sletra[sexo] + " demais para fazer isso.\b")
      sair
    casose "6" # Sentado
      msg("\c9Talvez você deva ficar em pé primeiro.\b")
      sair
    casose "7" # Lutando
      msg("\c9Sem chance! Você está lutando pela sua vida.\b")
      sair
    casose
      msg("\c9Você tenta, mas não consegue.\b")
    casofim
  senao txt(obj, 0, 10) == "cmd_magia_"
    obj.escr(este, txtsub(arg0, 2))
  senao
    obj.escr(este, txt2(arg0))

func p_espera_exec # Pega o próximo comando
  ret sock, sock.espera_exec
  pnj_exec

func descpos
  ret posicao == pospadr && descpadr, descpadr
  casovar posicao
  casose "0"
    ret txtmaimin(nome) + " jás aqui."
  casose "1"
    ret txtmaimin(nome) + " está aqui mortalmente ferid" + misc:sletra[sexo] + "."
  casose "2"
    ret txtmaimin(nome) + " está aqui incapacitad" + misc:sletra[sexo] + "."
  casose "3"
    ret txtmaimin(nome) + " está aqui, muito frac" + misc:sletra[sexo] + "."
  casose "4"
    ret txtmaimin(nome) + " dorme aqui."
  casose "5"
    ret txtmaimin(nome) + " descansa aqui."
  casose "6"
    ret txtmaimin(nome) + " está sentad" + misc:sletra[sexo] + "."
  casose "7"
    ret txtmaimin(nome) + " está lutando."
  casose "8"
    ret txtmaimin(nome) + " está em pé."
  casofim
  ret txtmaimin(nome) + " está aqui."

func msgvis # Mensagem se o jogador estiver vendo o alvo
  se sock && posicao > 4 && visivel($mens.perso) # Se tem jogador e está acordado
    $mens.proc(arg0, este)

func msginv # Mensagem mesmo se o alvo estiver invisível
  se sock && posicao > 4 # Se tem jogador e está acordado
    $mens.proc(arg0, este)


classe comum_persobat
herda comum_perso
# Personagem que pode batalhar
const perso = 2 # Para identificar o tipo de personagem
uint8 bitver # O que o personagem/item pode ver
uint8 bitinv # Grau de invisibilidade do personagem/item
#
const sexo = 0 # Sexo: 0=feminino, 1=masculino
# sav int1 sexo # Sexo: 0=feminino, 1=masculino
sav uint32 moedas # Quantas moedas está carregando
#
const expmax = nivel * nivel * nivel + 20 # Experiência para subir de nível
sav uint32 expatual # Experiência atual
sav uint16 pnivel # Nível atual
sav uint32 pvida # Pontos de vida
sav uint32 pmana # Pontos de mana
sav uint32 pmove # Pontos de movimento
uint32 pvidamax # Quantidade máxima de vida
uint32 pmanamax # Quantidade máxima de mana
uint32 pmovemax # Quantidade máxima de movimento
uint16 pveloc # Velocidade do personagem
uint32 atknorm # Quantidade de ataque normal
uint32 defnorm # Quantidade de defesa normal
uint32 atkmag # Quantidade de ataque mágico/especial
uint32 defmag # Quantidade de defesa mágica/especial
uint16 evasao # Habilidade de desviar dos golpes (thac0)
uint16 precisao # Habilidade de acertar os golpes (hitroll)
const tipo1 = "normal" # Tipo de personagem
const tipo2 = "" # Segundo tipo do personagem
int8 deftipo.18
# Defesa contra os diversos tipos de danos
# Vide função misc:atktipo
# somar 2 = dobra defesa
# subtrair 2 = reduz defesa pela metade
# 80 ou mais = imune ao tipo de golpe
#
sav inttempo p_restaura # Para restaurar status de tempos em tempos
intexec recalc # Se deve recalcular defesa, ataque e velocidade
const persobat = este # Personagem usado na batalha
const persoesc = este # Personagem escolhido
listaobj atkrec # Quem atacou esse personagem; dá experiência se perder
listaitem atkenv # Item de atkrec; atkenv.objlista = alvo do personagem
listaobj atkdiv # Para dividir experiência entre personagens que atacaram
inttempo atktempo # Tempo para terminar a batalha

func ini # Objeto foi criado
  comum_perso:ini
  p_restaura = 100
  pnivel = arg1
  recalc_exec
  pvida = pvidamax
  pmana = pmanamax
  pmove = pmovemax
  arg0 && mudadono(arg0)

func fim # Objeto foi apagado
  comum_perso:fim
  atkrec.limpar, atkdiv.limpar

func ataqueini # Testa se pode atacar
# Retorna "" se pode atacar ou a mensagem com o motivo se não pode
  se persobat.pvida == 0
    ret "Você está desmaiado"
  senao dono.s_luta == 0
    ret "Não é permitido brigas aqui"
  senao
    ret ""

#varfunc vida
#  ret !args, ivida # Lê vida
#  casovar (ivida = arg0) * 100 / vidamax
#  casose "0"
#  casose "1"
#    posicao = vida != 0 # 0=morto, 1=mortalmente ferido
#    ret
#  casose "2"
#    posicao = 2 # incapacitado
#    ret
#  casose "3"
#    posicao = 3 # fraco
#    ret
#  casose
#    posicao < 4 && (posicao = pospadr)
#  casofim

func recalc_exec # Ajusta variáveis, principalmente batalha
# Acerta atributos básicos
  bitver = bitinv = 3
  atknorm = (nivel * 4 + 60) * nivel + 30
  defnorm = nivel * 5 + 10
  atkmag = (nivel * 5 + 70) * nivel + 30
  defmag = nivel * 6 + 11
  pvidamax = nivel * 2 + 25
  #pveloc = (nivel * 4 + 60) * nivel + 30
  pveloc = nivel + 50
  pmanamax = nivel + 30
  pmovemax = nivel * 2 + 30
  evasao = nivel * 2 + 30
  precisao = nivel * 2 + 30
  deftipo.limpar # Todas as defesas em 100%
# Acerta atributos conforme o tipo de personagem
  misc:tipo_[tipo1]
  misc:tipo_[tipo2]
# Bônus do próprio personagem
  cmd_recalc1(este)
# Bônus conforme o que está vestindo e os efeitos
  listaitem l
  epara l = dentro2.ini, l, l.depois
    l.obj.cmd_recalc2(este)
  efim
  epara l = evento.ini, l, l.depois
    l.obj.cmd_recalc2(este)
  efim

func batalhafim # Encerra a batalha
  atkenv.remove, atkrec.limpar, atktempo = 0
  posicao == 7 && (posicao = pospadr)

func atktempo_exec # Encerra a batalha depois de um tempo
  atkenv && msg("Batalha encerrada.")
  atkenv.remove, atkrec.limpar
  posicao == 7 && (posicao = pospadr)

func morreu # Procedimentos quando morre
  pvida = 0
# Jogador: retira toda experiência e transfere jogador para outro lugar
  se jog
    ref r
    enquanto atkrec
      r = atkrec.objini, atkrec.ini.remove
      enquanto r.atkdiv
        r.atkdiv.objini.expatual = 0
        r.atkdiv.ini.remove
      efim
      r.batalhafim
    efim
    batalhafim
    $mens.p(este)
    $mens.mtodos1("$P morreu.")
    vida = pos(vidamax / 2 - 20) + 2
    mana = manamax / 2
    move = movemax / 2
    p_restaura = rand(100, 130)
    mudadono(config:salafim)
    salvar # Salva o jogo
    ret
# Animal do jogador: não dá experiência
  senao dono.jog
    enquanto atkrec
      atkrec.objini.batalhafim, atkrec.ini.remove
    efim
    $mens.p(dono, este)
    $mens.mtodos1("$A de $P desmaiou.")
    dono.escolhebat # Atualiza persobat
    ret
  fimse
# Outro personagem: dá experiência
  real total1 # Para saber a quantidade de personagens
  real total2
  real v1 # Para calcular a experiência ganha
  ref r
  total1 = atkrec.total
  enquanto atkrec
    r = atkrec.objini, atkrec.ini.remove
    total2 = total1 * r.atkdiv.total
    enquanto r.atkdiv
      r.atkdiv.objini.persoexp(este, total2)
      r.atkdiv.ini.remove
    efim
    r.batalhafim
  efim
  batalhafim
# Acerta personagem
  se dono.perso
    $mens.p(dono, este)
    $mens.mtodos1("$A de $P desmaiou.")
    dono.escolhebat # Atualiza persobat
  senao
    $mens.p(este)
    $mens.mtodos1("$P morreu.")
    apagar(este)
    r = sock, r.mudaperso(nulo)
    r.reinicia

func persoexp # Ganha experiência por ter vencido um personagem
# arg0 = personagem, arg1 = em quantos personagens dividiu
  real v1
  v1 = intpos(arg0.pnivel - pnivel + 8) / 16
  v1 > 1 && (v1 = 1)
  ganhaexp(v1 * (arg0.pnivel * 10 + 50) / arg1)

func ganhaexp # Personagem ganha experiência
# arg0 = experiência
  expatual += arg0
  se expatual > expmax
    expatual -= expmax
    pnivel += 1
    dono.msg(nome + " foi para nível " + pnivel)
    recalc = 1 # Recalcular atributos do personagem

func p_restaura_exec # Restaura algumas variáveis
  p_restaura = rand(100, 130)
  se vida < vidamax
    casovar posicao
    casose "1" # Mortalmente ferido
    casose "2" # Incapacitado
      vida += 1
      sair
    casose "3" # Fraco
      vida += 2
      sair
    casose "4" # Dormindo
      vida += vidamax / 5 + 5
      sair
    casose "5" # Descansando
      vida += vidamax / 10 + 3
      sair
    casose "6" # Sentado
      vida += vidamax / 15 + 2
      sair
    casose "7" # Lutando
    casose "8" # Em pé
      vida += vidamax / 30 + 1
    casofim
    vida > vidamax && (vida = vidamax)
  fimse
  se mana < manamax
    casovar posicao
    casose "4" # Dormindo
      mana += manamax / 5 + 5
      sair
    casose "5" # Descansando
      mana += manamax / 10 + 3
      sair
    casose "6" # Sentado
      mana += manamax / 15 + 2
      sair
    casose "7" # Lutando
    casose "8" # Em pé
      mana += manamax / 30 + 1
    casofim
    mana > manamax && (mana = manamax)
  fimse
  se move < movemax
    casovar posicao
    casose "4" # Dormindo
      move += manamax / 5 + 5
      sair
    casose "5" # Descansando
      move += manamax / 10 + 3
      sair
    casose "6" # Sentado
      move += manamax / 15 + 2
      sair
    casose "7" # Lutando
    casose "8" # Em pé
      move += manamax / 30 + 1
    casofim
    move > movemax && (move = movemax)
  fimse

func pnj_exec # Somente PNJs, inteligência artificial do PNJ
  se atkenv
    teclou("atk")


classe comum_persoanimal
herda comum_persobat
# Personagem que pode batalhar e carregar animais
const perso = 3 # Para identificar o tipo de personagem
sav ref animal.8 # Animais que possui
sav ref persobat # Personagem usado na batalha
sav ref persoesc # Personagem escolhido pelo jogador

func ini # Objeto foi criado
  comum_persobat:ini
  persobat = este
  persoesc = este

const fim = comum_persobat:fim

func escolhebat # Escolhe um personagem em condições de lutar
  se persoesc.pvida # Checa se personagem escolhido está em condições
    persobat = persoesc
  senao animal.0.pvida && config:animal1 >= 1
    persobat = animal.0
  senao animal.1.pvida && config:animal1 >= 1
    persobat = animal.1
  senao animal.2.pvida && config:animal1 >= 2
    persobat = animal.2
  senao animal.3.pvida && config:animal1 >= 3
    persobat = animal.3
  senao animal.4.pvida && config:animal1 >= 4
    persobat = animal.4
  senao animal.5.pvida && config:animal1 >= 5
    persobat = animal.5
  senao animal.6.pvida && config:animal1 >= 6
    persobat = animal.6
  senao animal.7.pvida && config:animal1 >= 7
    persobat = animal.7
  senao
    persobat = este
  fimse
