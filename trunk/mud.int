# Se deve usar vários arquivos
mapagrande = 1

# Quantas instruções uma função chamada pelo programa pode
# executar antes do controle retornar ao programa
exec = 5000

# Se deve abrir uma janela de texto - variável telatxt
telatxt = 1

# Aonde apresentar mensagens de erro no programa
log = 0

classe config
# Configuração
#
# Modo é um texto que pode ter uma ou mais letras:
# L = Jogo local
# T = Ativar em uma porta, aceita Telnet
# P = Ativar em uma porta, aceita Telnet e Papovox
# B = Ativar como bot em um chat
# É possível usar mais de uma letra. Exemplo, "LT" significa local e telnet.
const modo = "L"
#
# Variáveis dos modos 2 e 4 (ativar em uma porta)
# Nota: Papovox só se conecta na porta 1963
const servporta = 1963
#
# Variáveis do modo 8 (ativar como bot)
const serv = "localhost"
const porta = 1963
const sala = "sala01"
const senha = "sala01"
#
# Sala inicial
const salaini = $s_ini001
# Sala para continuar jogo salvo (se estava numa sala que não existe mais)
const salasav = $s_ini002
# Sala quando morre
const salafim = $s_fim001
#
# Quantos animais pode ter numa batalha, de 1 a 8
const animal1 = 5
#
# Senha para se tornar administrador, ou "" se não puder
const senhaadm = ""
#
# Se deve salvar o personagem ao criar: 0=não salvar, 1=salvar
const salvacria = 0
#
# Tipo de ataque: 0=manual, 1=automático (realizado pela classe cmd_atkauto)
const atktipo = 0
#
# Ataque automático: tempo de um turno (em décimos de segundo)
# Ataque manual: Tempo para gerar a primeira mensagem de fim de batalha
const atktempo = 50
#
# Opção de escolher o nível (para testes) na área 'casa'
# 0=não pode escolher o nível, 1=pode escolher o nível
# const escolhenivel = 1

func salvar # Salva o programa
  prog p
  p.salvar("L99N1I2C2F1V0")
  $mudaprog.ini # Para indicar que nenhum arquivo foi mudado

#func iniclasse # Para salvar acertando indentação e linhas entre classes e funções
#  prog p
#  p.salvartudo("L99N1I2C2F1V0")


classe jogolocal
herda jogsock
# Jogando localmente
telatxt j_tela
const msgsock = j_tela.msg(arg0 + "\n")
const msgsala = j_tela.msg(arg0 + "\n")
const msgtodos = j_tela.msg(arg0 + "\n")
const info = "l local"

func iniclasse
  se txtproc(config:modo, "L") >= 0
    criar(arg0)

func ini
  msgsock("Jogando localmente; tecla ESC encerra o programa")
  jogsock:ini

func j_tela_msg
  j_tela.linha = 0
  recebe(txtremove(arg0, "ED"))

func j_tela_tecla
  se arg0 == "ESC"
    jogsock:fim
    terminar


classe jogoserv
herda jogsock
# Rodando independente
comum serv j_serv # Para receber conexões
socket j_conec # Usuário conectado
inttempo j_tempo # Para encerrar conexão após um tempo ou entrar via Papovox
uint8 j_passo # 0=definindo se Papovox, 1=entrando Papovox, 2=dentro
const msgsock = j_conec.msg(arg0 + "\n")
const msgsala = j_conec.msg(arg0 + "\n")

func info
  se j_conec.proto == 5
    ret "p " + j_conec.ip
  senao
    ret "t " + j_conec.ip

func msgtodos
  ref r
  epara r = $jogoserv, r, r = objdepois(r)
    r.j_conec.msg(arg0 + "\n")
  efim

func iniclasse
  se txtproc(config:modo, "T") >= 0 || txtproc(config:modo, "P") >= 0
    telatxt tela
    se [arg0]:j_serv.abrir("", config:servporta)
      tela.msg("Esperando conexões na porta " + config:servporta + "\n")
    senao
      tela.msg("Não foi possível abrir a porta " + config:servporta + "\n")
    fimse

func j_serv_socket # Conectado: cria objeto
  criar("jogoserv", arg0)

func ini # Objeto foi criado
  j_conec = arg0
  j_conec.proto = 2
  j_conec.aflooder = 1
  j_conec.cores = 2
  se txtproc(config:modo, "P") >= 0
    j_conec.msg("+OK Para Telnet pressione ENTER\n")
    j_tempo = 100 # 10 segundos depois desconecta
  senao
    j_passo = 2
    j_tempo = 36000 # Fecha conexão em uma hora
    jogsock:ini

func fim # Objeto foi apagado
  se j_passo == 2
    jogsock:fim

func j_tempo_exec # Tempo esgotado
  se j_passo == 1
    j_passo = 2
    jogsock:ini
  senao
    j_conec.msg("-Tempo esgotado\n")
    apagar(este)

func j_conec_fechou # Conexão fechou
  apagar(este)

func j_conec_msg # Recebeu mensagem do usuário
# arg0=mensagem
  j_tempo = 36000 # Fecha conexão em uma hora
  se j_passo == 2 # Dentro do jogo
    recebe(txtremove(arg0, "ED"))
  senao j_passo == 1 # Conectando
    j_passo = 2
    jogsock:ini
  senao j_passo == 0 # Decide se é Papovox ou Telnet
    j_passo = 1
    j_tempo = 10
    se arg0 != "" # Papovox sempre fornece um nome
      j_conec.msg("+OK Entrando via Papovox\n")
      j_conec.proto = 5
    senao # Nome vazio: é Telnet
      j_conec.msg("-OK Entrando via Telnet\n")


classe jogobot
telatxt tela
socket conec # Conexão com o bate-papo
inttempo conectando

func iniclasse
  se txtproc(config:modo, "B") >= 0
    criar(arg0)

func ini
  conectando = 100
  se !conec.abrir(config:serv, config:porta)
    apagar(este)
    tela.msg("Endereço inválido: " + config:serv + "\n")
  senao
    tela.msg("Conectando em " + config:serv + "\n")

func conectando_exec # 10 segundos tentando conectar
  apagar(este)
  se conec.proto < 2
    tela.msg("Tempo demais esperando resposta OK\n")
  senao
    tela.msg("Tempo demais esperando conectar\n")

func conec_err # Não conseguiu conectar
  apagar(este)
  tela.msg("Erro ao conectar: " + arg0 + "\n")

func conec_con # Conectou
  conec.proto = 2
# conectando = 0
# conec.msg("#bot " + config:sala + " " + config:senha + "\n")
  tela.msg("Conectado\n")

func conec_fechou
  apagar(este)
  tela.msg("Conexão encerrada: " + arg0 + "\n")

func conec_msg # Recebeu mensagem
  indiceitem ind
  ref obj
# tela.msg("<< " + arg0 + "\n")
  se conectando
    se txt(arg0, 0, 1) == "+"
      conectando = 0
      conec.msg("#bot " + config:sala + " " + config:senha + "\n")
    senao
      tela.msg("Erro: " + arg0)
      apagar(este)
    fimse
  fimse
  casovar txtmai(txt(arg0, 0, 2))
  casose "S+" # Nova sala
    criar("jogobot_sala", txt(arg0, 2))
    sair
  casose "S-" # Sala fechou
    apagar(ind.obj("bs " + txt(arg0, 2)))
    sair
  casose "S=" # Fim da lista de usuários da sala
    ind.obj("bs " + txt(arg0, 2)).listafim
    sair
  casose "U+" # Usuário entrou
    obj = ind.obj("bs " + txt(txt1(arg0), 2))
    obj && criar("jogobot_usr", txt2(arg0), obj)
    sair
  casose "U-" # Usuário saiu
    apagar(ind.obj("bu " + txt2(arg0)))
    sair
  casose "UM" # Usuário escreveu mensagem
    obj = ind.obj("bu " + txtsub(arg0, 1, 1))
    obj.recebe(txtsub(arg0, 2))
    sair
  casose "UA" # Usuário mudou de apelido
    obj = ind.obj("bu " + txtsub(arg0, 1, 1))
    obj.novonome(txtsub(arg0, 2, 1))
    sair
  casose
    tela.msg(arg0 + "\n")
  casofim


classe jogobot_sala
indiceobj sala_nome
listaobj sala_usr
int1 aberto
telatxt _tela

func ini # Nova sala
  sala_nome = "bs " + arg0
  txtproc(config:modo, "L") < 0 && _tela.msg("S+  " + txt2(sala_nome) + "\n")

func fim # Sala fechada
  txtproc(config:modo, "L") < 0 && _tela.msg("S-  " + txt2(sala_nome) + "\n")

func msg
  textotxt t1
  t1.addfim(arg0)
  enquanto t1.linhas
    $jogobot.conec.msg(txt2(sala_nome) + " " + t1.remove + "\n")
  efim

func listafim # Recebeu toda a lista de usuários da sala
  aberto = 1
# msg(config:boasvindas)


classe jogobot_usr
herda jogsock
indiceobj j_nome
listaitem j_sala
telatxt j_tela
const info = "b " + txt2(j_sala.objlista.sala_nome)

func ini # Entrou na sala
  j_nome = "bu " + arg0
  j_sala = arg1.sala_usr.addfim(este) # Adiciona na sala
  se txtproc(config:modo, "L") < 0
    j_tela.msg("U+  " + txt2(j_nome) + "  " + txt2(j_sala.objlista.sala_nome) + "\n")
  fimse
  jogsock:ini

func fim # Saiu da sala
  txtproc(config:modo, "L") < 0 && j_tela.msg("U-  " + txt2(j_nome) + "\n")
  jogsock:fim

func novonome # Mudou de apelido
  se txtproc(config:modo, "L") < 0
    j_tela.msg("Ua  " + txt2(j_nome) + " para " + arg0 + "\n")
  fimse
  j_nome = "bu " + arg0

func sala_msg # Envia mensagem para a sala do usuário
  j_sala.objlista.msg(arg0)

func msgsock # Envia mensagem para o usuário
  textotxt t1
  t1.addfim(arg0)
  enquanto t1.linhas
    $jogobot.conec.msg(txt2(j_nome) + " " + t1.remove + "\n")
  efim

func msgsala # Envia mensagem para todos da sala
  j_sala.objlista.msg(arg0)

func msgtodos # Envia mensagem para todos os jogadores
  ref r
  epara r = $jogobot_sala, r, r = objdepois(r)
    r.msg(arg0)
  efim
