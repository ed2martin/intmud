# Se deve usar vários arquivos
mapagrande = 1

# Quantas instruções uma função chamada pelo programa pode
# executar antes do controle retornar ao programa
exec = 10000

# Se deve abrir uma janela de texto - variável telatxt
telatxt = 1

# Aonde apresentar mensagens de erro no programa
log = 0

classe jogoini
# Inicializa as seguintes classes:
# jogoserv - jogar em uma porta
# jogolocal - jogar localmente
# jogobot - jogar em um chat
telatxt tela
int1 entrasenha # Se está digitando a senha do bot
txt100 txtsenha # A senha que está digitando
intexec fimprog # Para fechar o programa
debug dbg # Para informar sobre erros no programa
const iniclasse = !$[arg0] && criar(arg0)

func ini
  se !config:modobot # Se não vai ativar como bot
    jogobotfim # Inicializa servidor e jogo local
  senao config:senha # Se senha está na configuração
    jogobot:inicio(config:senha) # Inicializa bot
  senao
    entrasenha = 1
    txtsenha = ""
    tela.msg("Bot: Digite a senha de administração da sala; tecla ESC cancela\n")
    tela.linha = 1

func jogobotfim
  config:modoserv && jogoserv:inicio
  config:modolocal && jogolocal:inicio

func tela_tecla
  se !entrasenha # Não está entrando com a senha
    se arg0 == "F10" # Recarregar o programa
      $mudaprog.exec
      ret 1
    senao arg0 != "ESC" # Encerrar o programa
      ret 0
    fimse
    fimprog = 1
    $miscsav.salvartudo
    ret 1
  senao inttotal(arg0) == 1 # Um caracter qualquer: adiciona na senha
    txtsenha += arg0
    tela.tecla("*")
  senao arg0 == "BACK" || arg0 == "LEFT" # Apagar último caracter da senha
    txtsenha = txt(txtsenha, 0, inttotal(txtsenha) - 1)
    tela.tecla("BACK")
  senao arg0 == "ENTER" # Aceitar a senha
    tela.linha = 0, tela.texto = ""
    jogobot:inicio(txtsenha)
    entrasenha = 0, txtsenha = ""
  senao arg0 == "ESC" # Cancelar a conexão
    tela.linha = 0, tela.texto = ""
    entrasenha = 0, txtsenha = ""
    jogobotfim
  fimse
  ret 1

func fimprog_exec
  terminar

func dbg_erro
# tela.msg("\b\d1Erro:   " + txtsublin(arg0, 0, 1) + "\b\n" + txtsublin(arg0, 1, 10))
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    continuar !item.obj.jogconfig.15
    refvar t = item.obj.txtmais
    t.limpar
    t.addfim(arg0)
    t.addini("\b\d1(EXECLOG) " + t.remove + "\b")
    t.dividelin(75, 75)
    item.obj.txtmostra
  efim


classe jogolocal
herda jogsock
# Jogando localmente
telatxt j_tela
const msgsock = j_tela.msg(arg0 + "\n")
const msgsala = j_tela.msg(arg0 + "\n")
const msgtodos = j_tela.msg(arg0 + "\n")
const info = "l local"
const salaobj = arg0.addfim(este)

func inicio
  criar("jogolocal")

func ini
  msgsock("Jogando localmente; tecla ESC encerra o programa")
  jogsock:ini

func j_tela_msg
  j_tela.linha = 0
  recebe(txtremove(arg0, "ED"))
# func j_tela_tecla
# se arg0 == "ESC"
# jogsock:fim
# terminar


classe jogoserv
herda jogsock
# Rodando independente
comum serv j_serv # Para receber conexões
socket j_conec # Usuário conectado
inttempo j_tempo # Para encerrar conexão após um tempo ou entrar via Papovox
uint8 j_passo # 0=definindo se Papovox, 1=entrando Papovox, 2=dentro
listaitem j_servip # Objeto jogoservip que possui esse objeto
int1 infotelnet # 0 se Papovox (CRLF no final), 1 se Telnet (CRLF no começo)
const msgsock = j_conec.msg(infotelnet ? "\n" + arg0 : arg0 + "\n")
const msgsala = j_conec.msg(infotelnet ? "\n" + arg0 : arg0 + "\n")
const info = (infotelnet ? "t " : "p ") + j_conec.ip

func msgtodos
  ref r
  epara r = $jogoserv, r, r = objdepois(r)
    r.j_conec.msg(arg0 + "\n")
  efim

func salaobj
  ref r
  epara r = $jogoserv, r, r = objdepois(r)
    arg0.addfim(r)
  efim

func inicio
  telatxt tela
  se jogoserv:j_serv.abrir(config:servender, config:servporta)
    tela.msg("Esperando conexões na porta " + config:servporta + "\n")
  senao
    tela.msg("Não foi possível abrir a porta " + config:servporta + "\n")
  fimse

func j_serv_socket # Conectado: cria objeto
  criar("jogoserv", arg0)

func ini # Objeto foi criado
# Acerta variáveis
  j_conec = arg0
  j_conec.proto = 2
  j_conec.aflooder = 1
  j_conec.cores = 2
# Checa número de conexões por IP
  indiceitem i
  ref r
  r = i.obj("ip " + j_conec.ip)
  se !r
    r = criar("jogoservip")
    r.endereco = "ip " + j_conec.ip
  senao r.usr.total >= config:servusr
    j_conec.msg("-Atingido limite de conexões por IP\n")
    apagar(este)
    ret
  senao r.entrou
    j_conec.msg("-Entre daqui alguns segundos\n")
    apagar(este)
    ret
  fimse
  j_servip = r.usr.addfim(este)
  r.entrou = config:servtempo
# Mensagem inicial
  se config:modoserv == 2
    j_conec.msg("+OK Para Telnet pressione ENTER\n")
    j_tempo = 100 # 10 segundos depois desconecta
  senao
    j_passo = 2
    j_tempo = 36000 # Fecha conexão em uma hora
    infotelnet = 1
    jogsock:ini

func fim # Objeto foi apagado
  ref r
  r = j_servip.objlista, r.usr.total <= 1 && r.entrou <= 0 && apagar(r)
  j_passo == 2 && jogsock:fim

func j_tempo_exec # Tempo esgotado
  se j_passo == 1
    j_passo = 2
    jogsock:ini
  senao
    j_conec.msg("-Tempo esgotado\n")
    apagar(este)

func j_conec_fechou # Conexão fechou
  apagar(este)

func j_conec_msg # Recebeu mensagem do usuário
# arg0=mensagem
  j_tempo = 36000 # Fecha conexão em uma hora
  se j_passo == 2 # Dentro do jogo
    recebe(txtremove(arg0, "ED"))
  senao j_passo == 1 # Conectando
    j_passo = 2
    jogsock:ini
  senao j_passo == 0 # Decide se é Papovox ou Telnet
    j_passo = 1
    j_tempo = 10
    se arg0 != "" # Papovox sempre fornece um nome
      j_conec.msg("+OK Entrando via Papovox\n")
      j_conec.proto = 5
    senao # Nome vazio: é Telnet
      j_conec.msg("-OK Entrando via Telnet")
      infotelnet = 1


classe jogoservip
indiceobj endereco # "ip " + endereço IP
listaobj usr # Lita de usuários que possuem esse endereço IP
inttempo entrou # Se >0, é o tempo de espera para outro usuário entrar

func entrou_exec
  usr.total == 0 && apagar(este)
# func ini
# telatxt t
# t.msg("INI\n")
# func fim
# telatxt t
# t.msg("FIM " + endereco + "\n")


classe jogobot
telatxt tela
socket conec # Conexão com o bate-papo
inttempo conectando
int1 conecfim # É verdadeiro se já acabou de conectar
txt100 senha # Senha para conectar-se como bot

func inicio # arg0 = senha para conectar-se
  criar("jogobot", arg0)

func ini
  conecfim = 0, conectando = 100, senha = arg0
  se !conec.abrir(config:serv, config:porta)
    apagar(este)
    tela.msg("Bot: Endereço inválido: " + config:serv + "\n")
  senao
    tela.msg("Bot: Conectando em " + config:serv + " porta " + config:porta + "\n")

func fim
  !conecfim && $jogoini.jogobotfim

func conectando_exec # 10 segundos tentando conectar
  apagar(este)
  se conec.proto < 2
    tela.msg("Bot: Tempo demais esperando resposta OK\n")
  senao
    tela.msg("Bot: Tempo demais esperando conectar\n")
  fimse

func conec_err # Não conseguiu conectar
  apagar(este)
  tela.msg("Bot: Erro ao conectar: " + arg0 + "\n")

func conec_con # Conectou
  conec.proto = 2
# conectando = 0
# conec.msg("#bot " + config:sala + " " + senha + "\n")
  tela.msg("Bot: Conectado\n")

func conec_fechou
  apagar(este)
  tela.msg("Bot: Conexão encerrada: " + arg0 + "\n")

func conec_msg # Recebeu mensagem
  indiceitem ind
  ref obj
# tela.msg("<< " + arg0 + "\n")
  se conectando
    se txt(arg0, 0, 1) == "+"
      conectando = 0
      conec.msg("#bot " + config:sala + " " + senha + "\n")
    senao
      tela.msg("Bot: Erro " + arg0)
      apagar(este)
    fimse
  fimse
  casovar txtmai(txt(arg0, 0, 2))
  casose "S+" # Nova sala
    criar("jogobot_sala", txt(arg0, 2))
    sair
  casose "S-" # Sala fechou
    apagar(ind.obj("bs " + txt(arg0, 2)))
    sair
  casose "S=" # Fim da lista de usuários da sala
    ind.obj("bs " + txt(arg0, 2)).listafim
    sair
  casose "U+" # Usuário entrou
    obj = ind.obj("bs " + txt(txt1(arg0), 2))
    obj && criar("jogobot_usr", txt2(arg0), obj)
    sair
  casose "U-" # Usuário saiu
    apagar(ind.obj("bu " + txt2(arg0)))
    sair
  casose "UM" # Usuário escreveu mensagem
    obj = ind.obj("bu " + txtsub(arg0, 1, 1))
    obj.recebe(txtsub(arg0, 2))
    sair
  casose "UA" # Usuário mudou de apelido
    obj = ind.obj("bu " + txtsub(arg0, 1, 1))
    obj.novonome(txtsub(arg0, 2, 1))
    sair
  casose
    tela.msg("Bot: " + arg0 + "\n")
  casose ""
    ret
  casofim
  se !conecfim
    senha = "", conecfim = 1, $jogoini.jogobotfim


classe jogobot_sala
indiceobj sala_nome
listaobj sala_usr
int1 aberto
telatxt _tela

func ini # Nova sala
  sala_nome = "bs " + arg0
  !config:modolocal && _tela.msg("S+  " + txt2(sala_nome) + "\n")

func fim # Sala fechada
  !config:modolocal && _tela.msg("S-  " + txt2(sala_nome) + "\n")

func msg
  textotxt t1
  t1.addfim(arg0)
  enquanto t1.linhas
    $jogobot.conec.msg(txt2(sala_nome) + " " + t1.remove + "\n")
  efim

func listafim # Recebeu toda a lista de usuários da sala
  aberto = 1
# msg(config:boasvindas)


classe jogobot_usr
herda jogsock
indiceobj j_nome
listaitem j_sala
telatxt j_tela
const info = "b " + txt2(j_sala.objlista.sala_nome)
const salaobj = arg0.addfim(j_sala.objlista.sala_usr)

func ini # Entrou na sala
  j_nome = "bu " + arg0
  j_sala = arg1.sala_usr.addfim(este) # Adiciona na sala
  se !config:modolocal
    j_tela.msg("U+  " + txt2(j_nome) + "  " + txt2(j_sala.objlista.sala_nome) + "\n")
  fimse
  jogsock:ini

func fim # Saiu da sala
  !config:modolocal && j_tela.msg("U-  " + txt2(j_nome) + "\n")
  jogsock:fim

func novonome # Mudou de apelido
  se !config:modolocal
    j_tela.msg("Ua  " + txt2(j_nome) + " para " + arg0 + "\n")
  fimse
  j_nome = "bu " + arg0

func sala_msg # Envia mensagem para a sala do usuário
  j_sala.objlista.msg(arg0)

func msgsock # Envia mensagem para o usuário
  textotxt t1
  t1.addfim(arg0)
  enquanto t1.linhas
    $jogobot.conec.msg(txt2(j_nome) + " " + t1.remove + "\n")
  efim

func msgsala # Envia mensagem para todos da sala
  j_sala.objlista.msg(arg0)

func msgtodos # Envia mensagem para todos os jogadores
  ref r
  epara r = $jogobot_sala, r, r = objdepois(r)
    r.msg(arg0)
  efim
