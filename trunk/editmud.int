# Se deve usar vários arquivos
mapagrande = 0

# Quantas instruções uma função chamada pelo programa pode
# executar antes do controle retornar ao programa
exec = 5000

# Se deve abrir uma janela de texto - variável telatxt
telatxt = 1

# Aonde apresentar mensagens de erro no programa
log = 0

classe edit_mud
# Conectar via telnet ou outro programa similar na porta especificada.
#
# Configuração:
const senhaadm = "modo"
const enderadm = "localhost" # Ou "" para permitir conexões externas
const portaadm = 2000
#
# Para ler um objeto digitar a senha de administração, ler e o nome
# do objeto. Exemplo:
# modo ler jog
#
# Para alterar ou criar um objeto digitar a senha de administração,
# "mudar" e o nome do objeto. nas linhas que seguirem escrever as
# instruções do objeto. Quando terminar, escrever uma linha contendo
# ---.
# Exemplo:
# modo mudar jog
# func escr
# este.msg("Bom dia\n")
# ---
#
# Para apagar um objeto digitar a senha de administração, apagar e
# o nome do objeto. Exemplo:
# modo apagar teste
#
# Para salvar o mapa digitar a senha de administração e a palavra salvar.
# Exemplo:
# modo salvar
#
# Para obter a lista de objetos globais digitar a senha de administração
# e a palavra lista.
# Exemplo:
# modo lista
#
comum serv servidor
socket conec
inttempo fechar # Para fechar socket após um tempo
textotxt texto # Texto que está enviando ou recebendo
int8 numcom # Comando: 0=esperando, 1=enviando, 2=recebendo

func iniclasse
  edit_mud:servidor.abrir(edit_mud:enderadm, edit_mud:portaadm)

func servidor_socket
  ref novo
  novo = criar("edit_mud")
  novo.conec = arg0
  novo.fechar = 100

func fechar_exec
  apagar(este)

func conec_msg
# telatxt t
# t.msg(arg0 + "\n")
  conec_msg[numcom](arg0)

func conec_msg0
  debug d
  txt100 t.3
  d.exec = 20000
  t.palavras(arg0)
  se t.0 != senhaadm
    apagar(este)
    ret
  senao !exec_[t.1](t.2)
    apagar(este)

func conec_msg2
  prog p
  textopos pos
  int1 existe
  se arg0 != "---"
    se texto.bytes < 60000
      texto.addfim(arg0)
    fimse
  senao texto.bytes >= 60000
    conec.msg("-Classe muito grande\n")
    apagar(este)
  senao texto.linhas < 2
    conec.msg("-Faltou nome do arquivo da classe\n")
    apagar(este)
  senao
    pos = texto.ini
    existe = p.existe(pos.texto)
    pos.depois
    pos.mudar("", 0, 4)
    texto.addfim(p.criar(texto.remove(texto.linhas)))
    se texto.bytes <= 1
      se existe
        conec.msg("+OK Classe alterada\n")
      senao
        conec.msg("+OK Classe criada\n")
      fimse
    senao
      enquanto pos.lin
        conec.msg("-" + pos.texto + "\n")
        pos.depois
      efim
    fimse
    apagar(este)

func conec_env
  textopos pos
  se numcom = 1
    se texto.linhas = 0
      apagar(este)
    senao
      pos = texto.ini
      se conec.msg(pos.textolin(10) + "\n")
        pos.remove(10)

func exec_salvar
  prog p
  p.salvar("L78N1I2C1F1V0")
  conec.msg("+OK arquivo salvo\n")

func exec_apagar
  prog p
  se p.apagar(arg0)
    conec.msg("+OK Classe apagada\n")
  senao
    conec.msg("-Classe não existe: " + arg0 + "\n")

func exec_lista
  prog p
  p.iniclasse
  enquanto p.lin
    texto.addfim(p.texto)
    p.depois
  efim
  texto.addfim("---")
  numcom = 1
  conec_env
  ret 1

func exec_ler
  prog p
  se !p.inilinha(arg0)
    conec.msg("-Classe não existe: " + arg0 + "\n")
    ret
  fimse
  texto.addfim("ARQ:" + p.arquivo(arg0))
  enquanto p.lin
    se p.nivel = 0 & txt1(p.texto) = "func"
      texto.addfim("")
    fimse
    texto.addfim(txtesp(p.nivel * 2) + p.texto)
    p.depois
  efim
  texto.addfim("---")
  numcom = 1
  conec_env
  ret 1

func exec_mudar
  texto.addfim(arg0)
  numcom = 2
  ret 1
