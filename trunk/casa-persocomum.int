classe personagem
# Personagem
sav listaitem idono # Uso interno: aonde o personagem
sav listaobj dentro1 # Lista de personagens que possui
sav listaobj dentro2 # Efeitos que estão afetando o personagem
sav textovar var # Variáveis do personagem
txt40 alvo # Alvo do personagem
txt40 alvo2 # Quem atacou o personagem por último
listaitem atkrec # Quem esse personagem atacou; recebe experiência se vencer
listaobj atkenv # Quem atacou esse personagem; dá experiência se perder
inttempo t_aguarde # Tempo para processar próximo comando
inttempo t_proc # Para processar comportamento do personagem
txt512 t_aguardetxt # Próximo comando
const perso = 1 # Indica que é personagem
const persobat = este # Personagem usado na batalha
const persoesc = este # Personagem escolhido
const nomebat = nome # Nome usado na batalha
sav uint16 nivel # Nível do personagem
sav uint32 energia # Energia atual, quando chega a 0 morre
sav uint32 expatual # Experiência atual
intexec recalc # Se deve recalcular defesa, ataque e velocidade
int8 deftipo.12 # Bônus de defesa para os diferentes tipos de ataque
# deftipo.0 = água
# deftipo.1 = ar
# deftipo.2 = elétrico
# deftipo.3 = fogo
# deftipo.4 = força
# deftipo.5 = gás
# deftipo.6 = gelo
# deftipo.7 = pedra
# deftipo.8 = planta
# deftipo.9 = terra
# deftipo.10 = verme
# deftipo.11 = normal
# defesa total = defesa base * misc:defbonus.[128 + deftipo]
uint32 veloc # Velocidade
uint32 defesa # Defesa base
uint32 ataque # Ataque base
uint32 enermax # Energia máxima
# const agressivo = 0 # Se é agressivo (ataca jogadores)
# const persegue = 0 # Se persegue jogadores
const avisachegou = nome + " " + nivel + " chegou" # Mensagem quando entra no jogo

func ini # Personagem foi criado
# Variáveis
  t_proc = 10
  dono = arg0
  nivel = arg1
  recalc_exec
  energia = enermax
# Mensagem que chegou
  txt100 avisamsg
  avisamsg = avisachegou
  avisamsg && msg1(avisamsg)
# Habilidades e outras variáveis
  se arg2
    textotxt t
    t.addfim(txttroca(arg2, ",", "\n"))
    enquanto t.linhas
      var.mudar(t.remove + "=1")
    efim
    recuperar # Recupera status

func fim # Personagem foi apagado
  atkenv.limpar

varfunc dono # O dono do personagem
# IMPORTANTE: varfunc também está definido na classe jogador
  se !args # Nenhum argumento: leitura
    ret idono.objlista # Retorna objeto que contém o personagem ou item
  senao idono.objlista != ref(arg0)
    idono.remove
    idono = ref(arg0).dentro1.addfim(este) # Adiciona personagem

func msg1 # Mensagem para todos exceto o próprio personagem
  listaitem i
  i = dono.dentro1.ini
  enquanto i
    i.obj != este && i.obj.msg(arg0)
    i.depois
  efim

func objjog # Objeto do jogador
  ret dono.perso ? dono : este

func esperar # Personagem espera um tempo até poder agir novamente
# arg0 = tempo, em décimos de segundo
  uint32 x
  x = arg0
  se x > 0
    t_aguarde == 0 && (t_aguardetxt = "")
    t_aguarde < x && (t_aguarde = x)
    dono.perso && dono.esperar(x)

func teclou # Personagem escreveu algo
  ref obj # Objeto que vai processar o comando
  prog p # Para procurar o objeto
# Checa se deve aguardar
  se t_aguarde
    t_aguardetxt = arg0
    msg("Aguarde")
    ret
  senao arg0 == ""
    ret
  senao arg0 == config:senhaadm && config:senhaadm
    e_admin = !e_admin
    e_admin && msg("Você virou administrador, tecle adm para saber os comandos")
    !e_admin && msg("Você deixou de ser administrador")
    ret
# Eventos escreveu
  senao !dono.perso && dono.escr(este, arg0)
    ret
  senao escr(este, arg0)
    ret
  fimse
# Obtém o comando
  p.iniclasse("cmd_" + txt1(arg0))
  enquanto p.lin
    obj = $[p.texto].obj(este, arg0)
    se obj
      sair
    fimse
    p.depois
  efim
# Eventos cmd
  se !obj
    msg("O quê?")
  senao !dono.perso && dono.[obj](este, txt2(arg0))
  senao [obj](este, txt2(arg0))
# Executa comando
  senao obj.escr(este, txt2(arg0))

func t_aguarde_exec
  se t_aguardetxt
    txt512 lin
    lin = t_aguardetxt, t_aguardetxt = ""
    teclou(lin)

func t_proc_exec
  t_proc = 10
  se dono.jog # Se dono é jogador
    ret
  senao dono.tempojog < misc:tempo # Checa tempo de vida do personagem
    apagar(este)
    ret
  senao t_aguarde # Se deve aguardar
    ret
  fimse
  se agressivo # Se for agressivo
    txt100 t1
    ref r
    t1 = escolhehab, r = escolhejog
    se t1 && r && ataqueini
      $cmd_[t1].ataca(este, r)
      ret
    fimse
  fimse
  se persegue # Se persegue jogador
    txt100 dir
    uint32 valor
    valor = dono.tempojog
    valor <= dono.dir_n.tempojog && (valor = dono.dir_n.tempojog) + dir = "n"
    valor <= dono.dir_s.tempojog && (valor = dono.dir_s.tempojog) + dir = "s"
    valor <= dono.dir_l.tempojog && (valor = dono.dir_l.tempojog) + dir = "l"
    valor <= dono.dir_o.tempojog && (valor = dono.dir_o.tempojog) + dir = "o"
    valor <= dono.dir_c.tempojog && (valor = dono.dir_c.tempojog) + dir = "subir"
    valor <= dono.dir_b.tempojog && (valor = dono.dir_b.tempojog) + dir = "descer"
    valor <= dono.dir_en.tempojog && (valor = dono.dir_en.tempojog) + dir = "entrar"
    valor <= dono.dir_sa.tempojog && (valor = dono.dir_sa.tempojog) + dir = "sair"
    dir && teclou(dir)
  fimse

func escolhehab # Escolhe e retorna o nome de uma habilidade
  txt100 t1 # Nome da habilidade
  uint8 total
# Obtém a quantidade de habilidades
  t1 = var.ini("h_")
  enquanto txt(t1, 0, 2) == "h_"
    total += 1, t1 = var.depois(t1)
  efim
# Checa se tem alguma habilidade
  se total == 0
    ret ""
  fimse
# Escolhe uma habilidade
  total = rand(total)
  t1 = var.ini("h_")
  enquanto total && t1
    total -= 1, t1 = var.depois(t1)
  efim
  ret txt(t1, 2)

func escolhejog # Escolhe e retorna um jogador
  listaitem i
  uint8 total
# Obtém o alvo
  i = dono.dentro1.ini
  enquanto i
    i.obj.jog && (total += 1)
    i.depois
  efim
# Checa se tem jogador
  se total == 0
    ret nulo
  fimse
# Escolhe um jogador
  total = rand(total) + 1
  i = dono.dentro1.ini
  enquanto i
    i.obj.jog && (total -= 1)
    se total == 0
      ret i.obj
    fimse
    i.depois
  efim

func persoalvo
  listaitem i
  nomeobj nome
  nome.ini(alvo, 1)
  i = dono.dentro1.ini
  enquanto i
    se visivel(i.obj) && nome.nome(i.obj.nome)
      ret i.obj
    fimse
    i.depois
  efim

func visivel # Checa se um personagem está visível (arg0=personagem)
  ret 1

func recuperar # Recupera status do personagem
  dentro2.apagar # Apaga todos os stats
  se energia == 0 && dono.jog
    energia = enermax
    dono.escolhebat # Atualiza persobat
  senao
    energia = enermax

func ataqueini # Inicia ataque; retorna 1 se pode atacar
  se energia == 0
    msg("Você está desmaiado")
  senao dono.sembriga
    msg("Não é permitido brigas aqui")
  senao ev_cancela("ataqueini")
  senao
    ev_exec("ataqueexec", 0)
    ret 1

func morreu # Personagem morreu
# Fazer arg0=1 se não deve apagar o personagem
  energia = 0
# Jogador: retira toda experiência e transfere para outro lugar
  se jog
    enquanto atkenv
      atkenv.ini.obj.expatual = 0
      atkenv.ini.remove
    efim
    !arg0 && dono.msg(nome + " morreu")
    !arg0 && (dono = config:salafim)
    ret
# Animal do jogador: não dá experiência
  senao dono.jog
    atkenv.limpar
    !arg0 && dono.dono.msg(nome + " de " + dono.nome + " desmaiou")
    !arg0 && dono.escolhebat # Atualiza persobat
    ret
  fimse
# Outro personagem: dá experiência
  real total # Para saber a quantidade de personagens
  real v1 # Para calcular a experiência ganha
  total = atkenv.total * 16
  enquanto atkenv
    v1 = intpos(nivel - atkenv.ini.obj.nivel + 8)
    v1 > 16 && (v1 = 16)
    atkenv.ini.obj.ganhaexp(v1 * (nivel * 10 + 50) / total)
    atkenv.ini.remove
  efim
# Checa se deve gerar mensagens e apagar objeto
  se arg0
# Não tomar nenhuma providência
  senao dono.perso
    dono.dono.msg(nome + " de " + dono.nome + " desmaiou")
    dono.escolhebat
  senao
    dono.msg(nome + " morreu")
    apagar(este)

func ganhaexp # Personagem ganha experiência
# arg0 = experiência
  expatual += arg0
  se expatual > expmax
    expatual -= expmax
    nivel += 1
    dono.msg(nome + " foi para nível " + nivel)
    recalc = 1 # Recalcular atributos do personagem

func ver # Quando alguém tecla ver seguido do nome do personagem
  arg0.msg(nome + " nível " + nivel + " energia " + energia + " de " + enermax)
  ret 1

func ev_exec # Chama algum evento
# arg0 = nome da função
  listaitem i # Para percorrer a lista de efeitos
  i = este.dentro2.ini
  enquanto i
    i.obj.[arg0], i.depois
  efim

func ev_cancela # Checa se algum evento deve cancela uma ação
# arg0 = nome da ação (nome da função nos objetos dos efeitos)
# Retorna 1 se deve cancelar
  listaitem i # Para percorrer a lista de efeitos
  i = este.dentro2.ini
  enquanto i
    se i.obj.[arg0]
      ret 1
    fimse
    i.depois
  efim
  ret 0

func novoefeito # Cria novo efeito para o personagem
# arg0 = nome da classe do efeito
  listaitem i
  i = dentro2.ini
  enquanto i
    se arg0 == i.obj # Se o personagem já possui o efeito
      i.obj.ini2 # Reforça o efeito
      ret
    fimse
    i.depois
  efim
  ref r
  r = criar(arg0) # Cria objeto do efeito
  r.idono = dentro2.addfim(r) # Indica que efeito pertence ao personagem
  !r.idono && apagar(r) # Se o dono do efeito estiver errado: apaga efeito
  r.ini1 # Procedimentos do efeito quando é criado

func apagarefeito # Apaga efeito do personagem
# arg0 = nome da classe do efeito
  listaitem i
  i = dentro2.ini
  enquanto i
    arg0 == i.obj && apagar(i.obj)
    i.depois
  efim

func objefeito # Retorna o objeto do efeito ou nulo se não existir
# arg0 = nome da classe do efeito
  listaitem i
  i = dentro2.ini
  enquanto i
    se arg0 == i.obj
      ret i.obj
    fimse
  efim
