classe adm_atk
# Comandos de habilidades e magias, geralmente ataques
#
const adm_hab = "\b\c3Habilidades e magias\b\n\
\c2LHAB\b [nome]\n\
\c2LMAG\b [nome]\n\
  Lista habilidades ou magias que começam com o nome especificado.\n\
\c2CHAB\b <nome>\n\
\c2CMAG\b <nome>\n\
  Cria uma habilidade ou magia. Nome deve ser o nome da habilidade ou\n\
  magia, e deve ser composto de letras, mas pode ter espaços no meio.\n\
\c2EHAB\b <nome>\n\
\c2EMAG\b <nome>\n\
  Edita uma habilidade ou uma magia.\n\
\c2AHAB\b <nome>\n\
\c2AMAG\b <nome>\n\
  Apaga uma habilidade ou uma magia."

func cmd_lhab # Listar habilidades
  prog p
  textotxt t
  txt100 lin
  epara p.iniclasse("cmd_"), p.lin && t.linhas < 499, p.depois
    continuar !$[p.texto].cmdmenu # Continua se não é uma habilidade
    lin = txtcopiamai(txt2(txte(p.texto)), "A") + ", "
    se $[p.texto].tipoalvo < 4
      lin += txtsublin(config:atknomes, $[p.texto].tipoatk, 1)
    fimse
    casovar $[p.texto].tipoalvo
    casose "1"
      lin += ", Outros"
      sair
    casose "2"
      lin += ", Todos dividindo ataque"
      sair
    casose "3"
      lin += ", Todos sem dividir ataque"
      sair
    casose "4"
      lin += "Não agressivo"
      sair
    casose "5"
      lin += "Não agressivo, O próprio"
      sair
    casofim
    t.addfim(lin)
  efim
  se t.linhas
    msg2("\b\c6Habilidade, Tipo, Alvo\b\n" + t.remove(500))
  senao
    msg("\bNenhuma habilidade encontrada.")
  fimse
  ret 1

func cmd_lmag # Listar magias
  prog p
  textotxt t
  txt100 lin
  epara p.iniclasse("magia_"), p.lin && t.linhas < 499, p.depois
    continuar !$[p.texto].cmdmenu # Continua se não é uma magia editável
    lin = txtcopiamai(txt2(txte(p.texto)), "A") + ", "
    se $[p.texto].tipoalvo < 4
      lin += txtsublin(config:atknomes, $[p.texto].tipoatk, 1)
    fimse
    casovar $[p.texto].tipoalvo
    casose "1"
      lin += ", Outros"
      sair
    casose "2"
      lin += ", Todos dividindo ataque"
      sair
    casose "3"
      lin += ", Todos sem dividir ataque"
      sair
    casose "4"
      lin += "Não agressivo"
      sair
    casose "5"
      lin += "Não agressivo, O próprio"
      sair
    casofim
    t.addfim(lin)
  efim
  se t.linhas
    msg2("\b\c6Magia, Tipo, Alvo\b\n" + t.remove(500))
  senao
    msg("\bNenuma magia encontrada.")
  fimse
  ret 1

func cmd_chab # Criar habilidade
  prog p
  txt80 nome
  uint16 num
# Checa se digitou nome do ataque
  se arg0 == ""
    msg("Tecle o nome da habilidade após CHAB")
    ret 1
  fimse
# Checa se nome válido
  nome = txte(txtremove(arg0, EMDSA))
  se txtsepara(nome, "DO+DOL,DOL+DO") != nome
    msg("Nome inválido para habilidade: " + nome)
    ret 1
  senao p.existe("cmd_" + nome)
    msg("Já existe o comando: " + nome)
    ret 1
  senao p.existe("soc_" + nome)
    msg("Já existe o comando social: " + nome)
    ret 1
  fimse
# Pergunta que tipo de habilidade criar
  var.opcclasse = "cmd_" + txts(txtmin(nome))
  var.opcvar = "h_" + txtcopiamai(txte(nome), "A")
  var.opctipo = "habilidade"
  ret p_chab("\b")

func cmd_cmag # Criar magia
  prog p
  txt80 nome
  uint16 num
# Checa se digitou nome do ataque
  se arg0 == ""
    msg("Tecle o nome da magia após CMAG")
    ret 1
  fimse
# Checa se nome válido
  nome = txte(txtremove(arg0, EMDSA))
  se txtsepara(nome, "DO+DOL,DOL+DO") != nome
    msg("Nome inválido para magia: " + nome)
    ret 1
  senao p.existe("magia_" + nome)
    msg("Já existe a magia: " + nome)
    ret 1
  fimse
# Pergunta que tipo de magia criar
  var.opcclasse = "magia_" + txts(txtmin(nome))
  var.opcvar = "m_" + txtcopiamai(txte(nome), "A")
  var.opctipo = "magia"
  ret p_chab("\b")

func p_chab # Escolher o tipo de habilidade
  txt40 deriv
  casovar txtmin(arg0)
  casose
    msg("Opção inválida")
  casose "\b"
  casose ""
    passo = "chab"
    msg("Entre com o tipo de " + var.opctipo + ", O mostra as opções, Z cancela")
    ret 1
  casose "z"
    msg("Retornando ao jogo")
    passo = "", var.opcclasse = "", var.opcnome = "", var.opctipo = ""
    ret 1
  casose "o"
    txtmais.limpar
    txtmais.addfim("C Habilidade ou magia comum")
    txtmais.addfim("I Identificar")
    txtmais.addfim("R Retornar")
    txtmostra
    ret 1
  casose "c"
    deriv = "comando_ataque"
    sair
  casose "i"
    deriv = "comando_identificar"
    sair
  casose "r"
    deriv = "comando_retornar"
    sair
  casofim
# Cria habilidade ou magia
  txt200 lin
  lin = var.opcclasse + "\nb-hab\nherda " + deriv
  lin += "\nconst nomevar = \"" + var.opcvar + "\""
  prog p
  p.criar(lin)
  criar("admordena", "b-hab")
# config:salvar
  msg("\bCriou " + var.opctipo + ": " + txt(var.opcvar, 2))
  admlog("criou " + var.opctipo + " " + txt(var.opcvar, 2))
  passo = "", var.opcclasse = "", var.opcnome = "", var.opctipo = ""
  ret 1

func cmd_ahab # Apagar habilidade
  prog p
  se arg0 == ""
    msg("Tecle um ou mais nomes de habilidades após AHAB")
    ret 1
  fimse
  uint16 x
  enquanto txtsub(arg0, x, 1)
    se !p.existe("cmd_" + txtsub(arg0, x, 1))
      msg("Habilidade não existe: " + txtsub(arg0, x, 1))
      ret 1
    senao !$cmd_[txtsub(arg0, x, 1)].cmdmenu
      msg("Comando não é uma habilidade: " + txtsub(arg0, x, 1))
      ret 1
    fimse
    x += 1
  efim
  tpasso = arg0, p_ahab
  ret 1

func p_ahab # Confirmar que quer apagar habilidade
  passo = ""
  se arg0 == "n"
    msg("Cancelado")
  senao arg0 == "s"
    prog p
    uint16 x
    enquanto txtsub(tpasso, x, 1)
      p.apagar("cmd_" + txtsub(tpasso, x, 1))
      x += 1
    efim
    config:salvar
    se x < 2
      msg("Habilidade apagada: " + tpasso)
      admlog("apagou habilidade " + tpasso)
    senao
      msg("Habilidades apagados: " + tpasso)
      admlog("apagou habilidades " + tpasso)
    fimse
  senao
    passo = "ahab"
    refvar m1 = txt2(tpasso) ? "habilidades" : "habilidade"
    msg("Apagar " + m1 + " " + tpasso + "? Tecle S ou N")
  fimse
  ret 1

func cmd_amag # Apagar magia
  prog p
  se arg0 == ""
    msg("Tecle um ou mais nomes de magias após AMAG")
    ret 1
  fimse
  uint16 x
  enquanto txtsub(arg0, x, 1)
    se !p.existe("magia_" + txtsub(arg0, x, 1))
      msg("Magia não existe: " + txtsub(arg0, x, 1))
      ret 1
    senao !$magia_[txtsub(arg0, x, 1)].cmdmenu
      msg("Magia não pode ser apagada: " + txtsub(arg0, x, 1))
      ret 1
    fimse
    x += 1
  efim
  tpasso = arg0, p_amag
  ret 1

func p_amag # Confirmar que quer apagar magia
  passo = ""
  se arg0 == "n"
    msg("Cancelado")
  senao arg0 == "s"
    prog p
    uint16 x
    enquanto txtsub(tpasso, x, 1)
      p.apagar("magia_" + txtsub(tpasso, x, 1))
      x += 1
    efim
    config:salvar
    se x < 2
      msg("Magia apagada: " + tpasso)
      admlog("apagou magia " + tpasso)
    senao
      msg("Magias apagadas: " + tpasso)
      admlog("apagou magias " + tpasso)
    fimse
  senao
    passo = "amag"
    refvar m1 = txt2(tpasso) ? "magias" : "magia"
    msg("Apagar " + m1 + " " + tpasso + "? Tecle S ou N")
  fimse
  ret 1

func cmd_ehab # Editar habilidade
  prog p
  se arg0 == ""
    msg("Tecle o nome da habilidade após EHAB")
  senao !p.existe("cmd_" + arg0)
    msg("Habilidade não existe: " + arg0)
  senao !$cmd_[arg0].cmdmenu
    msg("Comando não é uma habilidade: " + arg0)
  senao
    var.classe1 = "cmd_" + txts(txtmin(arg0))
    var.menufim = "menu_hab_" + $cmd_[arg0].cmdmenu
    m_menu(var.menufim)
  fimse
  ret 1

func cmd_emag # Editar magia
  prog p
  se arg0 == ""
    msg("Tecle o nome da magia após EMAG")
  senao !p.existe("magia_" + arg0)
    msg("Magia não existe: " + arg0)
  senao !$magia_[arg0].cmdmenu
    msg("Comando não é uma magia editável: " + arg0)
  senao
    var.classe1 = "magia_" + txts(txtmin(arg0))
    var.menufim = "menu_magia_" + $magia_[arg0].cmdmenu
    m_menu(var.menufim)
  fimse
  ret 1


classe menu_hab_custo
const titulo = "Consome"
const menufim = var.menufim
const colunas = 25
#
const nome1 = "Tempo de espera"
const info1 = "Tempo mínimo que deve esperar, em décimos de segundo"
const tipo1 = "numero"
const clas1 = var.classe1
const vari1 = "c_espera"
const extr1 = "5 150"
#
const nome2 = "Vida iniciante"
const info2 = "Quantos pontos de vida consome no nível iniciante"
const tipo2 = "numero"
const clas2 = var.classe1
const vari2 = "c_vida1"
#
const nome3 = "Vida perito"
const info3 = "Quantos pontos de vida consome no nível perito"
const tipo3 = "numero"
const clas3 = var.classe1
const vari3 = "c_vida2"
#
const nome4 = "Mana iniciante"
const info4 = "Quantos pontos de mana consome no nível iniciante"
const tipo4 = "numero"
const clas4 = var.classe1
const vari4 = "c_mana1"
#
const nome5 = "Mana perito"
const info5 = "Quantos pontos de mana consome no nível perito"
const tipo5 = "numero"
const clas5 = var.classe1
const vari5 = "c_mana2"
#
const nome6 = "Vigor iniciante"
const info6 = "Quantos pontos de vigor consome no nível iniciante"
const tipo6 = "numero"
const clas6 = var.classe1
const vari6 = "c_move1"
#
const nome7 = "Vigor perito"
const info7 = "Quantos pontos de vigor consome no nível perito"
const tipo7 = "numero"
const clas7 = var.classe1
const vari7 = "c_move2"


classe menu_hab_alvo
const titulo = "Afeta o alvo"
const menufim = var.menufim
const colunas = 25
#
const nome1 = "Condição"
const tipo1 = "opcao"
const clas1 = var.classe1
const vari1 = "a_cond"
const extr1 = "Um ou mais pontos de vida\nNenhum ponto de vida\nNenhuma condição"
#
const nome2 = "Vida iniciante"
const info2 = "Quantos pontos de vida ganha no nível iniciante"
const tipo2 = "numero"
const clas2 = var.classe1
const vari2 = "a_vida1"
#
const nome3 = "Vida perito"
const info3 = "Quantos pontos de vida ganha no nível perito"
const tipo3 = "numero"
const clas3 = var.classe1
const vari3 = "a_vida2"
#
const nome4 = "Mana iniciante"
const info4 = "Quantos pontos de mana ganha no nível iniciante"
const tipo4 = "numero"
const clas4 = var.classe1
const vari4 = "a_mana1"
#
const nome5 = "Mana perito"
const info5 = "Quantos pontos de mana ganha no nível perito"
const tipo5 = "numero"
const clas5 = var.classe1
const vari5 = "a_mana2"
#
const nome6 = "Vigor iniciante"
const info6 = "Quantos pontos de vigor ganha no nível iniciante"
const tipo6 = "numero"
const clas6 = var.classe1
const vari6 = "a_move1"
#
const nome7 = "Vigor perito"
const info7 = "Quantos pontos de vigor ganha no nível perito"
const tipo7 = "numero"
const clas7 = var.classe1
const vari7 = "a_move2"
#
const nome8 = "Efeito 1"
const info8 = "Nome do efeito"
const tipo8 = "linha"
const clas8 = var.classe1
const vari8 = "a_efeito1"
#
const nome9 = "Precisão 1"
const info9 = "Probabilidade de criar o efeito, 100=não falha"
const tipo9 = "numero"
const clas9 = var.classe1
const vari9 = "a_prob1"
const extr9 = "0 100"
#
const nome10 = "Efeito 2"
const info10 = "Nome do efeito"
const tipo10 = "linha"
const clas10 = var.classe1
const vari10 = "a_efeito2"
#
const nome11 = "Precisão 2"
const info11 = "Probabilidade de criar o efeito, 100=não falha"
const tipo11 = "numero"
const clas11 = var.classe1
const vari11 = "a_prob2"
const extr11 = "0 100"
#
const nome12 = "Efeito 3"
const info12 = "Nome do efeito"
const tipo12 = "linha"
const clas12 = var.classe1
const vari12 = "a_efeito3"
#
const nome13 = "Precisão 3"
const info13 = "Probabilidade de criar o efeito, 100=não falha"
const tipo13 = "numero"
const clas13 = var.classe1
const vari13 = "a_prob3"
const extr13 = "0 100"
#
const nome14 = "Remover efeitos"
const info14 = "Efeitos que serão removidos; uma linha por efeito"
const tipo14 = "texto"
const clas14 = var.classe1
const vari14 = "a_remove"


classe menu_hab_msg
const titulo = "Mensagens"
const menufim = var.menufim
const colunas = 25
#
const nome1 = "Info"
const info1 = "Informações extras"
const tipo1 = "texto"
const clas1 = var.classe1
const vari1 = "msgextra"
#
const nome2 = "Início"
const info2 = "Ao usar a habilidade ou magia"
const tipo2 = "linha"
const clas2 = var.classe1
const vari2 = "msgini"
#
const nome3 = "Acertou"
const info3 = "Quando acertou o alvo"
const tipo3 = "linha"
const clas3 = var.classe1
const vari3 = "msgacertou2"
#
const nome4 = "Acertou em si"
const info4 = "Quando o alvo é o próprio personagem e acertou"
const tipo4 = "linha"
const clas4 = var.classe1
const vari4 = "msgacertou1"
#
const nome5 = "Errou"
const info5 = "Quando errou o alvo"
const tipo5 = "linha"
const clas5 = var.classe1
const vari5 = "msgerrou2"
#
const nome6 = "Errou em si"
const info6 = "Quando o alvo é o próprio personagem e errou"
const tipo6 = "linha"
const clas6 = var.classe1
const vari6 = "msgerrou1"
#
const nome7 = "Sem efeito"
const info7 = "Quando quando o golpe não teve efeito"
const tipo7 = "linha"
const clas7 = var.classe1
const vari7 = "msgnulo2"
#
const nome8 = "Sem efeito em si"
const info8 = "Quando quando o golpe não teve efeito no próprio personagem"
const tipo8 = "linha"
const clas8 = var.classe1
const vari8 = "msgnulo1"


classe menu_hab_comum
const nome3 = "Precisão"
const info3 = "Em porcentagem, maior que 100 nunca falha"
const tipo3 = "numero"
const clas3 = var.classe1
const vari3 = "precisao"
#
const nome4 = "Requer arma"
const info4 = "Deixar vazio se funciona independente da arma usada."
const tipo4 = "vetor"
const clas4 = var.classe1
const vari4 = "tipoarma"
const extr4 = config:arma_txt
#
const nome5 = "Consome"
const tipo5 = "menu--"
const clas5 = "menu_hab_custo"
#
const nome12 = "Preço da aula"
const info12 = "Quantas moedas os personagens cobram para ensinar"
const tipo12 = "numero"
const clas12 = var.classe1
const vari12 = "valor"
#
const nome13 = "Depende de"
const info13 = "Habilidades, magias e idiomas necessários para aprender esse ataque"
const tipo13 = "tipodep"
const clas13 = var.classe1
const vari13 = "depende"
#
const nome14 = "Iniciante nível"
const info14 = "A partir de que nível pode ter a primeira aula"
const tipo14 = "numero"
const clas14 = var.classe1
const vari14 = "aulaini"
#
const nome15 = "Perito nível"
const info15 = "A partir de que nível pode ter todas as aulas"
const tipo15 = "numero"
const clas15 = var.classe1
const vari15 = "aulafim"
#
const nome16 = "Somente tipos"
const info16 = "Se estiver vazio, todas as classes e raças podem aprender"
const tipo16 = "tipos"
const clas16 = var.classe1
const vari16 = "tipoperso"


classe menu_hab_ataque
herda menu_hab_comum
const titulo = "Hab " + txt(var.classe1, 4)
const colunas = 25
#
const nome1 = "Alvo"
const tipo1 = "opcao"
const clas1 = var.classe1
const vari1 = "tipoalvo"
const extr1 = "Qualquer um; ataque\n\
Exceto o personagem; ataque\n\
Todos dividindo o ataque\n\
Todos sem dividir o ataque\n\
Qualquer um; não é ataque\n\
O personagem; não é ataque\n\
Automático (sem intervenção do jogador)"
#
#
const nome2 = "Condição"
const tipo2 = "opcao"
const clas2 = var.classe1
const vari2 = "a_batalha"
const extr2 = "Nenhuma\nDurante a batalha\nFora da batalha"
#
const nome6 = "Afeta o alvo"
const tipo6 = "menu--"
const clas6 = "menu_hab_alvo"
#
const nome7 = "Ataque tipo"
const tipo7 = "opcao"
const clas7 = var.classe1
const vari7 = "tipoatk"
const extr7 = config:atknomes
#
const nome8 = "Ataque força"
const info8 = "Em porcentagem"
const tipo8 = "numero"
const clas8 = var.classe1
const vari8 = "ataque"
#
const nome9 = "Ataque velocidade"
const info9 = "Em porcentagem"
const tipo9 = "numero"
const clas9 = var.classe1
const vari9 = "vel"
#
const nome10 = "Ataque bônus"
const info10 = "Quais raças e classes atacam com mais força"
const tipo10 = "tipos"
const clas10 = var.classe1
const vari10 = "tipobonus"
#
const nome11 = "Mensagens"
const tipo11 = "menu--"
const clas11 = "menu_hab_msg"


classe menu_magia_ataque
herda menu_hab_ataque
const titulo = "Magia " + txt(var.classe1, 6)
const colunas = 23


classe comando_hab
herda comando_comum
const objcmd = arg0.persobat.var.[nomevar] ? este
const atkajuda = arg0.persobat.var.[nomevar] ? este
const posic = 7
const precisao = 100 # Precisão do golpe, maior que 100 nunca falha

func checahab # Checa se personagem pode usar habilidade/magia e avisa o personagem
# arg0 = personagem
# Retorna verdadeiro se pode usar
  se arg0.posicao < posic # Checa a posição necessária
    txt100 lin
    lin = txtcopiamai(arg0.nome, "A")
    casovar arg0.posicao
    casose "0"
      arg0.contr.msg(lin + " desmaiou.")
      ret
    casose "1"
    casose "2"
    casose "3"
      arg0.contr.msg(lin + " está frac" + (arg0.msexo ? "o" : "a") + " demais.")
      ret
    casose "4"
      arg0.contr.msg(lin + " está dormind" + (arg0.msexo ? "o" : "a") + ".")
      ret
    casose "5"
      arg0.contr.msg(lin + " está descansand" + (arg0.msexo ? "o" : "a") + ".")
      ret
    casose "6"
      arg0.contr.msg(lin + " está sentad" + (arg0.msexo ? "o" : "a") + ".")
      ret
    casose "7"
      arg0.contr.msg(lin + " está lutand" + (arg0.msexo ? "o" : "a") + ".")
      ret
    casofim
    arg0.contr.msg(lin + " não consegue fazer isso.")
    ret
  senao !tipoarma # Nenhum tipo de arma definido: aceita qualquer arma
  senao !arg0.iempu # Não está usando uma arma
    se !(tipoarma & 1)
      arg0.contr.msg("Não possui a arma necessária.")
      ret
    fimse
  senao arg0.iempu && tipoarma & 1 << arg0.iempu.obj.armatipo
  senao tipoarma == 1
    arg0.contr.msg("Empunhando uma arma?")
    ret
  senao
    arg0.contr.msg("Com essa arma?")
    ret
  fimse
  refvar x = (arg0.persobat.var.[nomevar] - 2) / 8
  se arg0.pvida <= x * (c_vida2 - c_vida1) + c_vida1
    arg0.contr.msg("Pontos de vida insuficientes")
    ret
  senao arg0.pmana < x * (c_mana2 - c_mana1) + c_mana1
    arg0.contr.msg("Mana insuficiente")
    ret
  senao arg0.pmove < x * (c_move2 - c_move1) + c_move1
    arg0.contr.msg("Vigor insuficiente")
    ret
  fimse
  ret 1

func custohab
# arg0 = personagem
  refvar x = (arg0.var.[nomevar] - 2) / 8
  arg0.pvida -= x * (c_vida2 - c_vida1) + c_vida1
  arg0.pmana -= x * (c_mana2 - c_mana1) + c_mana1
  arg0.pmove -= x * (c_move2 - c_move1) + c_move1
  arg0.contr.p_espera < c_espera && (arg0.contr.p_espera = c_espera)

func efeitohab # Efeito da habilidade sob o alvo
# arg0 lançou habilidade ou magia em arg1
# Altera mudavida conforme pontos de vida alterados
  a_efeito1 && rand(100) < a_prob1 && criar("e_" + a_efeito1, arg1, arg0.pnivel)
  a_efeito2 && rand(100) < a_prob2 && criar("e_" + a_efeito2, arg1, arg0.pnivel)
  a_efeito3 && rand(100) < a_prob3 && criar("e_" + a_efeito3, arg1, arg0.pnivel)
  se a_remove
    textotxt t
    epara t.addfim(a_remove), t.linhas, apagar(arg1.dentro2.objini("e_" + t.remove))
    efim
  fimse
  refvar x = (arg0.var.[nomevar] - 2) / 8
  real2 valor
  valor = x * (a_move2 - a_move1) + a_move1
  valor && (arg1.pmove += valor) > arg1.pmovemax && (arg1.pmove = arg1.pmovemax)
  valor = x * (a_mana2 - a_mana1) + a_mana1
  valor && (arg1.pmana += valor) > arg1.pmanamax && (arg1.pmana = arg1.pmanamax)
  ret !(valor = x * (a_vida2 - a_vida1) + a_vida1), nulo
  refvar vida = int(arg1.pvida)
  (arg1.pvida += valor) > arg1.pvidamax && (arg1.pvida = arg1.pvidamax)
  mudavida += arg1.pvida - vida
  !vida && arg1.pvida && arg1.dono.perso && arg1.dono.escolhebat


classe comando_ataque
herda comando_hab
const objcmd = 6 != tipoalvo && arg0.persobat.var.[nomevar] ? este
const cmdmenu = "ataque" # Editável via "menu_hab_ataque" e "menu_magia_ataque"
const nomevar = "" # Nome da variável que indica o quanto sabe do ataque
const tipoalvo = 0 # Alvo
const tipoatk = 0 # Tipo de golpe
const ataque = 50 # Força de ataque, 100 significa 100%
const vel = 50 # Velocidade do golpe, 100 significa 100%
const a_prob1 = 100
const a_prob2 = 100
const a_prob3 = 100
const msgacertou2 = "$P ataca $a"
const msgacertou1 = msgacertou2
const msgerrou2 = msgacertou2 + " mas erra"
const msgerrou1 = msgerrou2
const msgnulo2 = msgacertou2 + ", nada acontece"
const msgnulo1 = msgnulo2
const c_espera = 15 # Tempo de esperar após usar esse comando
int32 mudavida # Para calcular mudança nos pontos de vida do alvo
int8 result # Resultado da batalha:
# 0=acertou o alvo, 1=não teve efeito, 2=errou o alvo, 3=cancelar ataque
ref arma1 # Arma usada

func txtajuda # Retorna um texto que contém informações
  textotxt t
  se depende
    t.addfim(depende)
    textopos pos
    epara pos = t.ini, pos, pos.depois
      pos.mudar(misc:nomevar(pos.texto))
    efim
    t.addfim("Requer conhecimentos de: " + txttroca(t.remove(1000), "\n", ", "))
    t.juntar, t.dividelin(40, 75)
  fimse
  txt100 lin
  lin = "\c3" + misc:nomevar(nomevar)
  se tipoalvo < 4
    lin += "\b\nAtaque do nível " + int(aulafim)
    lin += ", " + txtsublin(config:atknomes, tipoatk, 1)
    lin += ", Força " + ataque + ", Velocidade " + vel
    lin += precisao <= 100 ? ", Precisao " + precisao : ", Não falha"
    t.addini(lin)
  senao
    lin += "\b\nNível " + int(aulafim)
    lin += precisao < 100 ? ", Acerta " + precisao + "%" : ", Não falha"
    t.addini(lin)
  fimse
  msgextra && t.addfim(msgextra)
  se c_vida1 || c_vida2
    refvar min = int(c_vida2)
    refvar max = int(c_vida1)
    se min != max
      t.addfim("Consome de " + min + " a " + max + " pontos de vida.")
    senao min == 1
      t.addfim("Consome 1 ponto de vida.")
    senao
      t.addfim("Consome " + min + " pontos de vida.")
    fimse
  fimse
  se c_mana1 || c_mana2
    refvar min = int(c_mana2)
    refvar max = int(c_mana1)
    se min != max
      t.addfim("Consome de " + min + " a " + max + " pontos de mana.")
    senao min == 1
      t.addfim("Consome 1 ponto de mana.")
    senao
      t.addfim("Consome " + min + " pontos de mana.")
    fimse
  fimse
  se c_move1 || c_move2
    refvar min = int(c_move2)
    refvar max = int(c_move1)
    se min != max
      t.addfim("Consome de " + min + " a " + max + " pontos de movimento.")
    senao min == 1
      t.addfim("Consome 1 ponto de movimento.")
    senao
      t.addfim("Consome " + min + " pontos de movimento.")
    fimse
  fimse
  se tipoperso
    t.addfim("Somente classes/raças: " + txttroca(tipoperso, "\n", ", "))
  fimse
  ret t.remove(1000)

func escr # Atacar alguém
  ref r
  se persobat.pvida == 0
    arg0.msg("Você está desmaiad" + (msexo ? "o." : "a."))
  senao !checahab(arg0.persobat)
    ret
  senao arg1 # Digitou o alvo
    listaitem i
    nomeobj nome
    nome.ini(arg1, 1)
    epara i = arg0.dono.dentro2.ini, i, i.depois
      sair i.obj.visivel(arg0) && nome.nome(i.obj.ident)
    efim
    r = i.obj
    ret !r, arg0.msg("Você não vê isso.")
  senao tipoalvo >= 4 # Hab não agressiva: o alvo é o próprio personagem
    r = arg0
  senao # Hab agressiva: o alvo é quem está batalhando
    r = arg0.atkenv.objlista
    se !r || r.dono != arg0.dono
      arg0.msg("Atacar quem?")
      ret
    fimse
  fimse
  se tipoalvo >= 4 # Se Não for agressivo...
    exechab(arg0.persobat, r.persobat)
  senao !arg0.dono.s_luta
    arg0.msg("Aqui é um lugar pacífico.")
  senao arg0.jog && r.jog && arg0 != r && arg0.dono.s_luta < 2
    arg0.msg(r.descnome + " é jogador e aqui não é uma arena.")
  senao !r.p_agressivo(arg0)
    arg0.msg(r.descnome + " não quer brigar.")
  senao
    exechab(arg0.persobat, r.persobat)

func exechab # Chamado quando personagem (arg0) usa hab/magia em alguém (arg1)
# Checa a condição de batalha
  se a_batalha == 1 && !arg0.contr.atkenv
    ret arg0.contr.msg("Você não está lutando com ninguém.")
  senao a_batalha == 2 && arg0.contr.atkenv
    ret arg0.contr.msg("Você está lutando pela sua vida.")
# Checa condição do alvo
  senao !a_cond
    ret !arg1.pvida, arg0.contr.msg("Alvo está desmaiado.")
  senao a_cond == 1
    ret arg1.pvida, arg0.contr.msg("Alvo não está desmaiado.")
  fimse
# Obtém a arma usada
  arma1 = nulo
  tipoarma && (arma1 = arg0.iempu.obj)
# Técnicas não agressivas
  listaobj l
  se tipoalvo >= 4
    se tipoalvo == 5 && arg0 != arg1
      refvar msg = txt(nomevar, 0, 1) == "m" ? "magia" : "habilidade"
      arg0.contr.msg("Essa " + msg + " não pode ser usada nos outros.")
      ret
    fimse
    ret cmd_alvo(arg0, arg1, este), nulo
    epara l.addfim(arg0.contr.evento, arg1.contr.evento), l, l.ini.remove
      ret l.objini.cmd_alvocontr(arg0, arg1, este), nulo
    efim
    epara l.addfim(arg0.evento, arg1.evento), l, l.ini.remove
      ret l.objini.cmd_alvo(arg0, arg1, este), nulo
    efim
    custohab(arg0)
    msgini && $mens.p(arg0, arg1) + $mens.mtodos1(msgini)
    se rand(100) >= precisao # Errou o alvo
      $mens.p(arg0, arg1)
      $mens.mtodos1(arg0.contr == arg1.contr ? msgerrou1 : msgerrou2)
      ret
    fimse
    mudavida = 0
    efeitohab(arg0, arg1)
    $mens.p(arg0, arg1)
    refvar lin = mudavida ? ", " + mudavida : ""
    $mens.mtodos1(arg0 == arg1 ? msgacertou1 + lin : msgacertou2 + lin)
    cmd_alvofim(arg0, arg1, este)
    epara l.addfim(arg0.evento, arg1.evento), l, l.ini.remove
      l.objini.cmd_alvofim(arg0, arg1, este)
    efim
    arg0.contr != arg1.contr && arg0.acertapos(1)
    arg1.acertapos(1)
    ret
  fimse
# Checa o alvo e dispara eventos
  ret tipoalvo == 1 && arg0 == arg1, arg0.contr.msg("Em você mesmo?")
  ret cmd_atacar(arg0, arg1, este), nulo
  epara l.addfim(arg0.contr.evento, arg1.contr.evento), l, l.ini.remove
    ret l.objini.cmd_atacarcontr(arg0, arg1, este), nulo
  efim
  epara l.addfim(arg0.evento, arg1.evento), l, l.ini.remove
    ret l.objini.cmd_atacar(arg0, arg1, este), nulo
  efim
# Custo da habilidade ou magia
  custohab(arg0)
  msgini && $mens.p(arg0, arg1) + $mens.mtodos1(msgini)
# Obtém a força do ataque e os alvos secundários
  real2 atk
  tipoalvo >= 2 && l.addfim(arg0.contr.dono.dentro2) + l.remove(arg0.contr, arg1.contr)
  atk = tipoalvo == 2 ? ataque / l.total : ataque
  se arma1
    real2 carga
    carga = (arg0.pesoden - arg0.pesovest + arma1.pesoobj * 4) / (arg0.pesomax + 1)
    se carga > 1.2 # Muito pesado
      atk /= carga < 1.4 ? 10 : 100
      arg0.contr.msg("É muito peso!")
    senao carga > 1 # Um pouco pesado
      atk *= 5 - 4 * carga # se carga=1,atk*=1  se carga=1.2,atk*=0.2
      arg0.contr.msg("Bastante peso!")
    fimse
  fimse
# Ataca o alvo escolhido
  ref r
  listaobj e
  velgolpe(arg0, arg1) # Tempo do golpe
  execgolpe(arg0, arg1, atk, 2 + arg0.var.[nomevar]) # Ataca
  se result != 3
    !result && efeitohab(arg0, arg1)
    $mens.p(arg0, arg1) + $mens.mtodos1(mensgolpe(arg0 == arg1))
    !result && (r = arg1.acertapos(1, arg0.contr))
    cmd_atacou(arg0, arg1, este)
    epara e.addfim(arg0.evento, arg1.evento), e, e.ini.remove
      e.objini.cmd_atacou(arg0, arg1, este)
    efim
  fimse
# Ataca os alvos secundários
  enquanto l
    r = l.objini, l.ini.remove
    continuar r.jog || r.perso < 2 # Não prossegue se for jogador
    velgolpe(arg0, r = r.contr) # Tempo do golpe; Faz também r = r.contr
    execgolpe(arg0, r, atk, 2 + arg0.var.[nomevar]) # Ataca
    continuar result == 3
    !result && efeitohab(arg0, r)
    $mens.p(arg0, r) + r.contr.msginv(mensgolpe)
    !result && r.acertapos(1)
    cmd_atacou(arg0, r, este)
    epara e.addfim(arg0.evento, r.evento), e, e.ini.remove
      e.objini.cmd_atacou(arg0, r, este)
    efim
  efim
  arg0.acertapos(1)

func velgolpe # Acerta o tempo de espera conforme o golpe
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# vel = velocidade do golpe
# Se velocidades dos personagens iguais e velocidade do golpe=100: tempo=30
  real2 tempo
  tempo = arg1.pveloc * 3000 / (arg0.pveloc * veloc + 1)
  tempo < 8 && (tempo = 8)
  tempo > 70 && (tempo = 70)
  arg0.contr.p_espera < tempo && (arg0.contr.p_espera = tempo)
  ret
# Outra fórmula:
  tempo = arg0.pveloc + arg1.pveloc # Tempo total
  tempo = tempo * 1500 / (arg0.pveloc * veloc + 1)
  tempo < 8 && (tempo = 8)
  tempo > 70 && (tempo = 70)
  arg0.contr.p_espera < tempo && (arg0.contr.p_espera = tempo)

func execgolpe # Realiza um ataque e coloca resultado em result e mudavida
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# arg2 = força do ataque, 0=não calcular danos
# arg3 = o quanto sabe do golpe, de 0 a 10
# tipoatk = tipo de ataque, arma1 = arma usada
  real2 dano
# Checa se pode realmente atacar
  result = 3, mudavida = 0
  listaobj l
  ret cmd_atkenv(arg0, arg1, este), nulo
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_atkenv(arg0, arg1, este), nulo
  efim
  epara l.addfim(arg1.evento), l, l.ini.remove
    ret l.objini.cmd_atkrec(arg0, arg1, este), nulo
  efim
# Indica que atacou, recebe experiência se vencer
  arg0.batalhaini(arg1)
  se arg0.podepegar && arg1.contr.var.o_agenda # Coloca na agenda
    refvar v1 = arg1.contr.var.a_[arg0.nome]
    !v1 && (v1 = 1)
  fimse
# Checa se acertou o alvo
  result = 2
  se precisao <= 100
    dano = rand(1, 20)
    se dano == 20 || arg1.posicao == 4 # Acertou automaticamente
    senao dano == 1 # Errou o alvo automaticamente
      ret
    senao # Checa se acertou
      dano += precisao * arg0.precisao * (arma1 ? arma1.armaprecisao : 100) / 10000
      dano -= arg1.evasao
      !arg1.visivel(arg0) && (dano -= 5) # Invisível é mais difícil de acertar
      ret dano <= 0, nulo
    fimse
  fimse
# Checa bônus ao combinar o tipo de ataque com o tipo de defesa
  dano = arg0.atktipo.[2 + tipoatk] * arg1.deftipo.[2 + tipoatk]
  se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
    dano *= arg0.atktipo.1 * arg1.deftipo.1
  senao
    dano *= arg0.atktipo.0 * arg1.deftipo.0
  fimse
  se dano == 0 # Imune
    result = 1
    ret
  fimse
  result = 0
  ret !arg2, nulo
# Checa bônus do personagem
  se !tipobonus
  senao arg0.tipo1 && txtproc("\n" + tipobonus + "\n", "\n" + arg0.tipo1 + "\n") >= 0
    dano *= 1.5
  senao arg0.tipo2 && txtproc("\n" + tipobonus + "\n", "\n" + arg0.tipo2 + "\n") >= 0
    dano *= 1.5
  senao arg0.tipo3 && txtproc("\n" + tipobonus + "\n", "\n" + arg0.tipo3 + "\n") >= 0
    dano *= 1.5
  fimse
# Calcula dano com arma
  se arma1
    dano *= rand(arma1.armamin, arma1.armamax)
    se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
      dano *= arg0.atkesp * arg2 * arg3 / (arg1.defesp * 3000)
    senao
      dano *= arg0.atknorm * arg2 * arg3 / (arg1.defnorm * 3000)
    fimse
# Calcula dano sem arma
  senao
    se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
      dano *= arg0.atkesp * arg0.atkesp * arg2 * arg3 / (arg1.defesp * rand(2700, 3300))
    senao
      dano *= arg0.atknorm * arg0.atknorm * arg2 * arg3 / (arg1.defnorm * rand(2700, 3300))
    fimse
    dano *= 1 + (arg0.pnivel - arg1.pnivel) / (arg0.pnivel + arg1.pnivel + 10)
  fimse
# Modificadores de posição
  casovar arg1.posicao
  casose "0" # Morto
  casose "1" # Mortalmente ferido
  casose "2" # Incapacitado
    dano *= 2.666
    sair
  casose "3" # Muito fraco
    dano *= 2.333
    sair
  casose "4" # dormindo
    dano *= 2
    sair
  casose "5" # descansando
    dano *= 1.666
    sair
  casose "6" # sentado
    dano *= 1.333
    sair
  casofim
# Atualiza pontos de vida conforme os danos (pelo menos 1 de dano)
  mudavida = dano < 1 ? -1 : -dano
  arg1.pvida += mudavida

func mensgolpe # Retorna mensagem do golpe de acordo com result e mudavida
# Se arg0 for verdadeiro, está atacando o próprio personagem
  casovar result
  casose "0" # Acertou o alvo
    ret arg0 ? msgacertou2 + ", " + mudavida : msgacertou1 + ", " + mudavida
  casose "1" # O golpe não teve efeito
    ret arg0 ? msgnulo1 : msgnulo2
  casose "2" # Errou o alvo
    ret arg0 ? msgerrou1 : msgerrou2
  casofim


classe comando_atkauto
herda comando_ataque
# Para realizar ataques automáticos
const objcmd = nulo
const objajuda = nulo
txt100 msgacertou2
txt100 msgerrou2
txt100 msgnulo2
const ataque = config:atkfor
const vel = 50
const extra = "Ataque automático"
uint8 tipoatk # Tipo de ataque

func exechab # arg0 ataca arg1
  refvar p = arg0.persobat # Quem está atacando
  refvar a = arg1.persobat # Quem vai receber o ataque
  uint8 aulas # O quanto sabe do golpe, de 0 a 10
  ret p.posicao <= 4, nulo # Não ataca dormindo
  arma1 = ref(p.iempu.obj)
  arma1.armamanual && (arma1 = nulo)
  tipoatk = arma1.armatipoatk
  aulas = 2 + p.var.[txtsublin(config:arma_txt, arma1.armatipo, 1)]
# Acerta mensagens
  msgacertou2 = txtsublin(config:arma_acertou, arma1.armatipo, 1)
  msgerrou2 = txtsublin(config:arma_errou, arma1.armatipo, 1)
  msgnulo2 = txtsublin(config:arma_nulo, arma1.armatipo, 1)
  !msgacertou2 && (msgacertou2 = "$P dá um golpe em $a")
  !msgerrou2 && (msgerrou2 = "$P tenta dar um golpe em $a mas erra")
  !msgnulo2 && (msgnulo2 = "$P dá um golpe em $a mas nada acontece")
# Checa se pode atacar
  listaobj l
  ret cmd_atacar(p, a, este), nulo
  epara l.addfim(arg0.evento, arg1.evento), l, l.ini.remove
    ret l.objini.cmd_atacarcontr(p, a, este), nulo
  efim
  epara l.addfim(p.evento, a.evento), l, l.ini.remove
    ret l.objini.cmd_atacar(p, a, este), nulo
  efim
# Primeiro ataque
  execgolpe(p, a, ataque, aulas) # Ataca
  se result != 3
    $mens.p(p, a) + $mens.mtodos1(mensgolpe)
    epara l.addfim(p.evento, a.evento), l, l.ini.remove
      l.objini.cmd_atacou(p, a, este)
    efim
  fimse
  a.acertapos(1, arg0), p.acertapos(1, arg1)
# Segundo ataque
  ret !arg0.atkenv || !arg0.persobat.var.h_segundo_ataque, nulo
  execgolpe(p, a, ataque, aulas * (2 + p.var.h_segundo_ataque) / 10)
  se result != 3
    $mens.p(p, a) + $mens.mtodos1(mensgolpe)
    epara l.addfim(p.evento, a.evento), l, l.ini.remove
      l.objini.cmd_atacou(p, a, este)
    efim
  fimse
  a.acertapos(1, arg0), p.acertapos(1, arg1)
# Terceiro ataque
  ret !arg0.atkenv || !arg0.persobat.var.h_terceiro_ataque, nulo
  execgolpe(p, a, ataque, aulas * (2 + p.var.h_terceiro_ataque) / 10)
  se result != 3
    $mens.p(p, a) + $mens.mtodos1(mensgolpe)
    epara l.addfim(p.evento, a.evento), l, l.ini.remove
      l.objini.cmd_atacou(p, a, este)
    efim
  fimse
  a.acertapos(1, arg0), p.acertapos(1, arg1)


classe cmd_resgatar
herda comando_comum, comando_ajuda
const posic = 5
const txtajuda = "\b\c3Resgatar\b\n\
Sintaxe: RESGATAR <personagem>\n\
Resgata um jogador em uma batalha. É como se você se colocasse entre\n\
o jogador e quem está atacando ele."

func escr
  ret arg0.dono.s_naoresg, arg0.msg("Aqui não é possível resgatar.")
  ret !arg1, arg0.msg("Resgatar quem?")
  nomeobj n
  listaitem i
  n.ini(arg1, 1)
  epara i = arg0.dono.dentro2.ini, i, i.depois
    continuar !i.obj.visivel(arg0) || !n.nome(i.obj.ident)
    ref r
    r = i.obj
# Checa se é possível resgatar
    ret arg0 == r, arg0.msg("Resgatar você mesmo?")
    ret !r.jog, arg0.msg(i.obj.descnome + " não é jogador.")
    ret !r.atkrec.objini, arg0.msg(i.obj.descnome + " não está lutando.")
    ret r.atkenv.objlista == arg0, arg0.msg(i.obj.descnome + " está lutando com você.")
# Checa se personagens permitem resgate
    epara i = r.atkrec.ini, i, i.depois
      continuar !i.obj.p_naoresg
      arg0.msg("Não é possível resgatar " + r.descnome + " de " + i.obj.descnome + ".")
      ret
    efim
# Eventos
    listaobj l
    epara l.addfim(arg0.evento, r.evento), l, l.ini.remove
      ret l.objini.cmd_resgatar(arg0, r), nulo
    efim
# Resgata
    enquanto r.atkrec.objini
      r.atkrec.objini.batalhaini(arg0)
    efim
    $mens.p(arg0, r)
    $mens.mvis1("$P resgata $a.")
    ret
  efim
  arg0.msg("Você não vê " + arg1 + ".")


classe cmd_matar
herda comando_ataque
const objcmd = config:atktipo ? este
const objajuda = config:atktipo ? este
const txtajuda = "\b\c3Matar\b\n\
Sintaxe: MATAR <personagem>\n\
Começa uma batalha com um personagem."
const cmdmenu = ""

func exechab # Chamado quando personagem (arg0) quer atacar alguém (arg1)
  ret arg0.atkenv, msg("Você já está lutando.")
  int8 x
  x = arg1.atktempo
# Realiza um ataque, retorna se não atacou
  $comando_atkauto.exechab(arg0, arg1)
  ret !arg0.atkenv, nulo
  arg0.atktempo = config:atktempo
  arg0.p_espera < config:atktempo && (arg0.p_espera = config:atktempo)
# Faz o adversário atacar
  ret x, nulo
  arg1.atktempo = 1
  arg1.p_espera < config:atktempo && (arg1.p_espera = config:atktempo)
