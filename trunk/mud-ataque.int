classe comando_hab
herda comando_comum
const objcmd = arg0.persobat.var.[nomevar] ? este
const atkajuda = arg0.persobat.var.[nomevar] ? este
const posic = 7
const precisao = 100 # Precisão do golpe, maior que 100 nunca falha
const tipoalvo = 6

func checahab1 # Checa se personagem pode usar habilidade/magia e avisa o personagem
# arg0 = personagem
# arg1 = item usado, ou nulo se não usou nenhum item
  ret checahab2(arg0, (arg0.var.[nomevar] - 1) / 7, arg1)

func checahab2 # Checa se personagem pode usar habilidade/magia e avisa o personagem
# arg0 = personagem
# arg1 = quanto sabe da habilidade ou magia (0=iniciante até 1=perito)
# arg2 = item usado, ou nulo se não usou nenhum item
# Retorna verdadeiro se pode usar
  se !arg0.pvida
    refvar lin = arg0 == arg0.contr ? "Você" : txtcopiamai(arg0.nome, "A")
    arg0.contr.msg(lin + " está desmaiad" + (arg0.msexo ? "o." : "a."))
    ret
  senao arg2.item # Usou algum objeto: não checa a posição e a arma usada
  senao arg0.posicao < posic # Checa a posição necessária
    refvar lin = arg0 == arg0.contr ? "Você" : txtcopiamai(arg0.nome, "A")
    casovar arg0.posicao
    casose "0"
      arg0.contr.msg(lin + " desmaiou.")
      ret
    casose "1"
    casose "2"
    casose "3"
      arg0.contr.msg(lin + " está frac" + (arg0.msexo ? "o" : "a") + " demais.")
      ret
    casose "4"
      arg0.contr.msg(lin + " está dormind" + (arg0.msexo ? "o" : "a") + ".")
      ret
    casose "5"
      arg0.contr.msg(lin + " está descansand" + (arg0.msexo ? "o" : "a") + ".")
      ret
    casose "6"
      arg0.contr.msg(lin + " está sentad" + (arg0.msexo ? "o" : "a") + ".")
      ret
    casose "7"
      arg0.contr.msg(lin + " está lutand" + (arg0.msexo ? "o" : "a") + ".")
      ret
    casofim
    arg0.contr.msg(lin + " não consegue fazer isso.")
    ret
  senao !tipoarma # Nenhum tipo de arma definido: aceita qualquer arma
  senao !arg0.iempu # Não está usando uma arma
    se !(tipoarma & 1)
      arg0.contr.msg("Não possui a arma necessária.")
      ret
    fimse
  senao arg0.iempu && tipoarma & intbit(arg0.iempu.obj.armatipo)
  senao tipoarma == 1
    arg0.contr.msg("Empunhando uma arma?")
    ret
  senao
    arg0.contr.msg("Com essa arma?")
    ret
  fimse
  se arg0.dono.s_semmagia && txt(nomevar, 0, 1) == "m"
    arg0.msg("A magia não teve efeito.")
    ret
  senao arg2.item # Usou algum objeto: não tem custo
  senao arg0.pvida <= arg1 * (c_vida2 - c_vida1) + c_vida1
    arg0.contr.msg("Pontos de vida insuficientes.")
    ret
  senao arg0.pmana < arg1 * (c_mana2 - c_mana1) + c_mana1
    arg0.contr.msg("Mana insuficiente.")
    ret
  senao arg0.pmove < arg1 * (c_move2 - c_move1) + c_move1
    arg0.contr.msg("Vigor insuficiente.")
    ret
  fimse
  ret 1

func autohab1 # Checa se personagem pode usar habilidade/magia em ataque automático
# arg0 = personagem
  ret autohab2(arg0, (arg0.var.[nomevar] - 1) / 7)

func autohab2 # Checa se personagem pode usar habilidade/magia em ataque automático
# arg0 = personagem
# arg1 = quanto sabe da habilidade ou magia (0=iniciante até 1=perito)
# Retorna verdadeiro se pode usar
  ret !arg0.pvida || arg0.posicao < posic, nulo
  ret arg0.dono.s_semmagia && txt(nomevar, 0, 1) == "m", nulo
  ret arg0.pvida <= arg1 * (c_vida2 - c_vida1) + c_vida1, nulo
  ret arg0.pmana < arg1 * (c_mana2 - c_mana1) + c_mana1, nulo
  ret arg0.pmove < arg1 * (c_move2 - c_move1) + c_move1, nulo
  ret !arg0.contr.dono.s_luta && tipoalvo != 6 && tipoalvo != 7, nulo
  ret 1

func costohab1 # Aplica os custos da habilidade/magia
# arg0 = personagem
  ret custohab2(arg0, (arg0.var.[nomevar] - 1) / 7)

func custohab2 # Aplica os custos da habilidade/magia
# arg0 = personagem
# arg1 = quanto sabe da habilidade ou magia (0=iniciante até 1=perito)
  arg0.pvida -= arg1 * (c_vida2 - c_vida1) + c_vida1
  arg0.pmana -= arg1 * (c_mana2 - c_mana1) + c_mana1
  arg0.pmove -= arg1 * (c_move2 - c_move1) + c_move1
  arg0.contr.p_espera < c_espera && (arg0.contr.p_espera = c_espera)


classe comando_ataque
herda comando_hab
const objcmd = tipoalvo < 8 && arg0.persobat.var.[nomevar] ? este
const cmdmenu = "ataque" # Editável via "menu_hab_ataque" e "menu_magia_ataque"
const nomevar = "" # Nome da variável que indica o quanto sabe do ataque
const tipoalvo = 0 # Alvo
const tipoatk = 0 # Tipo de golpe
const ataque = 50 # Força de ataque, 100 significa 100%
const vel = 50 # Velocidade do golpe, 100 significa 100%
const a_prob1 = 100
const a_prob2 = 100
const a_prob3 = 100
const c_espera = 15 # Tempo de esperar após usar esse comando
ref log # Para onde enviar mensagens de log
int32 mudavida # Para calcular mudança nos pontos de vida do alvo
int8 result # Resultado da batalha:
# 0=acertou o alvo, 1=não teve efeito, 2=errou o alvo, 3=cancelar ataque
ref arma1 # Arma usada
#
# Ordem que deve organizar as constantes:
const admordem = "nomevar\n\
tipoalvo\n\
a_batalha\n\
a_cond\n\
a_efeito1 a_efeito2 a_efeito3\n\
a_prob1 a_prob2 a_prob3\n\
a_mana1 a_mana2\n\
a_move1 a_move2\n\
a_remove\n\
a_vida1 a_vida2\n\
c_espera\n\
c_vida1 c_vida2\n\
c_mana1 c_mana2\n\
c_move1 c_move2\n\
ataque\n\
aulaini aulafim\n\
depende\n\
precisao\n\
tipoarma\n\
tipoatk\n\
tipobonus\n\
tipoperso\n\
valor\n\
vel\n\
msgextra msgatk0 msgatk1 msgatk2 msgatk3 msgatk4"

func txtajuda # Retorna um texto que contém informações
  textotxt t
  se depende
    t.addfim(depende)
    textopos pos
    epara pos = t.ini, pos, pos.depois
      pos.mudar(misc:nomevar(pos.texto))
    efim
    t.addfim("Requer conhecimentos de: " + txttroca(t.remove(1000), "\n", ", "))
    t.juntar, t.dividelin(40, 75)
  fimse
  txt100 lin
  lin = "\c3" + misc:nomevar(nomevar)
  se tipoalvo < 6
    lin += "\b\nAtaque do nível " + int(aulafim)
    lin += ", " + txtsublin(config:atknomes, tipoatk, 1)
    lin += ", Força " + ataque + ", Velocidade " + vel
    lin += precisao <= 100 ? ", Precisao " + precisao : ", Não falha"
    t.addini(lin)
  senao
    lin += "\b\nNível " + int(aulafim)
    lin += precisao < 100 ? ", Acerta " + precisao + "%" : ", Não falha"
    t.addini(lin)
  fimse
  msgextra && t.addfim(msgextra)
  se c_vida1 || c_vida2
    refvar min = int(c_vida2)
    refvar max = int(c_vida1)
    se min != max
      t.addfim("Consome de " + min + " a " + max + " pontos de vida.")
    senao min == 1
      t.addfim("Consome 1 ponto de vida.")
    senao
      t.addfim("Consome " + min + " pontos de vida.")
    fimse
  fimse
  se c_mana1 || c_mana2
    refvar min = int(c_mana2)
    refvar max = int(c_mana1)
    se min != max
      t.addfim("Consome de " + min + " a " + max + " pontos de mana.")
    senao min == 1
      t.addfim("Consome 1 ponto de mana.")
    senao
      t.addfim("Consome " + min + " pontos de mana.")
    fimse
  fimse
  se c_move1 || c_move2
    refvar min = int(c_move2)
    refvar max = int(c_move1)
    se min != max
      t.addfim("Consome de " + min + " a " + max + " pontos de movimento.")
    senao min == 1
      t.addfim("Consome 1 ponto de movimento.")
    senao
      t.addfim("Consome " + min + " pontos de movimento.")
    fimse
  fimse
  se tipoperso
    t.addfim("Somente classes/raças: " + txttroca(tipoperso, "\n", ", "))
  fimse
  ret t.remove(1000)

func escr # Atacar alguém
# arg0 = personagem
# arg1 = o que o personagem digitou; usado para obter o personagem alvo
# arg2 = item usado, ou nulo se não usou nenhum item
# arg3 = nível da magia, se usou algum item
  ref r
  se arg1 # Digitou o alvo
    listaitem i
    nomeobj nome
    nome.ini(arg1, 1)
    epara i = arg0.dono.dentro2.ini, i, i.depois
      sair i.obj.visivel(arg0) && nome.nome(i.obj.ident)
    efim
    r = i.obj
    ret !r, arg0.msg("Você não vê isso.")
  senao tipoalvo >= 6 # Hab não agressiva: o alvo é o próprio personagem
    r = arg0
  senao arg2.f_tipo == 4 # Hab agressiva usando pergaminho
    r = arg0.atkenv.objlista
    (!r || r.dono != arg0.dono) && (r = arg0)
  senao arg2.item # Hab agressiva usando outro item
    r = arg0
  senao # Hab agressiva sem usar um item: o alvo é quem está batalhando
    r = arg0.atkenv.objlista
    ret !r || r.dono != arg0.dono, arg0.msg("Atacar quem?")
  fimse
  refvar p = arg0.persobat
  se arg2
    exechab(p, r.persobat, 0.5, arg3, arg2)
  senao
    exechab(p, r.persobat, intpos(p.var.[nomevar] - 1) / 7, p.pnivel)

func exechab # Chamado quando personagem usa habilidade ou magia
# arg0 = quem está usando a habilidade ou magia
# arg1 = personagem alvo
# arg2 = quanto sabe da habilidade ou magia (0=iniciante até 1=perito)
# arg3 = nível da habilidade ou magia (=nível do personagem)
# arg4 = item usado, ou nulo se não usou nenhum item
  ret !checahab2(arg0, arg2, arg4), nulo
# Checa a condição de batalha
  se a_batalha == 1 && !arg0.contr.atkenv
    ret arg0.contr.msg("Você não está lutando com ninguém.")
  senao a_batalha == 2 && arg0.contr.atkenv
    ret arg0.contr.msg("Você está lutando pela sua vida.")
# Checa condição do alvo
  senao !a_cond
    ret !arg1.pvida, arg0.contr.msg("Alvo está desmaiado.")
  senao a_cond == 1
    ret arg1.pvida, arg0.contr.msg("Alvo não está desmaiado.")
  senao dono.s_semmagia && txt(nomevar, 0, 1) == "m"
    ret msg("A magia não teve efeito.")
  fimse
# Obtém a arma usada
  arma1 = nulo
  tipoarma && (arma1 = arg0.iempu.obj)
# Técnicas não agressivas
  listaobj l
  casovar tipoalvo
  casose "7"
    se arg0 != arg1
      refvar msg = txt(nomevar, 0, 1) == "m" ? "magia" : "habilidade"
      arg0.contr.msg("Essa " + msg + " não pode ser usada nos outros.")
      ret
    fimse
  casose "6"
    ret cmd_alvo(arg0, arg1, este), nulo
    epara l.addfim(arg0.contr.evento, arg1.contr.evento), l, l.ini.remove
      ret l.objini.cmd_alvocontr(arg0, arg1, este), nulo
    efim
    epara l.addfim(arg0.evento, arg1.evento), l, l.ini.remove
      ret l.objini.cmd_alvo(arg0, arg1, este), nulo
    efim
    se !arg4.item
      custohab2(arg0, arg2)
      mensinicio(arg0, arg1)
    fimse
    mudavida = 0
    se arg0.contr.dono.s_semmagia && txt(nomevar, 0, 1) == "m"
      result = 1 # Sem efeito
    senao rand(100) >= precisao
      result = 2 # Errou o alvo
    senao
      result = 0 # Acertou o alvo
      efeitohab(arg0, arg1, arg2, arg3)
    fimse
    mensgolpe(arg0, arg1)
    cmd_alvofim(arg0, arg1, este)
    epara l.addfim(arg0.evento, arg1.evento), l, l.ini.remove
      l.objini.cmd_alvofim(arg0, arg1, este)
    efim
    result == 10 ? arg1.morreu(arg0) : arg1.acertapos(1)
    arg0 != arg1 && arg0.acertapos(1)
    ret
  casose "1" # Ataque que não pode ser ao próprio personagem
  casose "3"
  casose "5"
    sair arg0 != arg1
    ret arg0.contr.msg("Em você mesm" + (arg0.msexo ? "o?" : "a?"))
  casofim
# Checa o alvo e dispara eventos
  se !arg0.contr.dono.s_luta
    ret arg0.contr.msg(arg4.item ? "A magia falhou." : "Aqui é um lugar pacífico.")
  senao !arg1.contr.p_agressivo(arg0)
    ret arg0.contr.msg(arg1.contr.descnome + " não quer brigar.")
  fimse
  ret cmd_atacar(arg0, arg1, este), nulo
  epara l.addfim(arg0.contr.evento, arg1.contr.evento), l, l.ini.remove
    ret l.objini.cmd_atacarcontr(arg0, arg1, este), nulo
  efim
  epara l.addfim(arg0.evento, arg1.evento), l, l.ini.remove
    ret l.objini.cmd_atacar(arg0, arg1, este), nulo
  efim
# Custo da hab/magia e checa se é permitido usar ataques
  se !arg4.item
    custohab2(arg0, arg2)
    mensinicio(arg0, arg1)
  fimse
  se arg0.contr.dono.s_luta == 1 && arg0.contr.jog && arg1.contr.jog && arg0 != arg1
    result = 1
    mensgolpe(arg0, arg1)
    ret arg0.acertapos(1)
  senao arg0.contr.dono.s_semmagia && txt(nomevar, 0, 1) == "m"
    result = 1
    mensgolpe(arg0, arg1)
    ret arg0.acertapos(1)
  fimse
# Força do ataque e alvos secundários
  real2 atk
  casovar tipoalvo
  casose # Casos 0 e 1: Ataca um personagem
    atk = ataque * (arg2 + 0.5)
    sair
  casose "2" # Todos dividindo o ataque
  casose "3"
    l.addfim(arg0.contr.dono.dentro2)
    l.remove(arg0.contr, arg1.contr)
    atk = ataque / (l.total + 1) * (arg2 + 0.5)
    sair
  casose "4" # Todos sem dividir o ataque
  casose "5"
    l.addfim(arg0.contr.dono.dentro2)
    l.remove(arg0.contr, arg1.contr)
    atk = ataque * (arg2 + 0.5)
    sair
  casose "8" # Ataque automático
    atk = ataque * (arg2 + 0.5) * config:atkfor / 100
    sair
  casofim
# Mensagens de log
  se arg0.contr.atklog || arg1.contr.atklog
    log = criar("comando_ataque_log")
    arg0.contr.atklog && (log.perso1 = arg0.contr) + (arg0.contr.atklog = 0)
    arg1.contr.atklog && (log.perso2 = arg1.contr) + (arg1.contr.atklog = 0)
    refvar m1 = arma1 ? " usando " + arma1.nome : " sem arma"
    log.m("Atklog: " + arg0.nome + " ataca " + arg1.nome + m1)
    log.m(">Força de " + nomevar + ": " + ataque)
    log.atk = ataque
    log.mul(">Conhecimento de 0.5 a 1.5", ataque * (arg2 + 0.5))
    (tipoalvo == 2 || tipoalvo == 3) && log.div(">Divide o ataque", atk)
    tipoalvo == 8 && log.mul(">Força do ataque automático", atk)
  fimse
# Checa a arma usada
  se arma1
    real2 carga
    carga = (arg0.pesoden - arg0.pesovest + arma1.pesoobj * 4) / (arg0.pesomax + 1)
    se carga > 1.2 # Muito pesado
      atk /= carga < 1.4 ? 10 : 100
      arg0.contr.msg("É muito peso!")
      log.mul(">Arma pesada demais", atk)
    senao carga > 1 # Um pouco pesado
      atk *= 5 - 4 * carga # se carga=1,atk*=1  se carga=1.2,atk*=0.2
      arg0.contr.msg("Bastante peso!")
      log.mul(">Arma um pouco pesada", atk)
    fimse
  fimse
# Checa sede e fome
  atk /= (2 + $miscfome.f.[arg0.p_sede] + $miscfome.f.[arg0.p_fome]) / 2
  log.div(">Fome e sede", atk)
# Ataca o alvo escolhido
  ref r
  listaobj e
  tipoalvo != 8 && velgolpe(arg0, arg1) # Tempo do golpe
  execgolpe(arg0, arg1, atk) # Ataca
  se result != 3
    !result && efeitohab(arg0, arg1, arg2, arg3) # Acertou: aplica os efeitos
    mensgolpe(arg0, arg1)
    cmd_atacou(arg0, arg1, este)
    epara e.addfim(arg0.evento, arg1.evento), e, e.ini.remove
      e.objini.cmd_atacou(arg0, arg1, este)
    efim
    result == 10 ? arg1.morreu(arg0) : arg1.acertapos(1)
  fimse
# Ataca os alvos secundários
  log = nulo # Porque os alvos secundários não entram no log
  enquanto l
    r = l.objini, l.ini.remove
    continuar r.jog || r.perso < 2 # Não prossegue se for jogador
    r = r.persobat
    tipoalvo != 8 && velgolpe(arg0, r) # Tempo do golpe
    execgolpe(arg0, r, atk) # Ataca
    continuar result == 3
    !result && efeitohab(arg0, r, arg2, arg3) # Acertou: aplica os efeitos
    mensgolpe2(arg0, r)
    cmd_atacou(arg0, r, este)
    epara e.addfim(arg0.evento, r.evento), e, e.ini.remove
      e.objini.cmd_atacou(arg0, r, este)
    efim
    result == 10 ? r.morreu(arg0) : r.acertapos(1)
  efim
  arg0.acertapos(1)

func efeitohab # Efeito da habilidade ou magia sobre o alvo
# arg0 = quem lançou a habilidade ou magia
# arg1 = personagem alvo
# arg2 = quanto sabe da habilidade ou magia (0=iniciante até 1=perito)
# arg3 = nível da habilidade ou magia (=nível do personagem)
# Nota: Altera mudavida conforme pontos de vida alterados
  a_efeito1 && criar("e_" + a_efeito1, arg1, rand(100) < a_prob1 ? arg3 : -1)
  a_efeito2 && criar("e_" + a_efeito2, arg1, rand(100) < a_prob2 ? arg3 : -1)
  a_efeito3 && criar("e_" + a_efeito3, arg1, rand(100) < a_prob3 ? arg3 : -1)
  se a_remove
    textotxt t
    epara t.addfim(a_remove), t.linhas, apagar(arg1.dentro2.objini("e_" + t.remove))
    efim
  fimse
  real2 valor
  valor = (a_move1 + a_move2 * arg3) * (0.5 + arg2)
  valor && (arg1.pmove = intmin(arg1.pmove + valor, arg1.pmovemax))
  valor = (a_mana1 + a_mana2 * arg3) * (0.5 + arg2)
  valor && (arg1.pmana = intmin(arg1.pmana + valor, arg1.pmanamax))
  ret !(valor = (a_vida1 + a_vida2 * arg3) * (0.5 + arg2)), nulo
  refvar vida = int(arg1.pvida)
  arg1.pvida = intmin(vida + valor, arg1.pvidamax)
  mudavida += arg1.pvida - vida
  !vida && arg1.pvida && arg1.dono.perso && arg1.dono.escolhebat

func velgolpe # Acerta o tempo de espera conforme o golpe
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# vel = velocidade do golpe
# Se velocidades dos personagens iguais e velocidade do golpe=100: tempo=30
  real2 tempo
  tempo = arg1.pveloc * 3000 * 70 / (arg0.pveloc * vel + 1)
  tempo = intmax(8, intmin(70, tempo))
  arg0.contr.p_espera < tempo && (arg0.contr.p_espera = tempo)
  ret
# Outra fórmula:
  tempo = arg0.pveloc + arg1.pveloc # Tempo total
  tempo = tempo * 1500 / (arg0.pveloc * veloc + 1)
  tempo = intmax(8, intmin(70, tempo))
  arg0.contr.p_espera < tempo && (arg0.contr.p_espera = tempo)

func execgolpe # Realiza um ataque e coloca resultado em result e mudavida
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# arg2 = força do ataque (inclui quanto sabe do golpe), 0=não calcular danos
# tipoatk = tipo de ataque, arma1 = arma usada
  real2 dano
# Checa se pode realmente atacar
  result = 3, mudavida = 0
  listaobj l
  ret cmd_atkenv(arg0, arg1, este), nulo
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_atkenv(arg0, arg1, este), nulo
  efim
  epara l.addfim(arg1.evento), l, l.ini.remove
    ret l.objini.cmd_atkrec(arg0, arg1, este), nulo
  efim
# Indica que atacou, recebe experiência se vencer
  arg0.batalhaini(arg1)
  se arg0.podepegar && arg1.contr.var.o_agenda # Coloca na agenda
    refvar v1 = arg1.contr.var.a_[arg0.nome]
    !v1 && (v1 = 1)
  fimse
# Checa se acertou o alvo
  result = 2
  se precisao <= 100
    dano = rand(1, 20)
    se dano == 20 || arg1.posicao == 4 # Acertou automaticamente
    senao dano == 1 # Errou o alvo automaticamente
      log.m(">Dado de 20 faces = 1: errou automaticamente")
      ret
    senao arg0.jog && rand($miscfome.bebeatk, $miscfome.cheio) < arg0.p_bebida
      log.m(">Errou por estar embriagado")
      ret # Quem ataca errou o golpe devido à embriaguês
    senao arg1.jog && rand($miscfome.bebeatk, $miscfome.cheio) < arg1.p_bebida # Embriagado
      log.m(">Acertou porque o alvo está embriagado")
    senao # Checa se acertou
      dano += precisao * arg0.precisao * (arma1 ? arma1.armaprecisao : 100) / 10000
      dano -= arg1.evasao
      !arg1.visivel(arg0) && (dano -= 5) # Invisível é mais difícil de acertar
      ret dano <= 0, nulo
    fimse
  fimse
# Checa bônus ao combinar o tipo de ataque com o tipo de defesa
  se log
    log.atk = arg2
    dano = arg0.atktipo.[2 + tipoatk] * arg1.deftipo.[2 + tipoatk]
    log.mul(">Elemento " + txtsublin(config:atknomes, tipoatk, 1), dano * arg2)
    se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
      dano *= arg0.atktipo.1 * arg1.deftipo.1
      log.mul(">Elemento especial", dano * arg2)
    senao
      dano *= arg0.atktipo.0 * arg1.deftipo.0
      log.mul(">Elemento normal", dano * arg2)
    fimse
    se !dano
      log.m(">Alvo é imune")
    senao !arg2
      log.m(">Ataque tem força 0 (não causa danos)")
    fimse
  senao
    dano = arg0.atktipo.[2 + tipoatk] * arg1.deftipo.[2 + tipoatk]
    se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
      dano *= arg0.atktipo.1 * arg1.deftipo.1
    senao
      dano *= arg0.atktipo.0 * arg1.deftipo.0
    fimse
  fimse
  se !dano # Imune (dano == 0)
    result = 1
    ret
  senao !arg2 # Ataque tem força 0 (arg2 == 0)
    result = 0
    ret
  fimse
  result = 0, dano *= arg2
# Checa bônus do personagem
  se tipobonus
    refvar tbonus = "\n" + txte(tipobonus) + "\n"
    se arg0.tipo1 && txtproc(tbonus, "\n" + arg0.tipo1 + "\n") >= 0
      dano *= 1.5, log.mul(">Bônus do personagem", dano)
    senao arg0.tipo2 && txtproc(tbonus, "\n" + arg0.tipo2 + "\n") >= 0
      dano *= 1.5, log.mul(">Bônus do personagem", dano)
    senao arg0.tipo3 && txtproc(tbonus, "\n" + arg0.tipo3 + "\n") >= 0
      dano *= 1.5, log.mul(">Bônus do personagem", dano)
    fimse
  fimse
# Log + Calcula dano com arma
  se log
    se arma1
      se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
        dano *= arg0.atkesp + rand(arma1.armamin, arma1.armamax)
        log.mul(">Ataque especial + ataque da arma", dano)
        dano *= arg0.atkesp, log.mul(">Ataque especial", dano)
        dano /= arg1.defesp, log.div(">Defesa especial", dano)
      senao
        dano *= arg0.atknorm + rand(arma1.armamin, arma1.armamax)
        log.mul(">Ataque normal + ataque da arma", dano)
        dano *= arg0.atknorm, log.mul(">Ataque normal", dano)
        dano /= arg1.defnorm, log.div(">Defesa normal", dano)
      fimse
      dano /= 300, log.msg(">Divide por 300: " + dano)
# Log + Calcula dano sem arma
    senao
      se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
        dano *= arg0.atkesp, log.mul(">Ataque especial", dano)
        dano *= arg0.atkesp, log.mul(">Ataque especial", dano)
        dano /= arg1.defesp, log.div(">Defesa especial", dano)
      senao
        dano *= arg0.atknorm, log.mul(">Ataque normal", dano)
        dano *= arg0.atknorm, log.mul(">Ataque normal", dano)
        dano /= arg1.defnorm, log.div(">Defesa normal", dano)
      fimse
      dano /= rand(270, 330), log.div(">Divide por ~300", dano)
      dano *= 1 + (arg0.pnivel - arg1.pnivel) / (arg0.pnivel + arg1.pnivel + 10)
      log.mul(">Diferença de nível", dano)
    fimse
# Calcula dano com arma
  senao arma1
    se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
      dano *= arg0.atkesp + rand(arma1.armamin, arma1.armamax)
      dano *= arg0.atkesp / (arg1.defesp * 300)
    senao
      dano *= arg0.atknorm + rand(arma1.armamin, arma1.armamax)
      dano *= arg0.atknorm / (arg1.defnorm * 300)
    fimse
# Calcula dano sem arma
  senao
    se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
      dano *= arg0.atkesp * arg0.atkesp / (arg1.defesp * rand(270, 330))
    senao
      dano *= arg0.atknorm * arg0.atknorm / (arg1.defnorm * rand(270, 330))
    fimse
    dano *= 1 + (arg0.pnivel - arg1.pnivel) / (arg0.pnivel + arg1.pnivel + 10)
  fimse
# Modificadores de posição
  casovar arg1.posicao
  casose "0" # Morto
  casose "1" # Mortalmente ferido
  casose "2" # Incapacitado
    dano *= 2.666, log.mul(">Alvo incapacitado", dano)
    sair
  casose "3" # Muito fraco
    dano *= 2.333, log.mul(">Alvo muito fraco", dano)
    sair
  casose "4" # dormindo
    dano *= 2, log.mul(">Alvo dormindo", dano)
    sair
  casose "5" # descansando
    dano *= 1.666, log.mul(">Alvo descansando", dano)
    sair
  casose "6" # sentado
    dano *= 1.333, log.mul(">Alvo sentado", dano)
    sair
  casofim
# Atualiza pontos de vida conforme os danos (pelo menos 1 de dano)
  mudavida = dano < 1 ? -1 : -dano
  arg1.pvida += mudavida

func mensinicio # Envia mensagem inicial da habilidade ou magia
# arg0 = personagem que está usando a habilidade ou magia
# arg1 = personagem alvo
  txt512 lin.3
  ret !menssub(lin, 0), nulo
  $mens.p(arg0, arg1, arma1)
  se arg0 == arg1
    $mens.mtodos2(lin.0, lin.2)
  senao
    $mens.mtodos3(lin.0, lin.1, lin.2)

func mensgolpe # Envia mensagens de alvo principal de acordo com o resultado do ataque
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# Faz result=10 se o alvo morreu, mas não chama a função morreu
  $mens.p(arg0, arg1, arma1)
  txt512 lin.3
  casovar result
  casose "0" # Acertou o alvo
    $mens.mens = mudavida
    arg1.p_imortal && (arg1.pvida = intmax(arg1.pvida, arg1.pvidamax)) # Imortal
    se !arg1.pvida # Se morreu
      result = 10
      ret menssub(lin, 8) && $mens.mtodos3(lin.0, lin.1, lin.2)
    senao arg0 == arg1 # Se o alvo for o próprio personagem
      ret menssub(lin, 3) && $mens.mtodos2(lin.0, lin.1)
    senao # Outros casos
      ret menssub(lin, 5) && $mens.mtodos3(lin.0, lin.1, lin.2)
    fimse
  casose "1" # Não teve efeito
    ret menssub(lin, 14) && $mens.mtodos3(lin.0, lin.1, lin.2)
  casose "2" # Errou o alvo
    ret menssub(lin, 11) && $mens.mtodos3(lin.0, lin.1, lin.2)
  casofim

func mensgolpe2 # Envia mensagens de alvo secundário de acordo com o resultado do ataque
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# Faz result=10 se o alvo morreu, mas não chama a função morreu
  $mens.p(arg0, arg1, arma1)
  txt512 lin.3
  casovar result
  casose "0" # Acertou o alvo
    $mens.mens = mudavida
    arg1.p_imortal && (arg1.pvida = intmax(arg1.pvida, arg1.pvidamax)) # Imortal
    ret arg1.pvida, arg1.sock && menssub(lin, 5) && arg1.contr.msginv(lin.1)
    result = 10 # Morreu
    ret menssub(lin, 8) && $mens.mtodos3(lin.0, lin.1, lin.2)
  casose "1" # Não teve efeito
    ret arg1.sock && menssub(lin, 14) && arg1.contr.msginv(lin.1)
  casose "2" # Errou o alvo
    ret arg1.sock && menssub(lin, 11) && arg1.contr.msginv(lin.1)
  casofim

func menssub # Usado em mensgolpe
# arg0 = variável txt512 lin.3
# arg1 = índice da mensagem a obter
# Retorna 0 se mensagem vazia ou 1 se há alguma mensagem
  textotxt t
  txtsublin(msgatk0, arg1, 1) && t.addfim("msgatk0")
  txtsublin(msgatk1, arg1, 1) && t.addfim("msgatk1")
  txtsublin(msgatk2, arg1, 1) && t.addfim("msgatk2")
  txtsublin(msgatk3, arg1, 1) && t.addfim("msgatk3")
  txtsublin(msgatk4, arg1, 1) && t.addfim("msgatk4")
  ret !t.linhas, 0
  t.remove(rand(t.linhas))
  arg0.separar(txtsublin([t.remove], arg1, 3), "\n")
  arg0.0 = txtvis(arg0.0)
  arg0.1 = txtvis(arg0.1 ? arg0.1 : arg0.0)
  arg0.2 = txtvis(arg0.2 ? arg0.2 : arg0.0)
  ret 1


classe cmd_resgatar
herda comando_comum, comando_ajuda
const posic = 5
const txtajuda = "\b\c3Resgatar\b\n\
Sintaxe: RESGATAR <personagem>\n\
Resgata um jogador em uma batalha. É como se você se colocasse entre\n\
o jogador e quem está atacando ele."

func escr
  ret arg0.dono.s_naoresg, arg0.msg("Aqui não é possível resgatar.")
  ret !arg1, arg0.msg("Resgatar quem?")
  nomeobj n
  listaitem i
  n.ini(arg1, 1)
  epara i = arg0.dono.dentro2.ini, i, i.depois
    continuar !i.obj.visivel(arg0) || !n.nome(i.obj.ident)
    ref r
    r = i.obj
# Checa se é possível resgatar
    ret arg0 == r, arg0.msg("Resgatar você mesmo?")
    ret !r.jog, arg0.msg(i.obj.descnome + " não é jogador.")
    ret !r.atkrec.objini, arg0.msg(i.obj.descnome + " não está lutando.")
    ret r.atkenv.objlista == arg0, arg0.msg(i.obj.descnome + " está lutando com você.")
# Checa se personagens permitem resgate
    epara i = r.atkrec.ini, i, i.depois
      continuar !i.obj.p_naoresg
      arg0.msg("Não é possível resgatar " + r.descnome + " de " + i.obj.descnome + ".")
      ret
    efim
# Eventos
    listaobj l
    epara l.addfim(arg0.evento, r.evento), l, l.ini.remove
      ret l.objini.cmd_resgatar(arg0, r), nulo
    efim
# Resgata
    enquanto r.atkrec.objini
      r.atkrec.objini.batalhaini(arg0)
    efim
    $mens.p(arg0, r)
    $mens.mvis1("$P resgata $a.")
    ret
  efim
  arg0.msg("Você não vê " + arg1 + ".")


classe cmd_matar
herda comando_ataque
const objcmd = config:matartipo ? este
const objajuda = config:matartipo ? este
const txtajuda = "\b\c3Matar\b\n\
Sintaxe: MATAR <personagem>\n\
Começa um combate com um personagem."
const cmdmenu = ""

func exechab # Chamado quando personagem (arg0) quer atacar alguém (arg1)
  se arg0.atkenv
    arg0.msg("Você já está lutando.")
  senao !arg0.persobat.atkauto(arg1, 8) # Realiza um ataque automático
    arg0.msg("Você não sabe como atacar " + arg1.descnome + ".")
  senao arg0.atkenv # Se está lutando
    arg0.p_espera = intmax(arg0.p_espera, config:atktempo)


classe comando_ataque_log
ref perso1 # Personagem vai receber mensagens de log
ref perso2 # Personagem vai receber mensagens de log
textotxt t # Mensagens de log
real2 atk
const m = t.addfim(arg0) # Adiciona mensagem

func igual # arg0 = mensagem, arg1 = ataque
  atk = arg1
  t.addfim(arg0 + " " + arg1)

func mul # arg0 = mensagem, arg1 = ataque
  ret atk == arg1, t.addfim(arg0 + " (não altera)")
  refvar fator = arg1 / atk
  atk = arg1
  t.addfim(arg0 + " (x" + fator + ") " + arg1)

func div # arg0 = mensagem, arg1 = ataque
  ret atk == arg1, t.addfim(arg0 + " (não altera)")
  refvar fator = atk / arg1
  atk = arg1
  t.addfim(arg0 + " (/" + fator + ") " + arg1)

func ini
  apagar(este)

func fim
  perso1 && perso1.msg2(t.ini.textolin(100))
  perso2 && perso2.msg2(t.ini.textolin(100))
