classe mens
ref perso # Personagem que está enviando a mensagem
ref alvo # Personagem ou objeto alvo da ação
ref obj # Objeto secundário
ref r # Objeto que vai receber a mensagem
txt512 mens # Mensagem usada em $M
textotxt t0 # Usado em proc: texto que será enviado
textopos p0 # Usado em proc: linha atual
int16 i # Posição em p0 # Usado em proc: posição em p0
txt1 opc # Usado em proc: opção
txt100 lin # Usado em proc: linha

func iniclasse
  criar(arg0)

func p # Define os personagens
  perso = arg0, alvo = arg1, obj = arg2

func mtodos1 # Mensagem só para quem estiver acordado
# arg0 = mensagem para todos
  se perso.dono.socktot && arg0
    listaobj l0
    l0.addfim(perso.dono.dentro2)
    enquanto l0
      l0.objini.msginv(arg0), l0.ini.remove
    efim

func mtodos2 # Mensagem só para quem estiver acordado
# arg0 = mensagem para personagem, arg1 = mensagem para outros
  se perso.dono.socktot
    arg0 && perso.msginv(arg0)
    se arg1
      listaobj l0
      l0.addfim(perso.dono.dentro2)
      l0.remove(perso)
      enquanto l0
        l0.objini.msginv(arg1), l0.ini.remove
      efim

func mtodos3 # Mensagem só para quem estiver acordado
# arg0,arg1,arg2 = mensagens para personagem, alvo e outros
  se perso.dono.socktot
    arg0 && perso.msginv(arg0)
    arg1 && alvo.msginv(arg1)
    se arg2
      listaobj l0
      l0.addfim(perso.dono.dentro2)
      l0.remove(perso, alvo)
      enquanto l0
        l0.objini.msginv(arg2), l0.ini.remove
      efim

func mvis1 # Mensagem só para quem pode ver o personagem e estiver acordado
# arg0 = mensagem para todos
  se perso.dono.socktot && arg0
    perso.msginv(arg0)
    listaobj l0
    l0.addfim(perso.dono.dentro2)
    l0.remove(perso)
    enquanto l0
      l0.objini.msgvis(arg0), l0.ini.remove
    efim

func mvis2 # Mensagem só para quem pode ver o personagem e estiver acordado
# arg0 = mensagem para personagem, arg1 = mensagem para outros
  se perso.dono.socktot
    arg0 && perso.msginv(arg0)
    se arg1
      listaobj l0
      l0.addfim(perso.dono.dentro2)
      l0.remove(perso)
      enquanto l0
        l0.objini.msgvis(arg1), l0.ini.remove
      efim

func mvis3 # Mensagem só para quem pode ver o personagem e estiver acordado
# arg0,arg1,arg2 = mensagens para personagem, alvo e outros
  se perso.dono.socktot
    arg0 && perso.msginv(arg0)
    arg1 && alvo.msgvis(arg1)
    se arg2
      listaobj l0
      l0.addfim(perso.dono.dentro2)
      l0.remove(perso, alvo)
      enquanto l0
        l0.objini.msgvis(arg2), l0.ini.remove
      efim

func proc # Prepara e retorna mensagem
# arg0=mensagem, arg1=objeto
  t0.limpar, t0.addfim(arg0)
  p0 = t0.ini, i = 0, r = arg1
  enquanto (i = p0.txtproc("$", i)) >= 0
    opc = p0.texto(i + 1, 1)
    se opc === "$"
      p0.mudar("", i, 1)
      i += 1
    senao opc === txtmai(opc)
      lin = p0.texto(i + 2)
      p0.mudar(opcmai_[opc](lin), i, inttotal(lin) + 2)
    senao opc === txtmin(opc)
      lin = p0.texto(i + 2)
      p0.mudar(opcmin_[opc](lin), i, inttotal(lin) + 2)
    senao
      p0.mudar("", i, 2)
    fimse
  efim
  ret t0.remove(1000)

func opcmai_p # Nome do personagem
  se r == perso
    ret "Você" + arg0
  senao perso.visivel(r)
    ret txtcopiamai(perso.nome, "A") + arg0
  senao perso.perso
    ret "Alguém" + arg0
  senao
    ret "Alguma coisa" + arg0

func opcmin_p # Nome do personagem
  se r == perso
    ret "você" + arg0
  senao perso.visivel(r)
    ret perso.nome + arg0
  senao perso.perso
    ret "alguém" + arg0
  senao
    ret "alguma coisa" + arg0

func opcmai_q # Nome do personagem escolhido
  se r == perso.persoesc
    ret "Você" + arg0
  senao perso.visivel(r)
    ret txtcopiamai(perso.persoesc.nome, "A") + arg0
  senao perso.persoesc.perso
    ret "Alguém" + arg0
  senao
    ret "Alguma coisa" + arg0

func opcmin_q # Nome do personagem escolhido
  se r == perso.persoesc
    ret "você" + arg0
  senao perso.visivel(r)
    ret perso.persoesc.nome + arg0
  senao perso.persoesc.perso
    ret "alguém" + arg0
  senao
    ret "alguma coisa" + arg0

func opcmai_r # Nome do personagem em batalha
  se r == perso.persobat
    ret "Você" + arg0
  senao perso.visivel(r)
    se perso.persobat == perso
      ret txtcopiamai(perso.persobat.nome, "A") + arg0
    senao
      ret txtcopiamai(perso.persobat.nome, "A") + " de " + perso.nome + arg0
    fimse
  senao perso.persoesc.perso
    ret "Alguém" + arg0
  senao
    ret "Alguma coisa" + arg0

func opcmin_r # Nome do personagem em batalha
  se r == perso.persobat
    ret "você" + arg0
  senao perso.visivel(r)
    se perso.persobat == perso
      ret perso.persobat.nome + arg0
    senao
      ret perso.persobat.nome + " de " + perso.nome + arg0
    fimse
  senao perso.persoesc.perso
    ret "alguém" + arg0
  senao
    ret "alguma coisa" + arg0

func opcmai_a # Nome do alvo
  se r == alvo
    ret "Você" + arg0
  senao alvo.visivel(r)
    ret txtcopiamai(alvo.nome, "A") + arg0
  senao alvo.perso
    ret "Alguém" + arg0
  senao
    ret "Alguma coisa" + arg0

func opcmin_a # Nome do alvo
  se r == alvo
    ret "você" + arg0
  senao alvo.visivel(r)
    ret alvo.nome + arg0
  senao alvo.perso
    ret "alguém" + arg0
  senao
    ret "alguma coisa" + arg0

func opcmai_b # Nome do alvo escolhido
  se r == alvo.persoesc
    ret "Você" + arg0
  senao alvo.visivel(r)
    ret txtcopiamai(alvo.persoesc.nome, "A") + arg0
  senao alvo.persoesc.perso
    ret "Alguém" + arg0
  senao
    ret "Alguma coisa" + arg0

func opcmin_b # Nome do alvo escolhido
  se r == alvo.persoesc
    ret "você" + arg0
  senao alvo.visivel(r)
    ret alvo.persoesc.nome + arg0
  senao alvo.persoesc.perso
    ret "alguém" + arg0
  senao
    ret "alguma coisa" + arg0

func opcmai_c # Nome do alvo em batalha
  se r == alvo.persobat
    ret "Você" + arg0
  senao alvo.visivel(r)
    se alvo.persobat == alvo
      ret txtcopiamai(alvo.persobat.nome, "A") + arg0
    senao
      ret txtcopiamai(alvo.persobat.nome, "A") + " de " + alvo.nome + arg0
    fimse
  senao alvo.persoesc.perso
    ret "Alguém" + arg0
  senao
    ret "Alguma coisa" + arg0

func opcmin_c # Nome do alvo em batalha
  se r == alvo.persobat
    ret "você" + arg0
  senao alvo.visivel(r)
    se alvo.persobat == alvo
      ret alvo.persobat.nome + arg0
    senao
      ret alvo.persobat.nome + " de " + alvo.nome + arg0
    fimse
  senao alvo.persoesc.perso
    ret "alguém" + arg0
  senao
    ret "alguma coisa" + arg0

func opcmai_d # Nome do alvo
  se r == alvo
    ret "Você" + arg0
  senao alvo.visivel(r)
    se alvo.dono.perso
      ret txtcopiamai(alvo.nome, "A") + " de " + alvo.dono.nome + arg0
    senao
      ret txtcopiamai(alvo.nome, "A") + arg0
    fimse
  senao alvo.perso
    ret "Alguém" + arg0
  senao
    ret "Alguma coisa" + arg0

func opcmin_d # Nome do alvo
  se r == alvo
    ret "você" + arg0
  senao alvo.visivel(r)
    se alvo.dono.perso
      ret alvo.nome + " de " + alvo.dono.nome + arg0
    senao
      ret alvo.nome + arg0
    fimse
  senao alvo.perso
    ret "alguém" + arg0
  senao
    ret "alguma coisa" + arg0

func opcmai_o # Nome do objeto
  se r == obj
    ret "Você" + arg0
  senao obj.visivel(r)
    ret txtcopiamai(obj.nome, "A") + arg0
  senao obj.perso
    ret "Alguém" + arg0
  senao
    ret "Alguma coisa" + arg0

func opcmin_o # Nome do objeto
  se r == obj
    ret "você" + arg0
  senao obj.visivel(r)
    ret obj.nome + arg0
  senao obj.perso
    ret "alguém" + arg0
  senao
    ret "alguma coisa" + arg0

func opcmai_s # Gênero do personagem
  se perso.perso
    ret sexoB[perso.sexo] + arg0
  senao
    ret sexoD[perso.sexo] + arg0

func opcmin_s # Gênero do personagem
  se perso.perso
    ret sexoA[perso.sexo] + arg0
  senao
    ret sexoC[perso.sexo] + arg0

func opcmai_t # Gênero do alvo
  se alvo.perso
    ret sexoB[alvo.sexo] + arg0
  senao
    ret sexoD[alvo.sexo] + arg0

func opcmin_t # Gênero do alvo
  se alvo.perso
    ret sexoA[alvo.sexo] + arg0
  senao
    ret sexoC[alvo.sexo] + arg0

func opcmai_u # Gênero do objeto
  se obj.perso
    ret sexoB[obj.sexo] + arg0
  senao
    ret sexoD[obj.sexo] + arg0

func opcmin_u # Gênero do objeto
  se obj.perso
    ret sexoA[obj.sexo] + arg0
  senao
    ret sexoC[obj.sexo] + arg0

func opcmai_m # Mensagem
  ret txttroca(txtcopiamai(mens, "A"), "$", "$$") + arg0

func opcmin_m # Mensagem
  ret txttroca(mens, "$", "$$") + arg0
# func opcmai_a
# # arg0 é o que vem depois de "$A", até 100 caracteres e sem "\n"
# ret "teste" + arg0 # Substitui "$a" por "teste"
# func opcmin_a
# ret "R$$" + arg0 # Um $ no texto deve ser retornado com o$$
# # Ou assim: ret txttroca("R$", "$", "$$") + arg0

const sexoA0 = "a"
const sexoA1 = "o"
const sexoB0 = "A"
const sexoB1 = "O"
const sexoC0 = "uma"
const sexoC1 = "um"
const sexoD0 = "Uma"
const sexoD1 = "Um"


classe mens_prompt
# Monta mensagem do prompt a partir do prompt e do personagem
# Chamar com:
# $mens_prompt.mens(mensagem, personagem)
#
ref p1 # O próprio personagem
ref p2 # O animal usado por p1
ref a1 # Quem está batalhando com o personagem
ref a2 # O animal de quem está batalhando com o personagem

func iniclasse
  criar(arg0)

func mens
# arg0 = mensagem
# arg1 = personagem
  p1 = ref(arg1), p2 = ref(p1.persoesc)
  a1 = ref(p1.atkenv.objlista), a2 = ref(a1.persobat)
  ret vartroca(arg0, "%", "m_")

func m_d
  se arg0 === "d" # Hora no MUD
    ret txt(misc:hora) + ":" + misc:min
  senao # Hora no servidor
    datahora d
    d.agora
    ret txt(d.hora) + ":" + d.min

const m_g = p1.var.z_moedas_
const m_h = arg0 === "h" ? p2.pvida : p2.pvidamax
const m_l = arg0 === "l" ? p2.pnivel : a2.pnivel
const m_m = arg0 === "m" ? p2.pmana : p2.pmanamax

func m_n
  se arg0 === "n" # Nome do seu personagem
    ret p1 == p2 ? p1.nome : p2.nome + " de " + p1.nome
  senao # Nome do seu oponente
    ret a1 == a2 ? a1.nome : a2.nome + " de " + a1.nome

func m_o
  se !a2
  senao arg0 === "o" # Pontos de vida do oponente em porcentagem
    ret int(a2.pvida * 100 / a2.pvidamax)
  senao # Pontos de vida do oponente em uma barra de 10 caracteres
    uint8 x
    x = int(a2.pvida * 10 / a2.pvidamax)
    ret x >= 10 ? ">>>>>>>>>>" : txtrepete(">", x) + txtrepete(" ", 10 - x)

func m_p
  se arg0 === "p" # Pontos de vida em porcentagem
    ret int(p2.pvida * 100 / p2.pvidamax)
  senao # Pontos de vida em uma barra de 10 caracteres
    uint8 x
    x = int(p2.pvida * 10 / p2.pvidamax)
    ret x >= 10 ? ">>>>>>>>>>" : txtrepete(">", x) + txtrepete(" ", 10 - x)

func m_t # Conforme o sol: amanhecendo, manhã, tarde, anoitecendo, noite
  ret arg0 === "t", " "
  casovar misc:hora
  casose "6"
    ret "amanhecendo"
  casose "7"
  casose "8"
  casose "9"
  casose "10"
  casose "11"
    ret "manhã"
  casose "12"
  casose "13"
  casose "14"
  casose "15"
  casose "16"
    ret "tarde"
  casose "17"
    ret "escurecendo"
    caseose
    ret "noite"
  casofim

const m_v = arg0 === "v" ? p2.pmove : p2.pmovemax
const m_x = arg0 === "x" ? p2.expatual : p2.expmax - p2.expatual
const m_z = arg0 === "z" ? "\n" : "%"
