classe mens
ref contr # Mesmo que perso.contr
ref perso # Personagem que está enviando a mensagem
ref alvo # Personagem ou objeto alvo da ação
ref obj # Objeto secundário
ref r # Objeto que vai receber a mensagem
txt512 mens # Mensagem usada em $M

func iniclasse
  criar(arg0)

func p # Define os personagens
  contr = arg0.contr, perso = arg0, alvo = arg1, obj = arg2

func mperso # Mensagem só para o personagem
  contr.dono.socktot && arg0 && contr.msginv(arg0)

func mtodos1 # Mensagem só para quem estiver acordado
# arg0 = mensagem para todos
  se contr.dono.socktot && arg0
    listaobj l0
    l0.addfim(contr.dono.dentro2)
    enquanto l0
      l0.objini.msginv(arg0), l0.ini.remove
    efim

func mtodos2 # Mensagem só para quem estiver acordado
# arg0 = mensagem para personagem, arg1 = mensagem para outros
  se contr.dono.socktot
    arg0 && contr.msginv(arg0)
    se arg1
      listaobj l0
      l0.addfim(contr.dono.dentro2)
      l0.remove(contr)
      enquanto l0
        l0.objini.msginv(arg1), l0.ini.remove
      efim

func mtodos3 # Mensagem só para quem estiver acordado
# arg0,arg1,arg2 = mensagens para personagem, alvo e outros
  se contr.dono.socktot
    arg0 && contr.msginv(arg0)
    arg1 && alvo.contr.msginv(arg1)
    se arg2
      listaobj l0
      l0.addfim(contr.dono.dentro2)
      l0.remove(contr, alvo.contr)
      enquanto l0
        l0.objini.msginv(arg2), l0.ini.remove
      efim

func mvis1 # Mensagem só para quem pode ver o personagem e estiver acordado
# arg0 = mensagem para todos
  se contr.dono.socktot && arg0
    contr.msginv(arg0)
    listaobj l0
    l0.addfim(contr.dono.dentro2)
    l0.remove(contr)
    enquanto l0
      l0.objini.msgvis(arg0), l0.ini.remove
    efim

func mvis2 # Mensagem só para quem pode ver o personagem e estiver acordado
# arg0 = mensagem para personagem, arg1 = mensagem para outros
  se contr.dono.socktot
    arg0 && contr.msginv(arg0)
    se arg1
      listaobj l0
      l0.addfim(contr.dono.dentro2)
      l0.remove(contr)
      enquanto l0
        l0.objini.msgvis(arg1), l0.ini.remove
      efim

func mvis3 # Mensagem só para quem pode ver o personagem e estiver acordado
# arg0,arg1,arg2 = mensagens para personagem, alvo e outros
  se contr.dono.socktot
    arg0 && contr.msginv(arg0)
    arg1 && alvo.contr.msgvis(arg1)
    se arg2
      listaobj l0
      l0.addfim(contr.dono.dentro2)
      l0.remove(contr, alvo.contr)
      enquanto l0
        l0.objini.msgvis(arg2), l0.ini.remove
      efim

func proc # Prepara e retorna mensagem
# arg0=mensagem, arg1=a quem se destina a mensagem
  r = arg1
  ret vartroca(txttroca(arg0, "$$", "$@"), "$", "o_")

const o_@ = "$"
const o_a = arg0 === "A" ? txtcopiamai(nome(alvo), "A") : nome(alvo)
const o_m = arg0 === "M" ? txtcopiamai(mens, "A") : mens
const o_p = arg0 === "P" ? txtcopiamai(nome(perso), "A") : nome(perso)

func nome # Usado em $P e $A para obter o nome de um personagem; arg0=personagem
  se arg0 == arg0.contr
    se r == arg0
      ret "você"
    senao arg0.visivel(r)
      ret arg0.descnome
    senao arg0.perso
      ret "alguém"
    senao
      ret "alguma coisa"
    fimse
  senao r == arg0.contr
    ret (arg0.msexo ? "seu " : "sua ") + arg0.nome
  senao arg0.contr.visivel(r)
    ret arg0.descnome + " de " + arg0.contr.descnome
  senao arg0.visivel(r)
    ret arg0.descnome + " de alguém"
  senao
    ret arg0.perso ? "alguém" : "alguma coisa"

func o_q # Nome do personagem sem citar o dono
  se r == perso
    ret arg0 === "Q" ? "Você" : "você"
  senao perso.visivel(r)
    ret arg0 === "Q" ? txtcopiamai(perso.descnome, "A") : perso.descnome
  senao perso.perso
    ret arg0 === "Q" ? "Alguém" : "alguém"
  senao
    ret arg0 === "Q" ? "Alguma coisa" : "alguma coisa"

func o_r # Nome do personagem no comando QUEM
  se arg0 == "R"
    ret txtcopiamai(perso.sock ? perso.sock.nome : perso.nome, "A")
  senao
    ret perso.sock ? perso.sock.nome : perso.nome

func o_b # Nome do alvo sem citar o dono
  se r == alvo
    ret arg0 === "B" ? "Você" : "você"
  senao alvo.visivel(r)
    ret arg0 === "B" ? txtcopiamai(alvo.descnome, "A") : alvo.descnome
  senao alvo.perso
    ret arg0 === "B" ? "Alguém" : "alguém"
  senao
    ret arg0 === "B" ? "Alguma coisa" : "alguma coisa"

func o_c # Nome do alvo no comando QUEM
  se arg0 == "C"
    ret txtcopiamai(alvo.sock ? alvo.sock.nome : alvo.nome, "A")
  senao
    ret alvo.sock ? alvo.sock.nome : alvo.nome

func o_o # Nome do objeto
  se r == obj
    ret arg0 === "O" ? "Você" : "você"
  senao obj.visivel(r)
    ret arg0 === "O" ? txtcopiamai(obj.descnome, "A") : obj.descnome
  senao obj.perso
    ret arg0 === "O" ? "Alguém" : "alguém"
  senao
    ret arg0 === "O" ? "Alguma coisa" : "alguma coisa"

func o_s # Gênero do personagem
  se arg0 === "S"
    ret perso.perso, perso.msexo ? "O" : "A"
    ret perso.msexo ? "Um" : "Uma"
  senao
    ret perso.perso, perso.msexo ? "o" : "a"
    ret perso.msexo ? "um" : "uma"

func o_t # Gênero do alvo
  se arg0 === "T"
    ret alvo.perso, alvo.msexo ? "O" : "A"
    ret alvo.msexo ? "Um" : "Uma"
  senao
    ret alvo.perso, alvo.msexo ? "o" : "a"
    ret alvo.msexo ? "um" : "uma"

func o_u # Gênero do objeto
  se arg0 === "U"
    ret obj.perso, obj.msexo ? "O" : "A"
    ret obj.msexo ? "Um" : "Uma"
  senao
    ret obj.perso, obj.msexo ? "o" : "a"
    ret obj.msexo ? "um" : "uma"

func o_v # Gênero do personagem: e/a
  se arg0 === "V"
    ret perso.msexo ? "E" : "A"
  senao
    ret perso.msexo ? "e" : "a"

func o_w # Gênero do alvo: e/a
  se arg0 === "W"
    ret alvo.msexo ? "E" : "A"
  senao
    ret alvo.msexo ? "e" : "a"

func o_x # Gênero do objeto: e/a
  se arg0 === "X"
    ret obj.msexo ? "E" : "A"
  senao
    ret obj.msexo ? "e" : "a"


classe mens_antigo
# Exemplo de código da versão anterior da classe mens
#
ref contr # Mesmo que perso.contr
ref perso # Personagem que está enviando a mensagem
ref alvo # Personagem ou objeto alvo da ação
ref obj # Objeto secundário
ref r # Objeto que vai receber a mensagem
txt512 mens # Mensagem usada em $M
textotxt t0 # Usado em proc: texto que será enviado
textopos p0 # Usado em proc: linha atual
int16 i # Posição em p0 # Usado em proc: posição em p0
txt1 opc # Usado em proc: opção
txt100 lin # Usado em proc: linha

func iniclasse
  criar(arg0)

func p # Define os personagens
  contr = arg0.contr, perso = arg0, alvo = arg1, obj = arg2

func proc # Prepara e retorna mensagem
# arg0=mensagem, arg1=objeto
  t0.limpar, t0.addfim(arg0)
  p0 = t0.ini, i = 0, r = arg1
  enquanto (i = p0.txtproc("$", i)) >= 0
    opc = p0.texto(i + 1, 1)
    se opc === "$"
      p0.mudar("", i, 1)
      i += 1
    senao opc === txtmai(opc)
      lin = p0.texto(i + 2)
      p0.mudar(opcmai_[opc](lin), i, inttotal(lin) + 2)
    senao opc === txtmin(opc)
      lin = p0.texto(i + 2)
      p0.mudar(opcmin_[opc](lin), i, inttotal(lin) + 2)
    senao
      p0.mudar("", i, 2)
    fimse
  efim
  ret t0.remove(1000)

func opcmai_p # Nome do personagem
  se r == perso
    ret "Você" + arg0
  senao perso.visivel(r)
    ret txtcopiamai(perso.descnome, "A") + arg0
  senao perso.perso
    ret "Alguém" + arg0
  senao
    ret "Alguma coisa" + arg0
# func opcmai_a
# # arg0 é o que vem depois de "$A", até 100 caracteres e sem "\n"
# ret "teste" + arg0 # Substitui "$a" por "teste"
# func opcmin_a
# ret "R$$" + arg0 # Um $ no texto deve ser retornado com o$$
# # Ou assim: ret txttroca("R$", "$", "$$") + arg0


classe mens_prompt
# Monta mensagem do prompt a partir do prompt e do personagem
# Chamar com:
# $mens_prompt.mens(mensagem, personagem)
#
ref p1 # O próprio personagem
ref p2 # O animal usado por p1
ref a1 # Quem está batalhando com o personagem
ref a2 # O animal de quem está batalhando com o personagem

func iniclasse
  criar(arg0)

func mens
# arg0 = mensagem
# arg1 = personagem
  p1 = ref(arg1), p2 = ref(p1.persoesc)
  a1 = ref(p1.atkenv.objlista), a2 = ref(a1.persobat)
  ret vartroca(arg0, "%", "m_")

func m_d
  se arg0 === "d" # Hora no MUD
    ret txt(misc:hora) + ":" + misc:min
  senao # Hora no servidor
    datahora d
    d.agora
    ret txt(d.hora) + ":" + d.min

const m_g = p1.var.z_moedas_
const m_h = arg0 === "h" ? p2.pvida : p2.pvidamax
const m_l = arg0 === "l" ? p2.pnivel : a2.pnivel
const m_m = arg0 === "m" ? p2.pmana : p2.pmanamax

func m_n
  se arg0 === "n" # Nome do seu personagem
    ret p1 == p2 ? p1.descnome : p2.descnome + " de " + p1.descnome
  senao # Nome do seu oponente
    ret a1 == a2 ? a1.descnome : a2.descnome + " de " + a1.descnome

func m_o
  se !a2
  senao arg0 === "o" # Pontos de vida do oponente em porcentagem
    ret int(a2.pvida * 100 / a2.pvidamax)
  senao # Pontos de vida do oponente em uma barra de 10 caracteres
    uint8 x
    x = int(a2.pvida * 10 / a2.pvidamax)
    ret x >= 10 ? ">>>>>>>>>>" : txtrepete(">", x) + txtrepete(" ", 10 - x)

func m_p
  se arg0 === "p" # Pontos de vida em porcentagem
    ret int(p2.pvida * 100 / p2.pvidamax)
  senao # Pontos de vida em uma barra de 10 caracteres
    uint8 x
    x = int(p2.pvida * 10 / p2.pvidamax)
    ret x >= 10 ? ">>>>>>>>>>" : txtrepete(">", x) + txtrepete(" ", 10 - x)

func m_t # Conforme o sol: amanhecendo, manhã, tarde, anoitecendo, noite
  ret arg0 === "t", " "
  casovar misc:hora
  casose "6"
    ret "amanhecendo"
  casose "7"
  casose "8"
  casose "9"
  casose "10"
  casose "11"
    ret "manhã"
  casose "12"
  casose "13"
  casose "14"
  casose "15"
  casose "16"
    ret "tarde"
  casose "17"
    ret "escurecendo"
  casose
    ret "noite"
  casofim

const m_v = arg0 === "v" ? p2.pmove : p2.pmovemax
const m_x = arg0 === "x" ? p2.expatual : p2.expmax - p2.expatual
const m_z = arg0 === "z" ? "\n" : "%"
const m_b = "\b"
const m_c0 = "\c0"
const m_c1 = "\c1"
const m_c2 = "\c2"
const m_c3 = "\c3"
const m_c4 = "\c4"
const m_c5 = "\c5"
const m_c6 = "\c6"
const m_c7 = "\c7"
const m_c8 = "\c8"
const m_c9 = "\c9"
const m_ca = "\ca"
const m_cb = "\cb"
const m_cc = "\cc"
const m_cd = "\cd"
const m_ce = "\ce"
const m_cf = "\cf"
const m_cg = "\cg"
const m_ch = "\ch"
const m_ci = "\ci"
const m_cj = "\cj"
const m_ck = "\ck"
const m_cl = "\cl"
const m_f0 = "\d0"
const m_f1 = "\d1"
const m_f2 = "\d2"
const m_f3 = "\d3"
const m_f4 = "\d4"
const m_f5 = "\d5"
const m_f6 = "\d6"
const m_f7 = "\d7"
