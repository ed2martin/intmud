Índice

1. Organização dos arquivos e classes
2. Envio de mensagens formatadas (casa-mens.int)
3. Variáveis de personagens e salas
4. Salas
4.1. Salas funções
4.2. Salas variáveis
5. Personagens
5.1. Personagens funções
5.2. Personagens variáveis
5.3. Personagens constantes (funções)
5.4. Personagens eventos
6. Lista de itens pendentes


1. Organização dos arquivos e classes

casa.int
Contém a configuração do jogo (classe 'config'), como por exemplo, se vai
rodar em uma janela ou abrindo uma porta, a sala inicial, etc.
As outras classes são responsáveis pela comunicação entre o jogo e
os jogadores.

casa-a-*.int
Contém as salas, classes cujo nome começa com 's_'.
Geralmente cada área é um arquivo, com classes cujo nome é 's_'
seguido do prefixo da área e um número de '001' a '999'.
Exemplo, a classe 's_ini001' é a primeira sala do arquivo casa-a-ini.int.

casa-salacomum.int
Contém a classe 'sala', que é herdada por todas as salas.

casa-perso.int
Contém a maioria dos personagens, classes cujo nome começa com 'p_'.

casa-jog.int
Contém a classe 'jogador', que é o personagem do jogador.

casa-persomum.int
Contém a classe 'personagem', que é herdada por todos os personagens.

casa-efeito.int
Contém os efeitos que afetam os personagens.
Todos os efeitos são classes cujo nome começa com 'e_', e são derivados
da classe 'efeito', também definida nesse arquivo.

casa-cmd.int
Contém os comandos que os personagens podem digitar, exceto ataques.
Todo comando é uma classe cujo nome é 'cmd_' seguido do nome do comando.
A classe 'comando_comum' é herdada por todos os comandos.
Quando é necessário uma única classe herdada por dois ou mais comandos,
geralmente o nome dessa classe começa com 'comando_'.

casa-ataque.int
Contém os comandos de ataque. Todo comando é derivado da classe
'comando_atque'.
Via de regra, a função 'escr' checa se está em condições de atacar e obtém
o alvo, e chama a função 'ataca', que realiza o ataque propriamente dito.
No caso dos personagens agressivos, é a função 't_proc_exec' do personagem
que toma a iniciativa de atacar. Ela chama a função 'ataca' de um golpe
escolhido aleatoriamente e fornecendo o personagem alvo, também escolhido
aleatoriamente.

casa-mens.int
Contém a classe 'mens', especializada no envio de mensagens para personagens.

casa-misc.int
Contém a classe 'misc', que é uma miscelânia de funções, variáveis e tabelas.
Diferentemente das outras classes, as funções de misc devem ser chamadas
com 'misc:'. Por exemplo, 'misc:obj' ao invés de '$misc.obj'.


2. Envio de mensagens formatadas (casa-mens.int)

Para enviar uma mensagem formatada a um ou mais personagens, usa-se
a classe 'mens', contida no arquivo 'casa-mens.int'.

Primeiro define-se de um a três personagens com a seguinte função:
$mens.p(<personagem>, [alvo], [obj])

Depois, envia-se uma mensagem com uma das funções:
$mens.mvis1("texto")
$mens.mvis2("texto", "texto")
$mens.mvis3("texto", "texto", "texto")
$mens.mtodos1("texto")
$mens.mtodos2("texto", "texto")
$mens.mtodos3("texto", "texto", "texto")

Onde:
mvis - envia para todos que podem ver o personagem
mtodos - envia para todos, mesmo os que não podem ver
O número após o nome da função indica a quantidade de mensagens:
1 - mesma mensagem para todos
2 - uma mensagem para o personagem e outra para os demais
3 - uma mensagem para o personagem, outra para o alvo e outra para os demais

O texto pode conter os seguintes caracteres especiais:

$$ = Símbolo $
$P = Nome do personagem
$Q = Nome do personagem escolhido, ex. "Lula"
$R = Nome do personagem em batalha, ex. "Lula de fulano"
$A = Nome do alvo
$B = Nome do alvo escolhido, ex. "Lula"
$C = Nome do alvo em batalha, ex. "Lula de fulano"
$D = Nome do alvo, sendo que pode ser "Animal X de fulano"
$O = Nome do objeto
$S = Depende do personagem: "o", "a", "um" ou "uma"
$T = Depende do alvo: "o", "a", "um" ou "uma"
$U = Depende do objeto: "o", "a", "um" ou "uma"

Em qualquer dessas opções:
$ + letra maiúscula = primeira letra do texto em maiúscula
$ + letra minúscula = texto sem alterar a primeira letra


3. Variáveis de personagens e salas

Todos os personagens e salas têm uma lista de variáveis dinâmicas
(podem ser criadas e apagadas) contidas na seguinte variável:
textovar var

Os dois primeiros caracteres das variáveis de var indicam o tipo:
a_ = agenda (1=viu, 2=pegou)
h_ = habilidade
i_ = item, pode ser pego
l_ = língua (idioma)
o_ = item classificado como "outros"
v_ = item que está vestindo
z_ = variável não visível ao jogador


4. Salas

4.1. Salas funções

func ver( personagem )
Mostra descrição da sala seguido das saídas válidas.

func txtsai
Retorna a mensagem das saídas existentes (um texto).
Antes fazer: misc:obj = personagem

func txttotal
Retorna a quantidade de personagens e itens (um texto).
Antes fazer: misc:obj = personagem

func msg2(texto)
Envia mensagem para todos na sala.

func numperso
Retorna a quantidade de personagens não jogador na sala.


4.2. Salas variáveis

const limpar = 0
De quanto em quanto tempo limpar os itens, em décimos de segundo.

const terreno = 1
Tempo de espera ao sair da sala, em décimos de segundo, quando o usuário
digita uma direção.

const area_luta = 1
# 0 = não permite luta
# 1 = só não permite luta entre jogadores
# 2 = arena, permite luta com qualquer personagem

const descr = "texto"
Descrição da sala: título seguido das saídas válidas.
Antes fazer: misc:obj = personagem

const dir_n = $nome_da_sala
const dir_s = $nome_da_sala
const dir_l = $nome_da_sala
const dir_o = $nome_da_sala
const dir_e = $nome_da_sala
const dir_c = $nome_da_sala
const dir_b = $nome_da_sala
Salas vizinhas, nas direções norte, sul, leste, oeste, entrar,
cima (subir), baixo (descer).
Antes fazer: misc:obj = personagem

const mostra_n = 1
const mostra_s = 1
etc.
Se as saídas devem aparecer na lista de saídas.
Zero significa invisível, 1 significa visível
Antes fazer: misc:obj = personagem


5. Personagens

5.1. Personagens funções

Criar personagem:
criar("nome da classe do personagem", sala, nível, variáveis)
Exemplos:
criar("p_ini_silva", $s_ini008)
criar("p_rato", $s_dentro004, 37, "h_roer,h_arranhatox,h_morder")
Em eventos da sala, pode-se usar a sala "este", exemplo:
criar("p_ini_silva", este)

func teclou(texto)
Processa o texto que o personagem escreveu.

func esperar(tempo)
Personagem espera um tempo, em décimos de segundo, até poder agir novamente.

func msg(texto)
Envia mensagem para o personagem.

func msgtodos(texto)
Somente jogadores: Envia mensagem para todos os jogadores.

func msgsala(texto)
Somente jogadores: Envia mensagem para todos que estiverem na
mesma sala do bate-papo.

func persoalvo
Retorna o alvo do personagem, um objeto, conforme a variável alvo.
Retorna nulo se não houver alvo.

func escolhehab
Escolhe uma habilidade que o persomagem possui.
Retorna o nome da habilidade.

func escolhejog
Escolhe um jogador que está na mesma sala. Retorna o objeto do jogador.

func recuperar
Recupera status do personagem:
Pontos de vida completos e sem paralisado, queimando, congelado, dormindo,etc.

func ataqueini
Testa se pode atacar
Retorna "" se pode atacar ou a mensagem com o motivo se não pode.

func morreu
Executa todos os procedimentos para indicar que morreu.
Deve ser chamado quando pvida (pontos de vida) chegar a 0.

func morreu(1)
Mesmo que a função morreu, acima, mas não apaga o personagem.

func ganhaexp( quantida de experiência )
Personagem ganha experiência, geralmente devido à batalha.


5.2. Personagens variáveis

const nome = "nome do personagem"
Nome do personagem

const sexo = 0
Sexo: 0=feminino, 1=masculino

varfunc dono
A sala ou o personagem que contém esse personagem.
É semelhante a uma variável ref.

txt100 alvo
Nome do personagem alvo.

sav uint16 nivel
Nível do personagem

sav uint32 pvida
Pontos de vida atuais, quando chega a 0 morre


5.3. Personagens constantes (funções)

const podepegar = 1
Se pode ser pego por jogador

const agressivo = 1
Se é agressivo, ataca jogadores

const pvidamax = nivel * 2 + 25
Quantidade máxima de pontos de vida que o personagem pode ter

const expmax = nivel * nivel * 2 + 14
Quantidade de experiência para subir de nível

const ataque = (nivel * 4 + 60) * nivel + 30
Ataque do personagem

const defesa = nivel * 10 + 20
Defesa do personagem

const veloc = (nivel * 4 + 60) * nivel + 30
Velocidade do personagem


5.4. Personagens eventos

Nessas funções, arg0 é sempre o personagem que está fazendo a ação.
Elas são chamadas para a sala, se o personagem não pertencer a outro.
Depois, é executado para o próprio personagem.

func entrou
Personagem entrou na sala.

func saiu
Personagem saiu da sala

func entrou[tempo]
Eexemplo de função: entrou10
Executado um tempo após o personagem entrar na sala.
Exemplo, entrou1 é executado 1 segundo após entrar na sala.

func segundo[tempo]
Executado a cada X segundos, exemplo, segundo10 é executado
a cada 10 segundos.

func segsala[tempo]
Executado a cada X segundos, em cada sala que não estiver vazia.

func cmd_[nome do comando](personagem, texto)
A maioria dos comandos; retorna verdadeiro se não deve prosseguir.

func cmd_[nome do comando](personagem, alvo)
Somente comandos de ataque; retorna verdadeiro se não deve prosseguir.

func cmd_escr(personagem, texto, objeto do comando)
Personagem escreveu algo; retorna verdadeiro se não deve prosseguir.

func cmd_pegar(personagem, nome do item digitado, nome do item encontrado)
Pegar algum item ou animal; retorna verdadeiro se não deve pegar.

func cmd_dar(personagem, alvo, nome do item digitado, nome do item encontrado)
Dar algo a outro personagem; retorna verdadeiro se não deve dar.

func cmd_ataque(personagem, alvo, objeto do tipo de ataque)
Deve retornar verdadeiro se personagem não pode atacar o alvo.

func cmd_ataquerec(personagem, alvo, objeto do tipo de ataque)
Personagem está recebendo o ataque de outro.
Deve retornar verdadeiro se personagem não pode atacar o alvo.
Esse evento é chamado apenas para o personagem alvo do ataque.

func ver(personagem origem)
Quando alguém quer ver esse personagem.
Para ser visto, deve enviar mensagem para arg0 e retornar 1.


6. Lista de itens pendentes

Testar mensagens de batalha
Testar condições que afetam "status" dos personagens
Fazer os itens funcionarem
Vestir itens
Capa funcionar - para enganar vampiros
Evitar PK
