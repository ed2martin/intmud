classe adm_efeito
# Comandos de efeitos
#
const adm_efeito = "\b\c3Efeitos\b\n\
Magias e habilidades podem lançar efeitos sobre um personagem.\n\
Esses comandos permitem criar e editar os efeitos.\n\
\c2LEF\b [nome]\n\
  Lista efeitos que começam com o nome especificado.\n\
\c2CEF\b <nome>\n\
  Cria um efeito. Nome deve ser o nome do efeito, e deve ser composto\n\
  de letras, mas pode ter espaços no meio.\n\
\c2EEF\b <nome>\n\
  Edita um efeito.\n\
\c2AEF\b <nome>\n\
  Apaga um efeito."

func cmd_lef # Listar efeitos
  prog p
  textotxt t
  epara p.iniclasse("e_"), p.lin && t.linhas < 499, p.depois
    t.addfim(txtcopiamai(txt2(txte(p.texto)), "A") + ", " + [p.texto]:desc)
  efim
  se t.linhas
    msg2("\b\c3Efeitos:\b\n" + t.remove(500))
  senao
    msg("\bNenhum efeito encontrado.")
  fimse
  ret 1

func cmd_cef # Criar efeito
  prog p
  txt80 nome
  uint16 num
# Checa se digitou nome do ataque
  se arg0 == ""
    msg("Tecle o nome da magia após CEF")
    ret 1
  fimse
# Checa se nome válido
  nome = txte(txtremove(arg0, EMDSA))
  se txtsepara(nome, "DO+DOL,DOL+DO") != nome
    msg("Nome inválido para efeito: " + nome)
    ret 1
  senao p.existe("e_" + nome)
    msg("Já existe o efeito: " + nome)
    ret 1
  fimse
# Cria efeito
  txt200 lin
  lin = "e_" + txts(txtmin(nome)) + "\nb-efeito\nherda comum_efeito"
  lin += "\nconst e_nome = \"" + nome + "\""
  prog p
  p.criar(lin)
  criar("admordena", "b-efeito")
# config:salvar
  msg("\bCriou efeito: " + nome)
  admlog("criou efeito " + nome)
  ret 1

func cmd_aef # Apagar efeito
  prog p
  se arg0 == ""
    msg("Tecle um ou mais nomes de efeitos após AEF")
    ret 1
  fimse
  uint16 x
  enquanto txtsub(arg0, x, 1)
    se !p.existe("e_" + txtsub(arg0, x, 1))
      msg("Efeito não existe: " + txtsub(arg0, x, 1))
      ret 1
    senao e_[txtsub(arg0, x, 1)]:interno
      msg("Efeito não pode ser apagado: " + txtsub(arg0, x, 1))
      ret 1
    fimse
    x += 1
  efim
  tpasso = arg0, p_aef
  ret 1

func p_aef # Confirmar que quer apagar efeito
  passo = ""
  se arg0 == "n"
    msg("Cancelado")
  senao arg0 == "s"
    prog p
    uint16 x
    enquanto txtsub(tpasso, x, 1)
      p.apagar("ef_" + txtsub(tpasso, x, 1))
      x += 1
    efim
    config:salvar
    se x < 2
      msg("Efeito apagado: " + tpasso)
      admlog("apagou efeito " + tpasso)
    senao
      msg("Efeitos apagados: " + tpasso)
      admlog("apagou efeitoss " + tpasso)
    fimse
  senao
    passo = "aef"
    refvar m1 = txt2(tpasso) ? "efeitos" : "efeito"
    msg("Apagar " + m1 + " " + tpasso + "? Tecle S ou N")
  fimse
  ret 1

func cmd_eef # Editar efeito
  prog p
  se arg0 == ""
    msg("Tecle o nome do efeito após EEF")
  senao !p.existe("e_" + arg0)
    msg("Efeito não existe: " + arg0)
  senao e_[txtsub(arg0, x, 1)]:interno
    msg("Efeito não pode ser editado: " + txtsub(arg0, x, 1))
  senao
    var.classe1 = "e_" + txts(txtmin(arg0))
    var.menufim = "menu_efeito"
    m_menu(var.menufim)
  fimse
  ret 1


classe menu_efeito
const titulo = "Efeito " + txt(var.classe1, 2)
const colunas = 25
#
const nome1 = "Nome"
const info1 = "Nome que aparece no comando efeitos"
const tipo1 = "linha"
const clas1 = var.classe1
const vari1 = "e_nome"
#
const nome2 = "Descrição"
const info2 = "Uma breve descrição do que faz; aparece no comando lef"
const tipo2 = "linha"
const clas2 = var.classe1
const vari2 = "desc"
#
const nome3 = "Condição"
const tipo3 = "opcao"
const clas3 = var.classe1
const vari3 = "condicao"
const extr3 = "Nenhuma\nDurante a batalha\nFora da batalha"
const exec3 = "ajustacond"
#
const nome4 = "Quantidade máx."
const info4 = "Quantos efeitos desse tipo um personagem pode ter"
const tipo4 = "numero"
const clas4 = var.classe1
const vari4 = "maximo"
const extr4 = "1 10"
#
const nome5 = "Duração"
const info5 = "Quantos décimos de segundo o efeito dura ou 0 se não expira"
const tipo5 = "numero"
const clas5 = var.classe1
const vari5 = "tempo1"
const extr5 = "0 10000"
#
const nome6 = "Duração por nível"
const info6 = "Quantos décimos de segundo dura para cada nível de quem lançou"
const tipo6 = "numero"
const clas6 = var.classe1
const vari6 = "tempo2"
const extr6 = "0 10000"
#
const nome7 = "Atrib diversos"
const tipo7 = "atribcomum"
const clas7 = var.classe1
const vari7 = "recalc_auto"
const exec7 = "recalc_ajusta"
#
const nome8 = "Atrib ataque"
const info8 = "Afetam os danos quando o personagem ataca alguém"
const tipo8 = "atribatk"
const clas8 = var.classe1
const vari8 = "recalc_auto"
const exec8 = "recalc_ajusta"
#
const nome9 = "Atrib defesa"
const info9 = "Afetam os danos quando alguém ataca o personagem"
const tipo9 = "atribdef"
const clas9 = var.classe1
const vari9 = "recalc_auto"
const exec9 = "recalc_ajusta"
#
const nome10 = "Tempo reduzir"
const info10 = "De quantos em quantos décimos de segundo reduz algo"
const tipo10 = "numero"
const clas10 = var.classe1
const vari10 = "r_tempo"
const extr10 = "0 10000"
#
const nome11 = "Reduz vida"
const tipo11 = "numero"
const clas11 = var.classe1
const vari11 = "r_vida"
#
const nome12 = "Reduz mana"
const tipo12 = "numero"
const clas12 = var.classe1
const vari12 = "r_mana"
#
const nome13 = "Reduz vigor"
const tipo13 = "numero"
const clas13 = var.classe1
const vari13 = "r_move"
#
const nome14 = "Msg criou"
const info14 = "Mensagem quando o personagem recebe o efeito"
const tipo14 = "linha"
const clas14 = var.classe1
const vari14 = "msgini"
#
const nome15 = "Msg sem efeito"
const info15 = "Mensagem quando não foi possível criar efeito no personagem"
const tipo15 = "linha"
const clas15 = var.classe1
const vari15 = "msgnulo"
#
const nome16 = "Msg apagou"
const info16 = "Mensagem quando o efeito deixa de existir"
const tipo16 = "linha"
const clas16 = var.classe1
const vari16 = "msgfim"
#
const nome17 = "Msg reduz"
const info17 = "Mensagem quando reduz vida, mana ou vigor"
const tipo17 = "linha"
const clas17 = var.classe1
const vari17 = "msgreduz"
#
const nome18 = "Eventos perso"
const info18 = "Se recebe eventos do personagem que está com o efeito"
const tipo18 = "simnao"
const clas18 = var.classe1
const vari18 = "evperso"
const exec18 = "ajustaev"


classe comum_efeito
# Efeitos que afetam os personagens
sav listaitem idono # Uso interno: aonde o objeto está
listaitem evrec # Usado internamente, para receber eventos
intexec recalc # Se deve acertar os eventos que recebe
const dono = idono.objlista # Personagem que contém esse efeito
const jogsav = 1 != condicao # Se deve salvar o efeito ao salvar personagem do jogador
sav inttempo t_reduzir # Tempo para a próxima redução
sav inttempo t_duracao # Duração do efeito
# const evperso = 1 # Receber eventos do personagem
const maximo = 1
intexec evini # Para inicializar o efeito

func ini # Cria efeito
# arg0 = personagem que receberá o efeito
# arg1 = nível de quem usou o efeito
  evini = 1, t_duracao = int(arg1) * tempo2 + tempo1, t_reduzir = r_tempo
  !(idono = ref(arg0).dentro2.addini(este)) && apagar(este)

func evini_exec # Inicializa efeito
  refvar r = ref(dono.dono.perso ? dono.dono : dono)
  se dono.dentro2.total(este) > maximo || int(condicao) == (r.atkenv ? 1 : 2)
    apagar(este)
    evini = 1
    msgnulo && $mens.p(r, dono) + $mens.mvis1(msgnulo)
  senao
    evperso && (evrec = dono.evento.addfim(este))
    dono.recalc = 1
    msgini && $mens.p(r, dono) + $mens.mvis1(msgini)

func fim # Apaga efeito
  se msgfim && !evini
    refvar r = ref(dono.dono.perso ? dono.dono : dono)
    $mens.p(r, dono)
    $mens.mvis1(msgfim)
    dono.recalc = 1

func ajustaev # Acerta eventos
  evrec.remove, evperso && (evrec = dono.evento.addfim(este))

func ajustacond # Acerta constantes inicond e fimcond
  prog p
  casovar int(condicao)
  casose "1"
    p.apagar(este, "inibat")
    p.criar(este, "const fimbat = apagar(este)")
    ret
  casose "2"
    p.criar(este, "const inibat = apagar(este)")
    p.apagar(este, "fimbat")
    ret
  casose
    p.apagar(este, "inibat")
    p.apagar(este, "fimbat")
  casofim
  config:salvar

func t_duracao_exec # Efeito expirou: apaga efeito
  apagar(este)

func t_reduzir_exec # Executa redução
  t_reduzir = r_tempo
  se msgreduz
    refvar r = ref(dono.dono.perso ? dono.dono : dono)
    $mens.p(r, dono)
    $mens.mvis1(msgreduz)
  fimse
  dono.pmana -= r_mana
  dono.pmove -= r_move
  se dono.pvida
    dono.pvida -= r_vida
    dono.acertapos(1)


classe e_apagar
# Efeito usado internamente:
# Apaga o personagem depois de um tempo sem jogador por perto
# Se o personagem for capturado, esse efeito desaparece
#
sav listaitem idono # Uso interno: aonde o objeto está
listaitem evrec.2 # Usado internamente, para receber eventos
const dono = idono.objlista # Personagem que contém esse efeito
const interno = 1 # Para não ser editável e apagável
const desc = "Usado internamente: apaga PNJ após um tempo sem jogador na sala"
const jogsav = 0 # Não salvar o efeito ao salvar o personagem
inttempo tatual # Contagem de tempo para apagar o personagem
uint16 tapaga # Tempo para apagar o personagem
intexec recalc # Se deve acertar os eventos que recebe
# func fim
# telatxt t
# t.msg("Efeito apagado\n")

func ini # Cria efeito
# arg0 = personagem que receberá o efeito
# arg1 = quanto tempo para apagar o personagem, em décimos de segundo
  idono = ref(arg0).dentro2.addini(este) # Adiciona como personagem
  !dono && apagar(este) # Apaga se não tiver dono
  evrec.0 = dono.evento.addfim(este)
  evrec.1 = dono.dono.evento.addfim(este)
  tapaga = arg1, !dono.dono.socktot && (tatual = tapaga) # Acerta tempo

const cmd_saiu = recalc = 1 # Alguém saiu da sala

func recalc_exec # Acerta eventos
  dono.dono.socktot ? (tatual = 0) : !tatual && (tatual = tapaga)

func cmd_chegou # Alguém mudou de sala: acerta eventos do dono do personagem
  ret dono.dono.perso, apagar(este) # Apaga se pertence a jogador
  evrec.1.remove, evrec.1 = dono.dono.evento.addfim(este) # Acerta eventos
  dono.dono.socktot ? (tatual = 0) : !tatual && (tatual = tapaga)

func tatual_exec # Apaga personagem
  apagar(este), apagar(dono)
