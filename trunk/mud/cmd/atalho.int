classe cmd_atalho
herda comando_comum
const posic = 0
const txtajuda = "\b\c3Atalho\b\n\
Sintaxe: ATALHO\n\
         ATALHO <nome>\n\
         ATALHO <nome> <comandos>\n\
         ATALHO LIMPAR\n\
         !\n\n\
O sinal de exclamação repete o último comando que você digitou.\n\n\
Já o comando ATALHO, permite definir atalhos para os comandos que você usa\n\
frequentemente. Para criar um atalho, basta teclar a palavra atalho seguido\n\
de um nome qualquer e o comando. Assim, sempre que você digitar o nome,\n\
o efeito será o mesmo que digitar o comando correspondente.\n\n\
Para apagar um atalho, basta digitar a palavra atalho seguido do nome.\n\n\
Para apagar todos os atalhos, digite atalho limpar.\n\n\
Digitando apenas a palavra atalho, mostra todos os atalhos definidos.\n\n\
As seguintes sequências de caracteres tem um significado especial:\n\
 \c2$1\b  Primeira palavra digitada após o nome do atalho\n\
 \c2$2\b  Segunda palavra digitada após o nome do atalho\n\
 \c2$3\b a \c2$9\b  Terceira à nona palavra digitada após o nome do atalho\n\
 \c2$0\b  Todas as palavras\n\
 \c2$S\b  Da segunda palavra em diante\n\
 \c2$T\b  Da terceira palavra em diante\n\
 \c2$Z\b  Uma quebra de linha (para separar dois comandos)\n\
 \c2$$\b  O Caracter $\n\n\
Exemplos:\n\n\
atalho med sentar $Z meditar\n\
  Cria o atalho med. Depois disso, digitar med terá o mesmo efeito\n\
  de digitar sentar, e em seguida, digitar meditar.\n\n\
atalho con lançar \"raio confusão\" $1\n\
  Cria o atalho chamado con. Digitando, por exemplo, con silva,\n\
  terá o mesmo efeito de digitar lançar \"raio confusão\" silva.\n\n\
atalho med\n\
  Apaga o atalho med, se existir."

func escr
  se !arg1
    textotxt t
    txt100 nome
    nome = arg0.var.ini("t_")
    enquanto txt(nome, 0, 2) == "t_"
      t.addfim(txt(nome, 2) + " " + arg0.var.[nome])
      nome = arg0.var.depois(nome)
    efim
    ret t.linhas == 0, arg0.msg("Nenhum atalho definido.")
    arg0.msg("Atalhos:\n" + t.remove(1000))
  senao arg1 == "limpar"
    ret !arg0.var.ini("t_"), arg0.msg("Nenhum atalho definido.")
    arg0.var.limpar("t_")
    arg0.msg("Atalhos apagados.")
  senao !txt2(arg1)
    ret !arg0.var.t_[arg1], arg0.msg("Atalho não foi definido: " + arg1)
    arg0.var.t_[arg1] = ""
    arg0.msg("Atalho apagado: " + arg1)
  senao txt1(arg1) == "atalho"
    arg0.msg("Não é possível criar um atalho chamado atalho.")
  senao txtproc(txt1(arg1), "=") >= 0
    arg0.msg("Nomes de atalhos não podem ter o sinal de igual.")
  senao arg0.var.t_[txt1(arg1)]
    arg0.var.t_[txt1(arg1)] = txt2(arg1)
    arg0.msg("Atalho mudado: " + arg1)
  senao
    uint16 total
    txt100 nome
    total = config:atalhos, nome = arg0.var.ini("t_")
    enquanto txt(nome, 0, 2) == "t_"
      ret !(total -= 1), arg0.msg("Atingido limite de atalhos.")
      nome = arg0.var.depois(nome)
    efim
    arg0.var.t_[txt1(arg1)] = txt2(arg1)
    arg0.msg("Criado atalho: " + arg1)
