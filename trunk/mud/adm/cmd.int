classe adm_cmd
herda comando_adm, comando_comum
const txtajuda = "\b\c3Cmd\b\n\
Sintaxe: CMD <comando>\n\
Executa comando na linguagem do IntMUD e mostra o resultado.\n\
O objeto \"este\" é sempre o seu personagem."

func escr
  se txtsepara(arg1, "L+DLEOV,DLEOV+L", "\b") != arg1
    cmdlog(arg0, "cmd", arg1)
  fimse
  debug d
  arg0.msg(">" + d.cmd(arg0, "ret " + arg1))


classe adm_cmdj
herda comando_adm, comando_comum
const txtajuda = "\b\c3Cmdj\b\n\
Sintaxe: CMDJ <personagem jogador> <comando>\n\
Executa comando na linguagem do IntMUD e mostra o resultado."

func escr
  se !txt2(arg1)
    ret arg0.msg("Digite CMDJ seguido do nome do personagem jogador e o comando")
  fimse
  indiceitem item
  item.ini("pn " + txtnome(txt1(arg1)))
  se !item.obj
    ret arg0.msg("Jogador inexistente ou ausente: " + txt1(arg1))
  senao txtsepara(txt2(arg1), "L+DLEOV,DLEOV+L", "\b") != txt2(arg1)
    cmdlog(arg0, "cmdj", arg1)
  fimse
  debug d
  arg0.msg(txt(item.obj.nome) + ">" + d.cmd(item.obj, "ret " + txt2(arg1)))


classe adm_cmdp
herda comando_adm, comando_comum
const txtajuda = "\b\c3Cmdp\b\n\
Sintaxe: CMDP <personagem da sala> <comando>\n\
Executa comando na linguagem do IntMUD e mostra o resultado."

func escr
  listaobj l
  ref r
  nomeobj n # Para reconhecer os itens
  se !txt2(arg1)
    ret arg0.msg("Digite CMDP seguido do nome do personagem e o comando")
  fimse
  n.ini(txt1(arg1), 1000000)
  l.addfim(arg0.dono.dentro2)
  enquanto l
    r = l.objini, l.ini.remove
    continuar !r.visivel(arg0) || !n.nome(r.ident, r.objtot)
    se txtsepara(txt2(arg1), "L+DLEOV,DLEOV+L", "\b") != txt2(arg1)
      cmdlog(arg0, "cmdp", arg1)
    fimse
    debug d
    ret arg0.msg(txt(r.nome) + ">" + d.cmd(r, "ret " + txt2(arg1)))
  efim
  arg0.msg("Não há nenhum personagem chamado " + txt1(arg1))
