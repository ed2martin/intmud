classe adm_cod
# Edição do código e comandos gerais de administração
#
const adm_ = "\b\c3Páginas de administração\b\n\
Para ler tecle ADM seguido do nome de um tópico.\n\
Os tópicos são:\n\
  \c2AREA\b     Áreas\n\
  \c2SALA\b     Salas\n\
  \c2SAI\b      Saídas das salas\n\
  \c2ITEM\b     Itens\n\
  \c2TIPO\b     Tipos de personagens\n\
  \c2PERSO\b    Personagens não jogador\n\
  \c2RESET\b    Reset de área ou sala\n\
  \c2HAB\b      Habilidades e magias\n\
  \c2EFEITO\b   Efeitos\n\
  \c2SOCIAL\b   Comandos sociais\n\
  \c2COD\b      Edição do código fonte\n\
  \c2JOG\b      Comandos para jogadores\n\
  \c2OUTROS\b   Outros comandos\n\
  \c2MENS\b     Caracteres especiais em mensagens\n\
  \c2CORES\b    Cores em mensagens"
# \c2INFO\b     Informações sobre o MUD"
#
const adm_jog = "\c3Comandos para jogadores\b\n\
\c2TELE\b <sala ou jogador>\n\
  Teletransporta para uma sala específica ou para aonde um jogador está.\n\
\c2TELE\b <jogador> <sala>\n\
  Transporta um jogador para uma sala.\n\
\c2AC\b <texto>\n\
  Envia mensagem para o canal de administração; vide comando CONFIG\n\
\c2ECHO\b <texto>\n\
  Envia texto para todos os jogadores.\n\
\c2MUDANOME\b <nome atual> <novo nome>\n\
  Muda o nome do personagem de um jogador.\n\
\c2MONIT\b [jogador]\n\
  Monitora um jogador, permitindo ver o que ele lê e escreve.\n\
  Se [jogador] estiver ausente ou for o próprio, deixa de monitorar.\n\
  O principal objetivo é auxiliar outros usuários, por isso quando\n\
  esse comando é usado, todos os administradores são informados.\n\
  O comando QUEM também mostra aos administradores quem está monitorando.\n\
\c2ESCR\b <comando>\n\
  Digita um comando no teclado do usuário sendo monitorado."
#
const adm_outros = "\c3Outros comandos\b\n\
\c2ECONFIG\b\n\
  Edita as configurações do MUD.\n\
\c2SERV\b\n\
  Mostra informações sobre o estado atual do MUD.\n\
\c2INFO\b\n\
  Informações sobre a sala.\n\
\c2INFO\b <personagem ou item>\n\
  Informações sobre personagem ou item.\n\
\c2ESTAT\b <personagem>\n\
  Mostra estatísticas de um personagem que está na sala.\n\
\c2MATAR1\b <personagem ou item>\n\
  Apaga personagem ou item.\n\
\c2MATAR2\b <personagem>\n\
  Mata instantaneamente personagem.\n\
\c2CMD\b <comando>\n\
\c2CMDP\b <personagem da sala> <comando>\n\
\c2CMDJ\b <personagem jogador> <comando>\n\
  Executa comando na linguagem do IntMUD e mostra o resultado.\n\
\c2MUDLER\b\n\
  Recarrega arquivos do MUD que foram alterados.\n\
  Nota: Outra forma de reclarregar os arquivos é pressionar a tecla F10\n\
  na janela do IntMUD."
#
const adm_mens = "\b\c3Caracteres especiais em mensagens\b\n\n\
As seguintes sequências de caracteres têm um significado especial:\n\
 \c2$$\b  Símbolo $\n\
 \c2$P\b  Nome do personagem\n\
 \c2$Q\b  Nome do personagem sem citar o dono\n\
 \c2$R\b  Nome do personagem no comando QUEM\n\
 \c2$A\b  Nome do alvo\n\
 \c2$B\b  Nome do alvo sem citar o dono\n\
 \c2$C\b  Nome do alvo no comando QUEM\n\
 \c2$O\b  Nome do objeto\n\
 \c2$S\b  Depende do personagem: o, a, um ou uma\n\
 \c2$T\b  Depende do alvo: o, a, um ou uma\n\
 \c2$U\b  Depende do objeto: o, a, um ou uma\n\
 \c2$V\b  Depende do personagem: e ou a\n\
 \c2$W\b  Depende do alvo: e ou a\n\
 \c2$X\b  Depende do objeto: e ou a\n\
 \c2$M\b  Mensagem; somente comandos que usam uma mensagem digitada por alguém\n\n\
Quando o símbolo $ for seguido de uma letra minúscula, a primeira letra\n\
do texto não é transformada em maiúscula."
#
const adm_cores = "\b\c3Cores em mensagens\b\n\n\
É possível definir as cores dos caracteres e do fundo nas mensagens.\n\
Entretanto, não há suporte a cores no Papovox, nem para os usuários\n\
que jogarem através de um chat.\n\n\
As seguintes sequências de caracteres mudam a cor das letras:\n\
 \\c0  \c7Preto\b             \\c1  \c1Vermelho\b          \\c2  \c2Verde\b\n\
 \\c3  \c3Marrom\b            \\c4  \c4Azul\b              \\c5  \c5Magenta\b\n\
 \\c6  \c6Ciano\b             \\c7  \c7Branco\b            \\c8  \c8Cinza\b\n\
 \\c9  \c9Vermelho intenso\b  \\ca  \caVerde intenso\b     \\cb  \cbAmarelo\b\n\
 \\cc  \ccAzul intenso\b      \\cd  \cdMagenta intenso\b   \\ce  \ceCiano intenso\b\n\
 \\cf  \cfBranco intenso\b\n\n\
As seguintes sequências de caracteres mudam a cor de fundo:\n\
 \\d0  \d0Preto\b             \\d1  \d1Vermelho\b          \\d2  \d2Verde\b\n\
 \\d3  \d3Marrom\b            \\d4  \d4Azul\b              \\d5  \d5Magenta\b\n\
 \\d6  \d6Ciano\b             \\d7  \c0\d7Branco\b\n\n\
As seguintes sequências de caracteres mudam outros atributos:\n\
 \"    Aspas duplas\n\
 \\\\   Barra invertida: \\\n\
 \\b   Caracteres brancos sob fundo preto sem piscante, sublinhado e inverso\n\
 \\cg  Liga o sublinhado (um traço horizontal em baixo)\n\
 \\ch  Desliga o sublinhado\n\
 \\ci  Liga inversão de frente com fundo (troca cores de frente com fundo)\n\
 \\cj  Desliga inversão de frente com fundo\n\
 \\ck  Liga texto piscante\n\
 \\cl  Desliga texto piscante"
#
const adm_cod = "\b\c3Comandos de edição do código\b\n\
\c2lcl\b [nome]\n\
  Lista as classes existentes.\n\
\c2ccl\b <nome> [arquivo]\n\
  Cria classe. Aquivo é o sufixo do arquivo aonde criar a classe.\n\
  Se for omitido, cria no arquivo mud.int.\n\
\c2acl\b <nome>\n\
  Apaga classe.\n\
\c2ecl\b [nome]\n\
  Edita uma classe.\n\
\c2herda\b <nome>\n\
  Edita herança de uma classe (uma classe herdada por linha).\n\
\c2lfunc\b <nome>\n\
  Lista funções de uma classe.\n\
\c2lfunc2\b <nome>\n\
  Lista todas funções de uma classe, inclusive as herdadas."

func cmd_adm
  prog p
  se p.inifunctudo(este, "adm_" + arg0)
    msg2([p.texto])
  senao
    msg("\bTópico de administração desconhecido: " + arg0)
  fimse
  ret 1

func cmd_serv # Informações sobre o servidor
  debug d
  txtmais.limpar
  txtmais.addfim("\b\c3Estado atual do MUD:\b")
  txtmais.addfim("Memória usada:  " + txtnum(d.mem, ".") + " bytes")
  txtmais.addfim("Memória máxima: " + txtnum(d.memmax, ".") + " bytes")
  txtmais.addfim("Processador (stempo): " + d.stempo / 1000 + " seg.")
  txtmais.addfim("Processador (utempo): " + d.utempo / 1000 + " seg.")
  txtmostra
  ret 1

func cmd_tele # Ir para uma sala específica
  ref p # Personagem
  ref s # Sala destino
  indiceitem item
# Transportar um jogador para uma sala
  se txt2(arg0)
    item.ini("pn " + txtnome(txt1(arg0)))
    p = item.obj, s = $s_[txt2(arg0)]
    se !p
      msg("Jogador inexistente ou ausente: " + txt1(arg0))
    senao !s
      msg("\bSala não existe: " + txt2(arg0))
    senao s == p.dono
      msg(p.nome + " já está em " + txt(s, 2) + ".")
      s = nulo
    fimse
# Transportar-se para uma sala
  senao arg0
    p = perso, s = $s_[arg0]
    se !p
      msg("Você deve estar controlando um personagem para isso")
    senao !s
      item.ini("pn " + txtnome(arg0))
      s = item.obj.dono
      !s && msg("\bSala ou jogador não existe: " + arg0)
    fimse
    se s && s == p.dono
      msg("Você já está em " + txt(s, 2) + ".")
      s = nulo
    fimse
  senao
    msg("Teletransportar quem? Para onde?")
  fimse
# Realiza o teletransporte
  se p && s
    $mens.p(p, perso)
    p != perso && p.msginv("$A teletransporta você.")
    !(p.bitver & 256) && $mens.mvis2("", "$P some em um redemoinho de fumaça.")
    p.mudadono(s)
    !(p.bitver & 256) && $mens.mvis2("", "$P aparece de um redemoinho de fumaça.")
  fimse
  ret 1

func cmd2_info # Usado por cmd_info
  txt512 lin
  lin = "Peso:   obj=" + arg0.pesoobj + "  dentro=" + arg0.pesoden
  lin += "  total=" + arg0.pesotot + "  voando=" + (arg0.pesoadd ? "N" : "S")
  lin += "\nVolume: obj=" + arg0.volobj + "  dentro=" + arg0.volden
  lin += "  total=" + arg0.voltot + "  expande=" + (arg0.volexp ? "S" : "N")
  lin += "\nQuantidade=" + arg0.objtot + "  Jogadores=" + arg0.socktot
  lin += "  Itens dentro=" + arg0.dentro1.total + "  Personagens dentro=" + arg0.dentro2.total
  lin += "  objnum=" + arg0.objnum
  lin += "\nevento="
  listaitem i
  epara i = arg0.evento.ini, i, i.depois
    lin += txt(i.obj) + " "
  efim
  lin += "\nevrec.0=" + arg0.evrec.0.objlista
  lin += "  evrec.1=" + arg0.evrec.1.objlista
  ret lin

func cmd_info
  se !arg0
# msg("\b\c2Você:\b\n" + cmd2_info(perso))
    msg("\c2Sala " + perso.dono + ":\b\n" + cmd2_info(perso.dono))
    ret 1
  fimse
  int1 achou
  listaobj l
  ref r
  nomeobj n # Para reconhecer os itens
  n.ini(arg0, 1000000)
  r = perso
  l.addfim(r.dono.dentro1, r.dono.dentro2, r.dentro1)
  enquanto l
    r = l.objini, l.ini.remove
    continuar !r.visivel(perso) || !n.nome(r.ident, r.objtot)
    msg("\b\c2" + r.nome + ": " + r + "\b\n" + cmd2_info(r))
    achou = 1
  efim
  !achou && msg("Não há nenhum personagem ou item chamado " + arg0)
  ret 1

func cmd_matar1
  listaobj l
  ref r
  nomeobj n # Para reconhecer os itens
  n.ini(arg0, 1000000)
  r = perso
  l.addfim(r.dono.dentro1, r.dono.dentro2, r.dentro1)
  enquanto l
    r = l.objini, l.ini.remove
    continuar !r.visivel(perso) || !n.nome(r.ident, r.objtot)
    msg("Apagando " + r.nome), apagar(r)
    ret 1
  efim
  msg("Não há nenhum personagem ou item chamado " + arg0)
  ret 1

func cmd_matar2
  listaobj l
  ref r
  nomeobj n # Para reconhecer os itens
  n.ini(arg0, 1000000)
  l.addfim(perso.dono.dentro2)
  enquanto l
    r = l.objini, l.ini.remove
    continuar !r.visivel(perso) || !n.nome(r.ident, r.objtot)
    msg("Matando " + r.nome), r.morreu
    ret 1
  efim
  msg("Não há nenhum personagem chamado " + arg0)
  ret 1

func cmd_cmd
  cmdlog("(cmd) " + nome + ": " + arg0, arg0)
  debug d
  msg(">" + d.cmd(perso, "ret " + arg0))
  ret 1

func cmd_cmdj
  se !txt2(arg0)
    msg("Digite CMDJ seguido do nome do personagem jogador e o comando")
    ret 1
  fimse
  indiceitem item
  item.ini("pn " + txtnome(txt1(arg0)))
  se !item.obj
    msg("Jogador inexistente ou ausente: " + txt1(arg0))
    ret 1
  fimse
  cmdlog("(cmdj) " + nome + ": " + arg0, txt2(arg0))
  debug d
  msg(txt(item.obj.nome) + ">" + d.cmd(item.obj, "ret " + txt2(arg0)))
  ret 1

func cmd_cmdp
  listaobj l
  ref r
  nomeobj n # Para reconhecer os itens
  se !txt2(arg0)
    msg("Digite CMDP seguido do nome do personagem e o comando")
    ret 1
  fimse
  n.ini(txt1(arg0), 1000000)
  l.addfim(perso.dono.dentro2)
  enquanto l
    r = l.objini, l.ini.remove
    continuar !r.visivel(perso) || !n.nome(r.ident, r.objtot)
    cmdlog("(cmdp) " + nome + ": " + arg0, txt2(arg0))
    debug d
    msg(txt(r.nome) + ">" + d.cmd(r, "ret " + txt2(arg0)))
    ret 1
  efim
  msg("Não há nenhum personagem chamado " + txt1(arg0))
  ret 1

func cmd_ac
  se !jogconfig.19
    msg("Canal AC está desabilitado.")
  senao !arg0
    msg("Tecle a mensagem após AC.")
  senao
    indiceitem item
    epara item.ini("un "), txt1(item.txt) == "un", item.depois
      item.obj.jogconfig.19 && item.obj.msg("(ac) " + nome + ": " + arg0)
    efim
  fimse
  ret 1

func cmd_econfig
  m_menu("menu_econfig")
  ret 1

func cmd_echo
  se !arg0
    msg("\bTecle a mensagem após ECHO.")
  senao
    $mens.p(perso)
    $mens.mens = arg0
    indiceitem item
    epara item.ini("un "), txt1(item.txt) == "un", item.depois
      item.obj.msg($mens.proc(config:echomsg, item.obj.perso))
    efim
  fimse
  ret 1

func cmd_mudler
  $mudaprog.exec
  ret 1

func cmd_mudanome
  se intsub(arg0) != 2
    msg("Tecle mudanome seguido do nome atual e o novo nome")
    ret 1
  fimse
  indiceitem ind
  txt20 nome.2 # Nome não codificado
  txt20 codif.2 # Nome codificado
  arqsav sav1
# Obtém os nomes
  nome.0 = txtmaimin(txt1(arg0))
  nome.1 = txtmaimin(txt2(arg0))
  codif.0 = txtnome(nome.0)
  codif.1 = txtnome(nome.1)
# Checa se o segundo personagem já existe
  se nome.0 == nome.1
    msg("Os dois nomes correspondem ao mesmo personagem.")
    ret 1
  senao inttotal(nome.1) < 3 || inttotal(nome.1) > 16
    msg("O novo nome deve ter de 3 a 16 caracteres.")
    ret 1
  senao intnome(nome.1)
    msg("O novo nome não é válido.")
    ret 1
  senao ind.obj("un " + codif.1)
    msg("Personagem " + nome.1 + " já está sendo usado.")
    ret 1
  senao codif.0 != codif.1 && sav1.existe("sav/" + codif.1 + ".sav")
    msg("Personagem " + nome.1 + " já existe.")
    ret 1
  fimse
# Jogador online
  uint8 mudou
  se ind.obj("un " + codif.0)
    ref r
    r = ind.obj("un " + codif.0)
    r.cnome = "un " + codif.1
    r.nome = nome.1
    r.perso.cnome = "pn " + codif.1
    r.perso.nome = nome.1
    mudou = 1
  fimse
# Jogo salvo
  se sav1.existe("sav/" + codif.0 + ".sav")
    textotxt t
    textopos p
    t.ler("sav/" + codif.0 + ".sav")
    p = t.ini
    p.txtproc("\nnome=") >= 0 && p.mudar(nome.1, 5, 100)
    t.salvar("sav/" + codif.1 + ".sav")
    codif.0 != codif.1 && sav1.apagar("sav/" + codif.0 + ".sav")
    mudou = 1
  fimse
# Informa se mudou
  se !mudou
    msg("Personagem " + nome.0 + " não existe.")
  senao
    msg("Personagem " + nome.0 + " mudou para " + nome.1 + ".")
    admlog("mudou personagem jogador " + nome.0 + " para " + nome.1)
  fimse
  ret 1

func cmd_monit
  indiceitem item
  ref r
  r = item.obj("pn " + txtnome(arg0))
  se !arg0 || r == perso
    se imonit
      txt100 t1
      t1 = imonit.objlista.perso.nome
      imonit.remove
      msg("Deixando de monitorar " + t1)
      t1 = "*** " + perso.nome + " deixa de monitorar " + t1
      epara item.ini("un "), txt1(item.txt) == "un", item.depois
        item.obj.jogconfig.23 && item.obj != este && item.obj.msg(t1)
      efim
    senao
      msg("Não está monitorando ninguém")
    fimse
  senao !r
    msg("Jogador não encontrado: " + arg0)
  senao r == imonit.objlista.perso
    msg("Já está monitorando " + r.nome)
  senao
    imonit && msg("Deixando de monitorar " + imonit.objlista.perso.nome)
    imonit.remove
    txt100 t1
    t1 = "*** " + perso.nome + " monitora " + r.nome
    epara item.ini("un "), txt1(item.txt) == "un", item.depois
      item.obj.jogconfig.23 && item.obj != este && item.obj.msg(t1)
    efim
    imonit = r.sock.lmonit.addini(este)
    msg("Monitorando " + r.nome)
  fimse
  ret 1

func cmd_escr
  se !imonit
    msg("Você não está monitorando ninguém")
  senao !arg0
    msg("Tecle a mensagem após ESCR")
  senao
    imonit.objlista.msg("*** " + perso.nome + " escreve no seu teclado: " + arg0)
    imonit.objlista.recebe(arg0)
  fimse
  ret 1

func admlog # Mensagem para todos com a opção "config +admlog"
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    item.obj.jogconfig.21 && item.obj.msg("\b\d1(adm) " + nome + " " + arg0 + "\b")
  efim

func cmdlog # Mensagem para todos com a opção "config +cmdlog"
# arg0 = texto que será enviado aos usuários
# arg1 = comando (se não tiver nenhuma letra, não envia o texto)
  se txtproc(txtsepara(txttroca(arg1, " ", ""), "L+DLEOV,DLEOV+L"), " ") >= 0
    indiceitem item
    epara item.ini("un "), txt1(item.txt) == "un", item.depois
      item.obj.jogconfig.22 && item.obj.msg("\b\d4" + arg0 + "\b")
    efim

func cmd_lcl # Listar classes
  prog p
  txt80 lin
  se !p.iniclasse(arg0)
    msg("\bNenhuma classe encontrada.")
  senao
    txt100 lin
    debug d
    d.exec = 50000
    txtmais.limpar
    lin = p.texto
    epara p.depois, p.lin, p.depois
      txtmais.addfim(lin + ","), lin = p.texto
    efim
    txtmais.addfim(lin)
    txtmais.juntar
    txtmais.dividelin(50, 70)
    txtmais.addini("\bClasses:")
    txtmostra
  fimse
  ret 1

func cmd_ccl # Cria classe
  prog p
  se !arg0
    msg("\bDigite o nome da classe após CCL")
  senao p.existe(txt1(arg0))
    msg("\bClasse já existe: " + txt1(arg0))
  senao
    tpasso = arg0
    p_ccl("")
  fimse
  ret 1

func p_ccl
  passo = ""
  se arg0 == "n"
    msg("Cancelado")
  senao arg0 == "s"
    textotxt t
    prog p
    t.addfim(p.criar(txt1(tpasso) + "\n" + txt2(tpasso)))
    se t.bytes > 1
      msg2("Erro ao criar:\n" + t.remove(1000))
    senao
      msg("Classe criada: " + txt1(tpasso))
      config:salvar
      admlog("criou classe " + txt1(passo))
    fimse
  senao
    msg("Criar classe " + txt1(tpasso) + " ? Tecle S ou N")
    passo = "ccl"
  fimse
  ret 1

func cmd_acl # Apaga classe
  prog p
  se !arg0
    msg("\bDigite o nome da classe após ACL")
  senao !p.existe(arg0)
    msg("\bClasse não existe: " + arg0)
  senao
    tpasso = arg0
    p_acl("")
  fimse
  ret 1

func p_acl
  passo = ""
  se arg0 == "n"
    msg("Cancelado")
  senao arg0 == "s"
    prog p
    se !p.apagar(tpasso)
      msg("Erro ao apagar " + tpasso)
    senao
      msg("Classe apagada " + tpasso)
      config:salvar
      admlog("apagou classe " + tpasso)
    fimse
  senao
    msg("Apagar classe " + tpasso + " ? Tecle S ou N")
    passo = "acl"
  fimse
  ret 1

func cmd_ecl # Edita uma classe
  prog p
  se !arg0
    msg("\bDigite o nome da classe após ECL")
  senao !p.existe(arg0)
    msg("\bClasse não existe: " + arg0)
  senao
    var.opcnome = ""
    var.opcclasse = txts(arg0)
    p_classe("\b")
  fimse
  ret 1

func cmd_lfunc # Listar funções
  prog p
  se !arg0
    msg("\bDigite o nome da classe após LFUNC")
  senao !p.existe(arg0)
    msg("\bClasse não existe: " + arg0)
  senao !p.inifunc(arg0)
    msg("\bNenhuma função encontrada.")
  senao
    textotxt t
    t.addfim("\bFunções de " + arg0 + ":")
    enquanto p.lin
      t.addfim(p.vartipo(arg0, p.texto) + " " + p.texto)
      p.depois
    efim
    lin && t.addfim(lin)
    msg2(t.remove(1000))
  fimse
  ret 1

func cmd_lfunc2 # Listar funções inclusive as herdadas
  prog p
  se !arg0
    msg("\bDigite o nome da classe após LFUNC2")
  senao !p.existe(arg0)
    msg("\bClasse não existe: " + arg0)
  senao !p.inifunctudo(arg0)
    msg("\bNenhuma função encontrada.")
  senao
    textotxt t
    t.addfim("\bFunções de " + arg0 + ":")
    enquanto p.lin
      t.addfim(p.vartipo(arg0, p.texto) + " " + p.texto)
      p.depois
    efim
    lin && t.addfim(lin)
    msg2(t.remove(1000))
  fimse
  ret 1

func cmd_herda
  prog p
  se !arg0
    msg("\bDigite o nome da classe após HERDA")
  senao !p.existe(arg0)
    msg("\bClasse não existe: " + arg0)
  senao
    tpasso = arg0
    p_herda("\b")
  fimse
  ret 1

func p_herda
  casovar txtmin(txt(arg0, 0, 1))
  casose "\b"
    prog p
    teditor.limpar
    epara p.iniherda(tpasso), p.lin, p.depois
      teditor.addfim(p.texto)
    efim
    teditor.bytes == 1 && teditor.limpar
    leditor = teditor.ini
    leditor1 = teditor.ini
    leditor2 = teditor.fim
    leditor2.antes
    passo = "herda"
    msg("Editando herança de " + tpasso + ", O opções, Z sair")
    ret 1
  casose "z" # Sair do editor
    msg("Fechando editor")
    passo = ""
    ret 1
  casose "x" # Salvar o texto
    prog p
    textopos p1
    textotxt t1
    p1 = teditor.ini
    se !p1.lin # Nenhum texto significa apagar herança
      p.inilinha(tpasso)
      txt1(p.texto) == "herda" && p.apagarlin(tpasso, 1)
      config:salvar, msg("Salvou: nenhuma herança")
      admlog("alterou herança da classe " + tpasso)
      ret 1
    fimse
    enquanto p1.lin
      t1.addfim(p1.texto), p1.depois
    efim
    t1.addfim(p.criar(tpasso, "herda " + txttroca(t1.remove(100), "\n", ",")))
    se t1.bytes > 1
      msg2("Erro ao salvar herança:\n" + t1.remove(1000))
    senao
      config:salvar, msg("Salvou herança")
      admlog("alterou herança da classe " + tpasso)
    fimse
    ret 1
  casofim
  ret p_editor(arg0, 200, "Herança")


classe menu_econfig
# Vide arquivo mud.txt, tópico "Criando menus de edição (administração)"
const titulo = "Configurações do MUD"
const colunas = 35
#
const nome1 = "Como ativar o MUD"
const tipo1 = "menu--"
const clas1 = "menu_econfig_ativar"
#
const nome2 = "Senha de administração"
const info2 = "Se vazia, ninguém poderá ser administrador do MUD"
const tipo2 = "linha--"
const clas2 = "config"
const vari2 = "senhaadm"
#
const nome3 = "Sala inicial"
const info3 = "Sala onde os jogadores vão após criar o personagem"
const tipo3 = "sala--"
const clas3 = "config"
const vari3 = "salaini"
#
const nome4 = "Sala quando morre"
const tipo4 = "sala--"
const clas4 = "config"
const vari4 = "salafim"
#
const nome5 = "Continuar jogo salvo sala"
const info5 = "Se acontecer do jogador cair em uma sala inexistente"
const tipo5 = "sala--"
const clas5 = "config"
const vari5 = "salasav"
#
const nome6 = "Animais para batalhar"
const info6 = "Quantos animais pode usar em batalha, de 0 a 8\n\
Se 0, os comandos para animais deixam de existir"
const tipo6 = "numero--"
const clas6 = "config"
const vari6 = "animal1"
const extr6 = "0 8"
#
const nome7 = "Itens por personagem"
const info7 = "Quantos itens cada jogador pode ter, ao todo\n\
Essa opção visa limitar o tamanho dos arquivos dos jogos salvos"
const tipo7 = "numero--"
const clas7 = "config"
const vari7 = "itens"
const extr7 = "1 1000"
#
const nome8 = "Salvar personagem ao criar"
const tipo8 = "simnao--"
const clas8 = "config"
const vari8 = "salvacria"
#
const nome9 = "E-mail"
const info9 = "Para saber o e-mail de um jogador, abra o arquivo sav do jogo salvo\n\
e procure por uma linha que contém o texto z_email"
const tipo9 = "opcao--"
const clas9 = "config"
const vari9 = "email"
const extr9 = "Não pede\nOpcional\nObrigatório"
#
const nome10 = "Config ao criar personagem"
const info10 = "Opções ativas do comando CONFIG quando um jogador cria um personagem"
const tipo10 = "vetor--"
const clas10 = "config"
const vari10 = "jogconfig"
const extr10 = "desc\n\
saidas\n\
cores\n\
acento\n\
chat\n\
seguir\n\
prompt\n\
bprompt\n\
pvt\n\
emocao\n\
moedas\nnovatos"
#
const nome11 = "Atributos dos personagens"
const info11 = "Valor inicial dos atributos para todos os personagens"
const tipo11 = "atribcfg--"
const clas11 = "config"
const vari11 = "atribcfg"
#
const nome12 = "Mensagens"
const tipo12 = "menu--"
const clas12 = "menu_econfig_msg"
#
const nome13 = "Comandos"
const tipo13 = "menu--"
const clas13 = "menu_econfig_comandos"
#
const nome14 = "Ataques e batalha"
const tipo14 = "menu--"
const clas14 = "menu_econfig_ataques"
#
const nome15 = "Aulas por nível"
const info15 = "Quantos pontos de aulas ganha quando sobe de nível\n\
Se 0, o comando aprender não usa pontos de aula"
const tipo15 = "numero--"
const clas15 = "config"
const vari15 = "aulas"
const extr15 = "0 1000"
#
const nome16 = "Tipos de produtos"
const info16 = "Os tipos de produtos (itens) que vendedores podem comprar"
const tipo16 = "txtopcao--"
const clas16 = "config"
const vari16 = "produtos"
const extr16 = "1 30"
#
const nome17 = "Posições para vestir itens"
const info17 = "Os nomes das posições"
const tipo17 = "menu--"
const clas17 = "menu_econfig_vestir"


classe menu_econfig_ativar
const titulo = "Como ativar o MUD"
const menufim = "menu_econfig"
const colunas = 35
#
const nome1 = "Jogar localmente"
const info1 = "Jogar na própria janela que o IntMUD abre\n\
Terá efeito na próxima vez que o MUD for ativado"
const tipo1 = "simnao--"
const clas1 = "config"
const vari1 = "modolocal"
#
const nome2 = "Jogar em uma porta"
const info2 = "Terá efeito na próxima vez que o MUD for ativado"
const tipo2 = "opcao--"
const clas2 = "config"
const vari2 = "modoserv"
const extr2 = "Não\nTelnet\nTelnet e Papovox"
#
const nome3 = "Endereço do MUD"
const info3 = "Para ativar em um endereço, quando seu micro possui vários endereços IP"
const tipo3 = "linha--"
const clas3 = "config"
const vari3 = "servender"
#
const nome4 = "Porta do MUD"
const info4 = "Nota: o programa Papovox só se conecta na porta 1963\n\
Terá efeito na próxima vez que o MUD for ativado"
const tipo4 = "numero--"
const clas4 = "config"
const vari4 = "servporta"
#
const nome5 = "Limite de conexões por IP"
const tipo5 = "numero--"
const clas5 = "config"
const vari5 = "servusr"
#
const nome6 = "Tempo entre duas conexões"
const info6 = "Quantos décimos de segundo para poder conectar-se novamente pelo mesmo IP"
const tipo6 = "numero--"
const clas6 = "config"
const vari6 = "servtempo"
#
const nome7 = "Jogar em um chat"
const info7 = "Somente em chats que suportam bots\n\
Terá efeito na próxima vez que o MUD for ativado"
const tipo7 = "simnao--"
const clas7 = "config"
const vari7 = "modobot"
#
const nome8 = "Endereço do chat"
const tipo8 = "linha--"
const clas8 = "config"
const vari8 = "serv"
#
const nome9 = "Porta do chat"
const tipo9 = "numero--"
const clas9 = "config"
const vari9 = "porta"
#
const nome10 = "Sala do chat"
const tipo10 = "linha--"
const clas10 = "config"
const vari10 = "sala"
#
const nome11 = "Senha da sala do chat"
const info11 = "Se for vazia, o programa pede a senha antes de conectar\n\
Se não for vazia, outros administradores poderão ver a senha"
const tipo11 = "linha--"
const clas11 = "config"
const vari11 = "senha"


classe menu_econfig_msg
const titulo = "Mensagens"
const menufim = "menu_econfig"
const colunas = 35
#
const nome1 = "Apresentação"
const info1 = "Primeira mensagem que o jogador recebe ao entrar no MUD"
const tipo1 = "texto--"
const clas1 = "config"
const vari1 = "apres"
#
const nome2 = "Quando alguém entra avisar"
const info2 = "Quem deve ser informado quando um jogador entra ou sai"
const tipo2 = "opcao--"
const clas2 = "config"
const vari2 = "entrainfo"
const extr2 = "Ninguém\nSomente administradores\nTodos"
#
const nome3 = "Comando Echo"
const tipo3 = "linha--"
const clas3 = "config"
const vari3 = "echomsg"
#
const nome4 = "Canal Chat"
const tipo4 = "linha--"
const clas4 = "config"
const vari4 = "chatmsg"
#
const nome5 = "Canal Novatos"
const tipo5 = "linha--"
const clas5 = "config"
const vari5 = "novatosmsg"
#
const nome6 = "Falar"
const info6 = "Ao teclar falar e uma mensagem qualquer"
const tipo6 = "linha--"
const clas6 = "config"
const vari6 = "falarmsg"
#
const nome7 = "Perguntar"
const info7 = "Ao teclar falar e uma mensagem terminada com interrogação"
const tipo7 = "linha--"
const clas7 = "config"
const vari7 = "perguntarmsg"
#
const nome8 = "Exclamar"
const info8 = "Ao teclar falar e uma mensagem terminada com exclamação"
const tipo8 = "linha--"
const clas8 = "config"
const vari8 = "exclamarmsg"
#
const nome9 = "Ponderar"
const info9 = "Ao teclar falar e uma mensagem terminada com reticências"
const tipo9 = "linha--"
const clas9 = "config"
const vari9 = "ponderarmsg"
#
const nome10 = "Continuar"
const info10 = "Ao teclar falar e uma mensagem começada com reticências"
const tipo10 = "linha--"
const clas10 = "config"
const vari10 = "continuarmsg"


classe menu_econfig_comandos
const titulo = "Comandos"
const menufim = "menu_econfig"
const colunas = 35
#
const nome1 = "Comando Rezar"
const tipo1 = "opcao--"
const clas1 = "config"
const vari1 = "rezartipo"
const extr1 = "Desabilitado\nHabilitado"
#
const nome2 = "Rezar a partir do nível"
const tipo2 = "numero--"
const clas2 = "config"
const vari2 = "rezarnivel"
#
const nome3 = "Comando Chat"
const tipo3 = "opcao--"
const clas3 = "config"
const vari3 = "chattipo"
const extr3 = "Desabilitado\nBots: Somente na mesma sala\nPara todo o MUD"
#
const nome4 = "Chat a partir do nível"
const tipo4 = "numero--"
const clas4 = "config"
const vari4 = "chatnivel"
#
const nome5 = "Comando Novatos"
const tipo5 = "opcao--"
const clas5 = "config"
const vari5 = "novatostipo"
const extr5 = "Desabilitado\nBots: Somente na mesma sala\nPara todo o MUD"
#
const nome6 = "Novatos a partir do nível"
const tipo6 = "numero--"
const clas6 = "config"
const vari6 = "novatosnivel"
#
const nome7 = "Comando Emoção"
const tipo7 = "opcao--"
const clas7 = "config"
const vari7 = "emocaotipo"
const extr7 = "Desabilitado\nHabilitado"
#
const nome8 = "Emoção a partir do nível"
const tipo8 = "numero--"
const clas8 = "config"
const vari8 = "emocaonivel"
#
const nome9 = "Comando Matar"
const tipo9 = "opcao--"
const clas9 = "config"
const vari9 = "matartipo"
const extr9 = "Desabilitado\nHabilitado"
#
const nome10 = "Comando Retornar até nível"
const info10 = "Até que nível pode usar o comando retornar"
const tipo10 = "numero--"
const clas10 = "config"
const vari10 = "retornar"
#
const nome11 = "Comando Quem mostra admin"
const info11 = "Se não administradores podem saber quem é administrador teclando QUEM"
const tipo11 = "simnao--"
const clas11 = "config"
const vari11 = "mostraadm"
#
const nome12 = "Comando Quem mostra imortal"
const info12 = "Se não administradores podem saber quem é imortal teclando QUEM"
const tipo12 = "simnao--"
const clas12 = "config"
const vari12 = "mostraimortal"


classe menu_econfig_ataques
const titulo = "Ataques"
const menufim = "menu_econfig"
const colunas = 35
#
const nome1 = "Experiência ganha"
const info1 = "Quanta experiência os personagens dão quando morrem, em porcentagem"
const tipo1 = "numero--"
const clas1 = "config"
const vari1 = "atkexp"
const extr1 = "0 1000"
#
const nome2 = "Tempo de um turno"
const info2 = "Em décimos de segundo; tempo para chegar a primeira mensagem"
const tipo2 = "numero--"
const clas2 = "config"
const vari2 = "atktempo"
const extr2 = "10 200"
#
const nome3 = "Força do ataque automático"
const info3 = "Usado no modo de batalha for automático"
const tipo3 = "numero--"
const clas3 = "config"
const vari3 = "atkfor"
const extr3 = "1 100"
#
const nome4 = "Tipos de ataques"
const tipo4 = "txtopcao--"
const clas4 = "config"
const vari4 = "atknomes"
const extr4 = "1 20"
#
const nome5 = "Ataques especiais"
const info5 = "Os tipos de ataque que usam ataque e defesa especial"
const tipo5 = "vetor--"
const clas5 = "config"
const vari5 = "atkespecial"
const extr5 = config:atknomes
#
const nome6 = "Tipos de armas"
const info6 = "Habilidades usadas em ataques automáticos com arma"
const tipo6 = "txtopcao--"
const clas6 = "config"
const vari6 = "arma_txt"
const extr6 = "1 30 1"
#
const nome7 = "Tipos de personagens"
const info7 = "Habilidades usadas em ataques automáticos sem arma"
const tipo7 = "txtopcao--"
const clas7 = "config"
const vari7 = "atk_txt"
const extr7 = "0 30"


classe menu_econfig_vestir
const titulo = "Vestir itens"
const menufim = "menu_econfig"
const colunas = 35
#
const nome1 = "Nomes das posições"
const tipo1 = "txtopcao--"
const clas1 = "config"
const vari1 = "equip_txt"
const extr1 = "0 30"
#
const nome2 = "Ordem das posições"
const info2 = "Em que ordem as posições são mostradas no comando equip\n\
A posição 49 corresponde à arma sendo empunhada"
const tipo2 = "linha--"
const clas2 = "config"
const vari2 = "equip_ordem"
#
const nome3 = "Mensagens ao vestir"
const tipo3 = "txtopcao--"
const clas3 = "config"
const vari3 = "equip_vestir"
const extr3 = "0 30"
#
const nome4 = menu_econfig_vestir:sobre(0)
const tipo4 = "vetor--"
const clas4 = "config"
const vari4 = "vestir0"
const extr4 = config:equip_txt
const nome5 = menu_econfig_vestir:sobre(1)
const tipo5 = "vetor--"
const clas5 = "config"
const vari5 = "vestir1"
const extr5 = config:equip_txt
const nome6 = menu_econfig_vestir:sobre(2)
const tipo6 = "vetor--"
const clas6 = "config"
const vari6 = "vestir2"
const extr6 = config:equip_txt
const nome7 = menu_econfig_vestir:sobre(3)
const tipo7 = "vetor--"
const clas7 = "config"
const vari7 = "vestir3"
const extr7 = config:equip_txt
const nome8 = menu_econfig_vestir:sobre(4)
const tipo8 = "vetor--"
const clas8 = "config"
const vari8 = "vestir4"
const extr8 = config:equip_txt
#
const nome9 = menu_econfig_vestir:sobre(5)
const tipo9 = "vetor--"
const clas9 = "config"
const vari9 = "vestir5"
const extr9 = config:equip_txt
const nome10 = menu_econfig_vestir:sobre(6)
const tipo10 = "vetor--"
const clas10 = "config"
const vari10 = "vestir6"
const extr10 = config:equip_txt
const nome11 = menu_econfig_vestir:sobre(7)
const tipo11 = "vetor--"
const clas11 = "config"
const vari11 = "vestir7"
const extr11 = config:equip_txt
const nome12 = menu_econfig_vestir:sobre(8)
const tipo12 = "vetor--"
const clas12 = "config"
const vari12 = "vestir8"
const extr12 = config:equip_txt
const nome13 = menu_econfig_vestir:sobre(9)
const tipo13 = "vetor--"
const clas13 = "config"
const vari13 = "vestir9"
const extr13 = config:equip_txt
#
const nome14 = menu_econfig_vestir:sobre(10)
const tipo14 = "vetor--"
const clas14 = "config"
const vari14 = "vestir10"
const extr14 = config:equip_txt
const nome15 = menu_econfig_vestir:sobre(11)
const tipo15 = "vetor--"
const clas15 = "config"
const vari15 = "vestir11"
const extr15 = config:equip_txt
const nome16 = menu_econfig_vestir:sobre(12)
const tipo16 = "vetor--"
const clas16 = "config"
const vari16 = "vestir12"
const extr16 = config:equip_txt
const nome17 = menu_econfig_vestir:sobre(13)
const tipo17 = "vetor--"
const clas17 = "config"
const vari17 = "vestir13"
const extr17 = config:equip_txt
const nome18 = menu_econfig_vestir:sobre(14)
const tipo18 = "vetor--"
const clas18 = "config"
const vari18 = "vestir14"
const extr18 = config:equip_txt
#
const nome19 = menu_econfig_vestir:sobre(15)
const tipo19 = "vetor--"
const clas19 = "config"
const vari19 = "vestir15"
const extr19 = config:equip_txt
const nome20 = menu_econfig_vestir:sobre(16)
const tipo20 = "vetor--"
const clas20 = "config"
const vari20 = "vestir16"
const extr20 = config:equip_txt
const nome21 = menu_econfig_vestir:sobre(17)
const tipo21 = "vetor--"
const clas21 = "config"
const vari21 = "vestir17"
const extr21 = config:equip_txt
const nome22 = menu_econfig_vestir:sobre(18)
const tipo22 = "vetor--"
const clas22 = "config"
const vari22 = "vestir18"
const extr22 = config:equip_txt
const nome23 = menu_econfig_vestir:sobre(19)
const tipo23 = "vetor--"
const clas23 = "config"
const vari23 = "vestir19"
const extr23 = config:equip_txt
#
const nome24 = menu_econfig_vestir:sobre(20)
const tipo24 = "vetor--"
const clas24 = "config"
const vari24 = "vestir20"
const extr24 = config:equip_txt
const nome25 = menu_econfig_vestir:sobre(21)
const tipo25 = "vetor--"
const clas25 = "config"
const vari25 = "vestir21"
const extr25 = config:equip_txt
const nome26 = menu_econfig_vestir:sobre(22)
const tipo26 = "vetor--"
const clas26 = "config"
const vari26 = "vestir22"
const extr26 = config:equip_txt
const nome27 = menu_econfig_vestir:sobre(23)
const tipo27 = "vetor--"
const clas27 = "config"
const vari27 = "vestir23"
const extr27 = config:equip_txt
const nome28 = menu_econfig_vestir:sobre(24)
const tipo28 = "vetor--"
const clas28 = "config"
const vari28 = "vestir24"
const extr28 = config:equip_txt
#
const nome29 = menu_econfig_vestir:sobre(25)
const tipo29 = "vetor--"
const clas29 = "config"
const vari29 = "vestir25"
const extr29 = config:equip_txt
const nome30 = menu_econfig_vestir:sobre(26)
const tipo30 = "vetor--"
const clas30 = "config"
const vari30 = "vestir26"
const extr30 = config:equip_txt
const nome31 = menu_econfig_vestir:sobre(27)
const tipo31 = "vetor--"
const clas31 = "config"
const vari31 = "vestir27"
const extr31 = config:equip_txt
const nome32 = menu_econfig_vestir:sobre(28)
const tipo32 = "vetor--"
const clas32 = "config"
const vari32 = "vestir28"
const extr32 = config:equip_txt
const nome33 = menu_econfig_vestir:sobre(29)
const tipo33 = "vetor--"
const clas33 = "config"
const vari33 = "vestir29"
const extr33 = config:equip_txt
#
const sobre = txtcopiamai(txtsublin(config:equip_txt, arg0, 1), "A") + " depende de"
