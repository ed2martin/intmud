classe cmd_quem
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Quem\b\n\
Sintaxe: QUEM\n\
Mostra quem está conectado no MUD e jogando."
const posic = 0

func escr
  textotxt t0
  txt100 t1
# Lista de personagens dos jogadores
  indiceitem item
  epara item.ini("pn "), txt1(item.txt) == "pn", item.depois
    continuar item.obj.jogconfig.17 && !arg0.jogconfig.23
    refvar obj = item.obj
    t1 = txt(999000 - obj.pnivel) + " N"
    t1 += txt(txt(obj.pnivel) + "      ", 0, 6) + obj.nome
    obj.sock == nulo && (t1 += "  [Desconectado]")
    se arg0.jogconfig.23
      obj.jogconfig.23 && (t1 += "  [ADM]")
      obj.jogconfig.17 && (t1 += "  [INVQUEM]")
      obj.sock.imonit && (t1 += "  [MONIT " + obj.sock.imonit.objlista.perso.nome + "]")
    fimse
    arg0.jogconfig.20 && (t1 += "  " + txt(obj.dono, 2))
    t0.addfim(t1)
  efim
# Lista de jogadores sem personagem
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    continuar item.obj.perso.jog # Continuar se personagem é jogador
    continuar item.obj.jogconfig.17 && !arg0.jogconfig.23
    t1 = "999001 N?     " + item.obj.nome
    item.obj.jogconfig.17 && (t1 += "  [Invis]")
    t0.addfim(t1)
  efim
# Ordena e mostra para o jogador
  t0.ordena
  textopos pos
  epara pos = t0.ini, pos, pos.depois
    pos.mudar("", 0, 7)
  efim
  arg0.msg2("\b\c6Personagens online: " + t0.linhas + "\b\n" + t0.remove(1000))


classe cmd_hab
herda comando_comum, comando_ajuda
const posic = 5
const txtajuda = "\b\c3Hab\b\n\
Sintaxe: HAB  [nome da habilidade]\n\
Sem argumentos mostra as habilidades do seu personagem.\n\
Seguido de um nome, mostra informações sobre a habilidade.\n\
Geralmente pode-se usar uma habilidade teclando-se o nome dela."

func escr
  ref r
  r = arg0.persoesc
  se arg1
    ref obj
    prog p
    epara p.iniclasse("cmd_" + txt1(arg1)), p.lin, p.depois
      obj = $[p.texto].atkajuda(r)
      ret obj, arg0.msg2(obj.txtajuda(r))
    efim
    ret arg0.msg("Nenhuma informação sobre a habilidade: " + arg1)
  fimse
  txt100 n
  r.persoesc != arg0 && (n = " de " + r.nome)
  textotxt h
  txt100 t1
  txt100 t2
  epara t1 = r.var.ini("h_"), txt(t1, 0, 2) == "h_", t1 = r.var.depois(t1)
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    t2 += " / " + txtsublin(misc:aulas, r.var.[t1], 1)
    h.addfim(t2)
  efim
  ret !h.linhas, arg0.msg("Nenhuma habilidade.")
  h.addini("\b\c6Habilidades" + n + ":\b")
  arg0.msg(h.remove(1000))


classe cmd_magia
herda comando_comum, comando_ajuda
const posic = 5
const txtajuda = "\b\c3Magia\b\n\
Sintaxe: MAGIA  [nome da magia]\n\
Sem argumentos mostra as magias do seu personagem.\n\
Seguido de um nome, mostra informações sobre a magia.\n\
Geralmente pode-se usar uma magia teclando-se lançar e o nome dela."

func escr
  ref r
  r = arg0.persoesc
  se arg1
    ref obj
    prog p
    epara p.iniclasse("magia_" + txt1(arg1)), p.lin, p.depois
      obj = $[p.texto].atkajuda(r)
      ret obj, arg0.msg2(obj.txtajuda(r))
    efim
    ret arg0.msg("Nenhuma informação sobre a magia: " + arg1)
  fimse
  txt100 n
  r.persoesc != arg0 && (n = " de " + r.nome)
  textotxt h
  txt100 t1
  txt100 t2
  epara t1 = r.var.ini("m_"), txt(t1, 0, 2) == "m_", t1 = r.var.depois(t1)
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    t2 += " / " + txtsublin(misc:aulas, r.var.[t1], 1)
    h.addfim(t2)
  efim
  ret !h.linhas, arg0.msg("Nenhuma magia.")
  h.addini("\b\c6Magias" + n + ":\b")
  arg0.msg(h.remove(1000))


classe cmd_idioma
herda comando_comum, comando_ajuda
const posic = 5
const txtajuda = "\b\c3Idioma\b\n\
Sintaxe: IDIOMA\n\
Mostra os idiomas que o seu personagem conhece."

func escr
  txt100 n
  ref r
  r = arg0.persoesc
  r.persoesc != arg0 && (n = " de " + r.nome)
  textotxt h
  txt100 t1
  txt100 t2
  epara t1 = r.var.ini("i_"), txt(t1, 0, 2) == "i_", t1 = r.var.depois(t1)
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    t2 += " / " + txtsublin(misc:aulas, r.var.[t1], 1)
    h.addfim(t2)
  efim
  ret !h.linhas, arg0.msg("Nenhum idioma.")
  h.addini("\b\c6Idiomas" + n + ":\b")
  arg0.msg(h.remove(1000))


classe cmd_outros
herda comando_comum, comando_ajuda
const posic = 5
const txtajuda = "\b\c3Outros\b\n\
Sintaxe: OUTROS\n\
Mostra itens e habilidades extras. Geralmente são permanentes (não pode-se\n\
pegar, soltar, dar e vestir)."

func escr
  txt100 n
  ref r
  r = arg0.persoesc
  r != arg0 && (n = " de " + r.nome)
  textotxt h
  txt100 t1
  txt100 t2
  epara t1 = r.var.ini("i_"), txt(t1, 0, 2) == "i_", t1 = r.var.depois(t1)
    t2 = txte(txt(t1, 2)) # , t2 += txtesp(30 - inttotal(t2))
    se txt(int(r.var.[t1])) == t.var.[t1]
      t2 += " / " + txtsublin(misc:aulas, r.var.[t1], 1)
    senao
      t2 += " / " + r.var.[t1]
    fimse
    h.addfim(t2)
  efim
  ret !h.linhas, arg0.msg("Nenhum item.")
  h.addini("\b\c6Outros" + n + ":\b")
  arg0.msg(h.remove(1000))


classe cmd_inv
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Inv\b\n\
Sintaxe: INV\n\
Mostra os itens que o seu personagem está carregando."
const posic = 5

func escr
  textotxt t
  listaitem item
  epara item = arg0.dentro1.fim, item, item.antes
    continuar !item.obj.visivel(arg0)
    t.addfim(txt(item.obj.objtot) + " " + item.obj.atribs + txtcopiamai(item.obj.descnome, \
"A"))
  efim
  t.juntalin("(", "x)")
  se t
    arg0.msg2("\b\c6Você carrega:\b\n" + t.remove(1000))
  senao
    arg0.msg("\bVocê não está carregando nada.")
  fimse


classe cmd_equip
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Equip\b\n\
Sintaxe: EQUIP\n\
         EQUIP TUDO\n\
Mostra os itens que o seu personagem está vestindo ou usando.\n\
Digitando EQUIP TUDO, são mostradas também as posições aonde o seu\n\
personagem pode vestir algo."
const posic = 5

func escr
  textotxt t
  listaitem item
  ref pos.55
  txt50 nomepos
# Preenche pos
  epara item = arg0.dentro2.fim, item, item.antes
    continuar !item.obj.vestpos || !item.obj.visivel(arg0)
    pos.[item.obj.vestpos] = item.obj
  efim
  pos.0 = pos.50
# Mostra as posições
  int8 x
  epara x = 0, x <= 32, x += 1
    refvar obj = pos.[x]
    se obj.vestpos && obj.visivel(arg0)
      nomepos = "\c2(" + misc:equip(obj.vestpos) + ")\b "
      nomepos += txtesp(20 - inttotal(nomepos))
      t.addfim(nomepos + obj.atribs + txtcopiamai(obj.descnome, "A"))
    senao arg1 == "tudo"
      nomepos = "\c2(" + misc:equip(x ? x : 50) + ")\b "
      se nomepos != "\c2(desconhecido)\b "
        t.addfim(nomepos + txtesp(20 - inttotal(nomepos)) + "nada")
      fimse
    fimse
  efim
# Envia mensagem
  se t.linhas
    arg0.msg2("\b\c6Equipado com:\b\n" + t.remove(1000))
  senao
    arg0.msg("\bNão está vestindo/usando nada.")
  fimse


classe cmd_efeito
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Efeito\b\n\
Sintaxe: EFEITO\n\
Mostra os efeitos que estão afetando o seu personagem."
const posic = 0

func escr
  listaitem i
  textotxt t
  epara i = arg0.persoesc.dentro2.ini, i, i.depois
    continuar !i.obj.e_nome
    t.addfim("1 " + i.obj.e_nome + (i.obj.t_duracao ? " (" + int(i.obj.t_duracao / 10) + \
")"))
  efim
# Envia mensagem
  refvar nome = arg0.persoesc == arg0 ? "você" : arg0.persoesc.nome
  se t.linhas
    t.ordenalin("", "x")
    arg0.msg2("\b\c6Efeitos em " + nome + ":\b\n" + t.remove(1000))
  senao
    arg0.msg("\bNenhum efeito afetando " + nome + ".")
  fimse


classe cmd_vida
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Vida\b\n\
Sintaxe: VIDA\n\
Mostra os pontos de vida, mana, vigor, nível e experiência do seu personagem."
const posic = 0

func escr
  se arg0.persoesc == arg0
    arg0.msg(vidalin(arg0))
  senao
    arg0.msg(txtcopiamai(arg0.persoesc.nome, "A") + ": " + vidalin(arg0.persoesc))

func vidalin
  txt100 lin
  lin = "Vida " + arg0.pvida + "/" + arg0.pvidamax
  lin += "  Mana " + arg0.pmana + "/" + arg0.pmanamax
  lin += "  Vigor " + arg0.pmove + "/" + arg0.pmovemax
  lin += "  Nível " + arg0.pnivel
  lin += "  Experiência " + arg0.expatual + "/" + arg0.expmax
  ret lin


classe cmd_moedas
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Moedas\b\n\
Sintaxe: VIDA\n\
Mostra quantas moedas você está carregando."
const posic = 0

func escr
  txt100 lin
  txt100 lin2
  se !arg0.var.z_moedas_
    lin = "Nenhuma moeda"
  senao arg0.var.z_moedas_ == 1
    lin = "Uma moeda"
  senao arg0.var.z_moedas_ == 2
    lin = "Duas moedas"
  senao
    lin = txtnum(arg0.var.z_moedas_, ".") + " moedas"
  fimse
  se arg0.persoesc == arg0 || !arg0.persoesc.var.z_moedas_
  senao arg0.persoesc.var.z_moedas_ == 1
    lin2 = " uma moeda"
  senao arg0.var.z_moedas_ == 2
    lin2 = " duas moeda"
  senao
    lin2 = " " + txtnum(arg0.var.z_moedas_, ".") + " moedas"
  fimse
  lin2 && (lin += ", " + txtcopiamai(arg0.persoesc.nome, "A") + lin2)
  arg0.msg(lin + ".")


classe cmd_hora
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Hora\b\n\
Sintaxe: HORA\n\
Mostra a hora atual, no calendário do MUD e no servidor."
const posic = 0

func escr
  txt100 t1
  datahora d
  d.agora
  t1 = "  (" + semanamud(misc:dia) + ")"
  arg0.msg("Hora atual MUD:      " + misc:hora + ":" + misc:min + t1)
  arg0.msg("Hora atual servidor: " + d.hora + ":" + d.min)
  t1 = "Tempo total de jogo: "
  arg0.tempojogo2 == 1 && (t1 += "1 dia ")
  arg0.tempojogo2 > 1 && (t1 += txt(arg0.tempojogo2) + " dias ")
  t1 += intdiv((864000 - arg0.tempojogo1) / 36000)
  t1 += ":"
  t1 += intdiv((864000 - arg0.tempojogo1) / 600) % 60
  arg0.msg(t1 + " horas")
  se arg0.sock
    int32 x
    x = arg0.sock.tempojogo
    se x >= 24 * 36000
      t1 = "Mais de 24 horas"
    senao
      t1 = intdiv(x / 36000)
      t1 += ":" + intdiv(x / 600) % 60 + " horas"
    fimse
    arg0.msg("Tempo dessa sessão:  " + t1)

func semanamud
  casovar arg0
  casose "0"
    ret "Domingo"
  casose "1"
    ret "Segunda-feira"
  casose "2"
    ret "Terça-feira"
  casose "3"
    ret "Quarta-feira"
  casose "4"
    ret "Quinta-feira"
  casose "5"
    ret "Sexta-feira"
  casose "6"
    ret "Sábado"
  casofim


classe cmd_onde
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Onde\b\n\
Sintaxe: ONDE\n\
Mostra a área em que você está e os jogadores que estiverem por perto."
const posic = 0

func escr
  textotxt t0
  txt100 area
  ref r
  epara r = arg0.dono, r.dono, r = r.dono
  efim
  area = r.s_area
# Checa se pode ver a sala
  se !r.visivel(arg0)
    se 1 & arg0.bitver
      arg0.msg("Está escuro...")
    senao
      arg0.msg("Você está ceg" + (arg0.msexo ? "o" : "a") + ".")
    fimse
    ret
  fimse
# Dados da área
  t0.addfim("\b\c6Área " + $a_[area].a_nome + ":\b")
# Lista de personagens dos jogadores
  indiceitem item
  epara item.ini("pn "), txt1(item.txt) == "pn", item.depois
# continuar item.obj.jogconfig.18 && !arg0.jogconfig.18
    continuar !item.obj.visivel(arg0)
    epara r = item.obj.dono, r.dono, r = r.dono
    efim
    continuar area != r.s_area
    misc:obj = arg0
    t0.addfim(item.obj.nome + "    " + item.obj.dono.s_titulo)
  efim
  t0.txtmostra
  arg0.msg2(t0.remove(1000))


classe cmd_estat
herda comando_comum, comando_ajuda
const txtajuda = config:animal1 ? ta1 : ta2
const posic = 5
const ta1 = "\b\c3Estat\b\n\
Sintaxe: ESTAT\n\
Mostra as estatísticas e diversas informações sobre o seu personagem ou\n\
o animal você escolheu."
const ta2 = "\b\c3Estat\b\n\
Sintaxe: ESTAT\n\
Mostra as estatísticas e diversas informações sobre o seu personagem."

func escr
  textotxt t
  textotxt h
  txt100 t1
  txt100 t2
  ref r
  r = arg0.persoesc
  t.addfim("\b\c6Estatísticas de \"" + r.nome + "\"\b")
# Vida, mana e vigor
  t1 = "Vida " + r.pvida + "/" + r.pvidamax
  t1 += "  Mana " + r.pmana + "/" + r.pmanamax
  t1 += "  Vigor " + r.pmove + "/" + r.pmovemax
  t.addfim(t1)
# Tipo
  r.tipo1 && h.addfim(txtcopiamai(r.tipo1, "A"))
  r.tipo2 && h.addfim(txtcopiamai(r.tipo2, "A"))
  r.tipo3 && h.addfim(txtcopiamai(r.tipo3, "A"))
  h.linhas && t.addfim("Tipo/raça/classe: " + txttroca(h.remove(10), "\n", ", "))
  t.addfim("Sexo:             " + (r.psexo ? "Masculino" : "Feminino"))
# Quem pegou
  se r != arg0
    t.addfim("Pego por:         " + r.var.z_dono + " (no nível " + r.var.z_pnivel + ")")
  fimse
# Moedas e pontos de aulas
  r.var.z_moedas_ && t.addfim("Moedas:           " + txtnum(r.var.z_moedas_, "."))
  r.var.z_aulas_ && t.addfim("Aulas:            " + txtnum(r.var.z_aulas_, "."))
# Nível
  t.addfim("Nível:            " + r.pnivel)
  t.addfim("Experiência:      " + r.expatual + "/" + r.expmax)
# Batalha
  t1 = "Ataque/defesa:    " + int(r.atknorm * r.atktipo.0) + "/"
  se !r.deftipo.0
    t.addfim(t1 + "Imune")
  senao
    t.addfim(t1 + int(r.defnorm / r.deftipo.0))
  fimse
# t.addfim("Ataque/defesa:    " + r.atknorm + "/" + r.defnorm)
  t1 = "Atq/def especial: " + int(r.atkesp * r.atktipo.1) + "/"
  se !r.deftipo.1
    t.addfim(t1 + "Imune")
  senao
    t.addfim(t1 + int(r.defesp / r.deftipo.1))
  fimse
# t.addfim("Atq/def especial: " + r.atkesp + "/" + r.defesp)
  t.addfim("Precisão/evasão:  " + r.precisao + "/" + r.evasao)
  t.addfim("Velocidade:       " + r.pveloc)
# Mortes
  se r == arg0
    t.addfim("Mortes:           " + r.mortes)
  senao
    t.addfim("Desmaios:         " + r.mortes)
  fimse
# Carregando
  t.addfim("Peso total:       " + txtnum((r.pesoden + r.pesoobj) / 1000, "0") + " Kg")
  t1 = "Carregando:       " + r.dentro1.total + "/" + r.objmax
  t1 += r.objmax == 1 ? " item" : " itens"
  t1 += ", " + txtnum((r.pesoden - r.pesoveste) / 1000, "0")
  t1 += "/" + txtnum(r.pesomax / 1000, "0") + " Kg"
  t.addfim(t1)
# Mensagem para o usuário
  arg0.msg2(t.remove(1000))
