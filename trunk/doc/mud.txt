Organização

Classes:
a_<nome da área>  Definições das áreas
b_<nome da área>  Contém as propriedades herdadas pelas salas da área
s_<nome da sala>  Uma sala
com_<nome do comando>  Executa um comando; vide classe com2_comum
com_magia_<nome da magia>  Executa uma magia

Classe jogsock:
É responsável pela comunicação com o usuário
Funções cmd_<nome do comando>   Comandos de administração
Funções adm_<nome do tópico>    Tópicos de ajuda da administração
Funções p_<texto>               São executadas conforme a variável passo

----------------------------------------
Caracteres especiais em mensagens (mud-mens.inv)

$ + letra maiúscula = primeira letra do texto em maiúscula
$ + letra minúscula = texto em letras minúsculas
$$ = Símbolo $
$P = Nome do personagem
$A = Nome do alvo
$O = Nome do objeto
$Q = Depende do personagem: "o", "a", "um" ou "uma"
$R = Depende do alvo: "o", "a", "um" ou "uma"
$S = Depende do objeto: "o", "a", "um" ou "uma"

----------------------------------------
Eventos

Itens e personagens possuem a seguinte variável:
listaobj evento
Executar um evento significa chamar uma função de todos os objetos
dessa lista. Via de regra, o nome das funções começa com "e_".
A lista é limpada automaciamente toda vez que o personagem muda de sala.

O evento e_entrou (quando um personagem entra na sala) é um pouco diferente.
Sendo P o personagem, é executada a função e_entrou de p.evento, p.dono
e p.dono.evento.

Eventos existentes:
e_entrou(personagem) Personagem entrou na sala
e_saiu(personagem) Personagem saiu da sala
e_fim(personagem) Personagem saiu do jogo
e_escr(personagem, texto) Personagem escreveu alguma coisa
    Deve retornar verdadeiro ou 1 se deve cancelar a ação.

----------------------------------------
Salas (mud-sala.int)

*listaobj dentro1
Lista de itens na sala

*listaobj dentro2
Lista de personagens na sala

*listaobj evento
Objetos que recebem eventos da sala

*ref dir_[direção]
Sala na direção especificada.
Geralmente definido dessa forma: const dir_s = $sala1
As direções válidas são: n s l o ne no se so c b
Se estiver ausente, não há sala nessa direção

*uint8 tipo_[direção]
*const tipoini_[direção]
Especifica o tipo de saída em determinada direção.
Tipo é o valor atual, geralmente definido dessa forma: uint8 tipo_s
TipoIni é o valor inicial, geralmente definido dessa forma: const tipo_s = 2
0 = não há porta
1 = está aberto
2 = está fechado
3 = está trancado

*const inv_[direção]
Verdadeiro se for invisível (não aparece na lista de saídas)

*const tranc_[direção]
0 = porta normal
1 = fechado quando alguém passar pela porta
2 = trancado quando for fechado
3 = trancado quando for fechado ou alguém passar pela porta

*const chave_[direção]
Texto que contém o código da chave que destranca a porta

*func txtsai
Retorna as saídas existentes (texto)

*func descsala( jogador, modo )
Adiciona texto com a descrição da sala
Se modo=0, mostra o mais curto possível
Somar 1 para mostrar descrição completa
Somar 2 para mostrar saídas

*func descitens( jogador )
Adiciona texto com descrição dos itens para um jogador

*func entrou
Executado logo que o personagem entra na sala. arg0=objeto que entrou.
Geralmente o que essa função faz é mostrar a descrição da sala,
bem como as saídas existentes.

*func entrou[tempo em décimos de segundo]
Executado depois do jogador entrar na sala, após o tempo especificado
no nome da função (em décimos de segundo).
Na função: arg0=objeto do jogador.
Exemplo:
func entrou10 # Executado 1 segundo após entrar na sala
msg("Alguém disse bom dia.") # Envia mensagem para o jogador

*func escr
Executado quando um jogador digita alguma coisa na sala.
Na função: arg0=objeto do jogador, arg1=o que digitou.
Deve retornar verdadeiro se o comando já foi processado.

----------------------------------------
Personagens e itens (mud-perso.int)

*varfunc dono
A sala (o objeto) aonde o personagem está

*listaitem idono
Usado internamente por dono; item da sala que contém o personagem

*listaobj dentro1
Lista de itens que está carregando

*listaobj dentro2
Lista de itens que está vestindo

*listaobj evento
Objetos que recebem eventos do personagem/item

*uint8 bitinv
Grau de invisibilidade do personagem ou objeto; geralmente é 3
0 = visível a qualquer um, mesmo no escuro ou a quem estiver cego
somar 1 se invisível a quem estiver cego
somar 2 se invisível no escuro
somar 4 se está invisível
somar 8 se está oculto
somar 16 se é administrador invisível

*uint8 bitver
O que está visível ao personagem ou objeto; geralmente é 1 ou 3
0 = nada (está cego)
somar 1 se não está cego
somar 2 se não está escuro (tem luz suficiente para enxergar)
somar 4 se pode ver invisível
somar 8 se pode ver oculto
somar 16 se pode ver administradores invisíveis

*func visivel( objeto ou personagem )
Retorna verdadeiro se o objeto ou personagem estiver visível

*texto ident
Nomes que o jogador digita para ações com o personagem ou item
Exemplo: ao pegar um item ou atacar um personagem

*txt16 nome
Nome do personagem ou item, usado em ações com o objeto

*int1 sexo
0=feminino, 1=masculino

*texto descpos
Descrição quando está na sala; arg0=quem quer ver

*texto descver
Descrição, quando olha para o objeto; arg0=quem quer ver

*func itemnome( lista , texto )
Procura um item pelo nome
Lista é uma variável listaobj com os possíveis candidados
Texto é o texto procurado, exemplos:
"banana" -> procura um item chamado banana
"2.banana" -> procura a segunda banana
"10 banana" -> procura 10 itens chamados banana
Essa função altera a lista mantendo apenas os itens que correspondem

----------------------------------------
Personagens (mud-perso.int)

*const perso = 1
Para identificar que é personagem

*sav int1 sexo
Sexo: 0=feminino, 1=masculino

*sav uint32 moedas
Quantas moedas está carregando

*sav uint8 posicao
Posição do personagem:
0 = morto
1 = mortalmente ferido
2 = incapacitado
3 = fraco
4 = dormindo
5 = descansando
6 = sentado
7 = lutando
8 = em pé

*const pospadr = 8
Posição padrão do personagem

*func teclou
Chamado sempre que o personagem tecla algum comando (arg0=comando)

*func p_espera_exec
Pega o próximo comando da lista

*func teclouproc
Processa comando, sem espera (arg0=comando)

*func mudasala
Coloca personagem em outra sala (arg0 = sala)

*func ajustavar
Ajusta variáveis, principalmente batalha

*func ajustapos
Acerta posição do personagem, conforme pontos de vida e batalha

*func batalhaini
Inicia batalha com outro personagem
Deve ser chamado para cada golpe ou comando agressivo
arg0 = nome do alvo, ou "" se nenhum
Retorna: verdadeiro se pode prosseguir com o golpe

*func batalhadepois
Deve ser chamado depois que executou um golpe

*func batalhafim
Encerra a batalha

*func b_tempo_exec
É chamado após algum tempo sem golpes, para encerrar a batalha

*func morreu
Executa procedimentos quando o personagem morre

----------------------------------------
Personagens não jogador

* const p_pet = 0
0 = não pode ser animal de estimação
1 = jogador pode pegar e usar em batalhas
2 = segue ordens do jogador

* const p_mover = 0
Aonde pode se movimentar:
0 = não sai do lugar
1 = somente na área
2 = pode sair da área

* const p_fora = 0
Não entra em lugares fechados

* const p_pegar = 0
0 = não pega itens do chão
1 = pega itens
2 = pega somente itens de valor

* const p_agressivo = 0
0 = pacífico, não luta
1 = ataca se for atacado
2 = ataca quando possível

* const p_foge = 0
Se foge quando estiver fraco

* const p_nadar = 0
Pode atravessar lugares em que não se pode nadar.

* const p_silencio = 0
Se movimenta em silêncio (não é informado na sala).

* const p_imortal = 0
Se não pode morrer.

* const p_compra = 0
Porcentagem de lucro quando compra: preço final = valor * (100-p_compra)

* const p_venda = 0
Porcentagem de lucro quando vende: preço final = valor * (100+p_venda)

* const p_compravenda = 0
Se está aberto para compra e venda.

come corpos
mata jogadores que mataram ou roubaram outros
ataca jogadores que mataram ou roubaram outros
pega lixo
patrulha: encerra brigas

----------------------------------------
Itens

const vestir = 0
Em que lugar do corpo vai quando é vestido:
0 = não pode vestir
somar 1 = usar como luz
somar 2 = na cabeça
somar 4 = sobre o rosto
somar 8 = nos olhos
somar 16 = nas orelhas
somar 32 = no pescoço
somar 64 = no corpo
somar 128 = sobre o corpo
somar 256 = nas costas
somar 512 = nos braços
somar 1024 = nas mãos
somar 2048 = no pulso direito
somar 4096 = no pulso esquerdo
somar 8192 = no dedo direito
somar 16384 = no dedo esquerdo
somar 32768 = empunhar (arma)
somar 65536 = escudo
somar 131072 = na cintura
somar 262144 = nas pernas
somar 524288 = calçando

uint32 vestpos
Em que posição está vestindo
0 = não está vestindo
1 = como luz
2 = na cabeça
3 = sobre o rosto
4 = nos olhos
Etc. Vide vestir (acima)


Valor em moedas
Volume que cabe dentro, ou 0 se não for container
Quantos litros cabe, ou 0 se não for vasilhame
Quanto sustenta, ou 0 se não for alimento
Quanto tempo dura vestindo (exemplo, para produzir luz)
O que afeta se estiver vestindo
