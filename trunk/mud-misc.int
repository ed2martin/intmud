classe misc
# Miscelânea: tabelas (variáveis) e funções
# Deve ser usado como misc:variável ao invés de $misc.variável
#
# Objeto usado para acessar as saídas das salas
comum ref obj
#
# Objetos usados em misc:separa, misc:sepitem e misc:sepperso
comum txt100 sep1 # Objeto procurado
comum txt100 sep2 # Objeto ou personagem destino
#
# Mensagem conforme o sexo
const sletra0 = "a" # sletra[sexo] = "o" ou "a"
const sletra1 = "o"
const sum0 = "uma" # sum[sexo] = "um" ou "uma"
const sum1 = "um"
#
# Para calcular bônus conforme o tipo
comum real defbonus.255
#
# Hora MUD
comum int1 luz # Se tem luz do dia
comum uint8 dia # Dia MUD, de 0 (domingo) a 6 (sábado)
comum uint8 hora # Hora MUD (1 dia MUD = 2 horas)
const min = intdiv((3000 - misc:imin) / 50) # Minuto MUD
comum inttempo imin # Usado internamente: quanto tempo para completar 1 hora MUD
#
# Direções
const d1n = "n"
const d1s = "s"
const d1l = "l"
const d1o = "o"
const d1c = "c"
const d1b = "b"
const d1e = "l"
const d1w = "o"
const d1u = "c"
const d1d = "b"
const d1ne = "ne"
const d1no = "no"
const d1se = "se"
const d1so = "so"
const d1nw = "no"
const d1sw = "so"
#
# Direções opostas
const d2n = "s"
const d2s = "n"
const d2l = "o"
const d2o = "l"
const d2c = "b"
const d2b = "c"
const d2e = "o"
const d2w = "l"
const d2u = "b"
const d2d = "c"
const d2ne = "so"
const d2no = "se"
const d2se = "no"
const d2so = "ne"
const d2nw = "se"
const d2sw = "ne"
#
# Aonde equipar; não contém a posição 30, que é "Empunhando"
const equip_txt = "Não\n\
Na cabeça\n\
Sobre o rosto\n\
Nos olhos\n\
Nas orelhas\n\
No pescoço\n\
No corpo\n\
Sobre o corpo\n\
Nas costas\n\
Nos braços\n\
Nas mãos\n\
No pulso direito\n\
No pulso esquerdo\n\
No dedo direito\n\
No dedo esquerdo\n\
Escudo\n\
Na cintura\n\
Nas pernas\n\
Calçando"
#
# Tipos de arma
const arma_txt = "Nenhuma arma\n\
Lâmina curta\n\
Lâmina longa\n\
Martelo\n\
Arma flexível\n\
Arma exótica\nGarra"
#
# Nomes dos diversos tipos de ataque
const atknomes = "Contusão\n\
Luta\n\
Cortante\n\
Perfurante\n\
Fogo\n\
Água\n\
Gelo\n\
Terra\n\
Pedra\n\
Aéreo/vento\n\
Luz\n\
Trevas\n\
Elétrico\n\
Vegetal\n\
Psíquico\n\
Inseto\n\
Fantasma\nDragão"

func equip # Traduz número para lugar aonde está vestindo um item
# Retorna um texto ou "Desconhecido" se não for um lugar válido
  ret arg0 == 30, "Empunhando"
  ret int(arg0) < 0 || int(arg0) >= intsublin(misc:equip_txt), "Desconhecido"
  ret txtsublin(misc:equip_txt, arg0, 1)

func atkesp # Tipos de golpes
# arg0 = número do golpe
# Retorna: 0=normal, 1=especial
# Nota: a quantidade de tipos está um pouco exagerada
  casovar arg0
  casose "0" # contusão/normal (um golpe de pancada)
  casose "1" # luta (um golpe de alguma arte marcial)
  casose "2" # cortante (ex. faca)
  casose "3" # perfurante (ex. flecha)
    ret 0
  casose "4" # fogo
  casose "5" # água
  casose "6" # gelo
    ret 1
  casose "7" # terra (ex. terremoto)
  casose "8" # pedra (ex. atirar pedras)
  casose "9" # ar/vento/aéreo (ex. furacão)
    ret 0
  casose "10" # luz
  casose "11" # trevas
  casose "12" # elétrico (ex. raio)
  casose "13" # vegetal (ex. planta carnívora)
  casose "14" # psíquico (ex. confusão)
    ret 1
  casose "15" # inseto
  casose "16" # fantasma
  casose "17" # dragão
    ret 0
  casofim
  ret 0 # Tipo desconhecido: golpe normal

func tipo_anao # Mais forte fisicamente, mais fraco na magia
  atknorm += pnivel * 3, defnorm += pnivel * 3
  atkmag -= pnivel * 4, defmag -= pnivel * 4
  pvidamax += pnivel * 2
  pesomax += 10000
  deftipo.2 -= 2 # cortante
  deftipo.3 -= 2 # perfurante
  deftipo.16 += 2 # fantasma

func tipo_elfo # Mais fraco fisicamente, mais forte na magia
  atknorm -= pnivel * 4, defnorm -= pnivel * 4
  atkmag += pnivel * 3, defmag += pnivel * 3
  pveloc1 += pnivel * 3
  deftipo.1 -= 2 # luta
  deftipo.2 -= 2 # cortante
  deftipo.3 -= 2 # perfurante
  deftipo.16 += 2 # fantasma

func tipo_humano # Equilibrado
  deftipo.1 -= 2 # luta
  deftipo.2 -= 2 # cortante
  deftipo.3 -= 2 # perfurante
  deftipo.16 += 2 # fantasma

func tipo_normal # Contusão/Normal
  deftipo.1 -= 2 # luta
  deftipo.2 -= 2 # cortante
  deftipo.3 -= 2 # perfurante
  deftipo.16 += 100 # fantasma

func tipo_luta
  deftipo.9 -= 2 # ar
  deftipo.8 += 2 # pedra
  deftipo.11 += 2 # trevas
  deftipo.15 += 2 # inseto

func tipo_cortante
  deftipo.4 -= 2 # fogo
  deftipo.5 -= 2 # água
  deftipo.12 -= 2 # eletricidade
  deftipo.6 += 2 # gelo
  deftipo.8 += 2 # pedra
  deftipo.11 += 2 # trevas

func tipo_perfurante
  deftipo.4 -= 2 # fogo
  deftipo.5 -= 2 # água
  deftipo.12 -= 2 # eletricidade
  deftipo.6 += 2 # gelo
  deftipo.8 += 2 # pedra
  deftipo.11 += 2 # trevas

func tipo_fogo
  deftipo.5 -= 2 # água
  deftipo.7 -= 2 # terra
  deftipo.8 -= 2 # pedra
  deftipo.4 += 2 # fogo
  deftipo.6 += 2 # gelo
  deftipo.13 += 2 # vegetal
  deftipo.15 += 2 # inseto

func tipo_agua
  deftipo.12 -= 2 # elétrico
  deftipo.13 -= 2 # vegetal
  deftipo.4 += 2 # fogo
  deftipo.5 += 2 # água
  deftipo.6 += 2 # gelo

func tipo_gelo
  deftipo.1 -= 2 # luta
  deftipo.4 -= 2 # fogo
  deftipo.8 -= 2 # pedra
  deftipo.2 += 2 # cortante
  deftipo.3 += 2 # perfurante
  deftipo.6 += 2 # gelo

func tipo_terra
  deftipo.4 -= 2 # fogo
  deftipo.5 -= 2 # água
  deftipo.6 -= 2 # gelo
  deftipo.13 -= 2 # vegetal
  deftipo.8 += 2 # pedra
  deftipo.12 += 100 # elétrico

func tipo_pedra
  deftipo.1 -= 2 # luta
  deftipo.5 -= 2 # água
  deftipo.7 -= 2 # terra
  deftipo.13 -= 2 # vegetal
  deftipo.0 += 2 # contusão/normal
  deftipo.2 += 2 # cortante
  deftipo.3 += 2 # perfurante
  deftipo.4 += 2 # fogo
  deftipo.9 += 2 # ar

func tipo_ar
  deftipo.6 -= 2 # gelo
  deftipo.8 -= 2 # pedra
  deftipo.12 -= 2 # elétrico
  deftipo.1 += 2 # luta
  deftipo.13 += 2 # vegetal
  deftipo.15 += 2 # inseto
  deftipo.7 += 100 # terra

func tipo_luz
  deftipo.13 -= 2 # vegetal
  deftipo.16 -= 2 # fantasma
  deftipo.10 += 2 # luz
  deftipo.11 += 2 # trevas
  deftipo.14 += 100 # psíquico

func tipo_trevas
  deftipo.10 -= 2 # luz
  deftipo.11 -= 2 # trevas
  deftipo.16 -= 2 # fantasma
  deftipo.1 += 2 # luta
  deftipo.15 += 2 # inseto
  deftipo.14 += 100 # psíquico

func tipo_eletrico
  deftipo.7 -= 2 # terra
  deftipo.9 += 2 # ar
  deftipo.12 += 2 # elétrico

func tipo_vegetal
  deftipo.2 -= 2 # cortante
  deftipo.4 -= 2 # fogo
  deftipo.6 -= 2 # gelo
  deftipo.9 -= 2 # ar
  deftipo.15 -= 2 # inseto
  deftipo.5 += 2 # água
  deftipo.7 += 2 # terra
  deftipo.10 += 2 # luz
  deftipo.12 += 2 # elétrico
  deftipo.13 += 2 # vegetal

func tipo_psiquico
  deftipo.1 -= 2 # luta
  deftipo.11 -= 2 # trevas
  deftipo.14 -= 2 # psíquico
  deftipo.11 += 2 # trevas
  deftipo.15 += 2 # inseto
  deftipo.16 += 2 # fantasma

func tipo_inseto
  deftipo.4 -= 2 # fogo
  deftipo.9 -= 2 # ar
  deftipo.8 -= 2 # pedra
  deftipo.1 += 2 # luta
  deftipo.7 += 2 # terra
  deftipo.13 += 2 # vegetal

func tipo_fantasma
  deftipo.16 -= 2 # fantasma
  deftipo.10 -= 2 # luz
  deftipo.11 -= 2 # trevas
  deftipo.15 += 2 # inseto
  deftipo.0 += 100 # contusão/normal
  deftipo.1 += 100 # luta
  deftipo.2 += 100 # cortante
  deftipo.3 += 100 # perfurante

func tipo_dragao
  deftipo.6 -= 2 # gelo
  deftipo.17 -= 2 # dragão
  deftipo.3 += 2 # perfurante
  deftipo.4 += 2 # fogo
  deftipo.5 += 2 # água
  deftipo.12 += 2 # elétrico
  deftipo.13 += 2 # vegetal

func separa # Separa o nome do objeto do nome do destino
# arg0 = texto completo
# Faz: misc:sep1 = objeto procurado, misc:sep2 = alvo
  txt200 x
  x = txtremove(arg0, "EMDSA")
  casovar intsub(x)
  casose "0"
  casose "1"
    misc:sep1 = x
    misc:sep2 = ""
    ret
  casose "2"
    se txt1(x) != int(txt1(x))
      misc:sep1 = txt1(x)
      misc:sep2 = txt2(x)
    senao
      misc:sep1 = x
      misc:sep2 = ""
    fimse
    ret
  casose "3"
    misc:sep1 = txtsub(x, 0, 2)
    misc:sep2 = txtsub(x, 2)
    ret
  casose
    uint8 tam
    tam = intsub(arg0) - 1
    misc:sep1 = txtsub(x, 0, tam)
    misc:sep2 = txtsub(x, tam)
  casofim

func sepitem # Procura o item destino
# arg0 = personagem, misc:sep2 = nome do alvo
# Retorna: o alvo ou nulo se não encontrar
  listaitem i
  nomeobj n
  n.ini(misc:sep2, 1)
  epara i = arg0.dentro1.ini, i, i.depois
    ret i.obj.visivel(arg0) && n.nome(i.obj.ident), i.obj
  efim
  epara i = arg0.dono.dentro1.ini, i, i.depois
    ret i.obj.visivel(arg0) && n.nome(i.obj.ident), i.obj
  efim

func sepperso # Procura o personagem destino
# arg0 = personagem, misc:sep2 = nome do alvo
# Retorna: o alvo ou nulo se não encontrar
  listaitem i
  nomeobj n
  n.ini(misc:sep2, 1)
  epara i = arg0.dono.dentro2.ini, i, i.depois
    ret i.obj.visivel(arg0) && n.nome(i.obj.ident), i.obj
  efim

func iniclasse # Inicialização
# Obtém os valores de defbonus
  real r # Valor inicial é 2 elevado a -64
  uint16 x
  r = 1 / 65536, r = r * r * r * r
  enquanto x < 256
    misc:defbonus.[x] = r
    misc:defbonus.[x + 1] = r * 1.414213562
    x += 2, r *= 2
  efim
# Cria diretório de jogos salvos, se não existir
  arqdir d
  d.criardir("sav")
# Inicia contagem de tempo hora MUD
# Nota: o tempo MUD é 12 vezes mais rápido que o tempo real
# um dia MUD = 2 horas (7200 segundos), uma hora MUD = 300 segundos
  datahora dh
  dh.agora
  misc:imin = 3000 - dh.numseg * 10 % 3000
  misc:hora = intdiv(dh.numseg % 7200 / 300)
  misc:dia = dh.numdias % 7 * 12 + intdiv(dh.numseg / 7200)
  misc:dia = misc:dia % 7
  misc:luz = misc:hora >= 6 && misc:hora < 18

func imin_exec # Atualiza hora MUD
# Acerta minuto, hora e luz
  misc:imin = 3000 # 60 minutos * 60 segundos * 10 décimos / 12
  misc:hora = (misc:hora + 1) % 24
  misc:luz = misc:hora >= 6 && misc:hora < 18
# Acerta dia e limpa jogos antigos
  arqsav sav
  se misc:hora == 0
    sav.limpar("sav") # Limpa jogos antigos
    misc:dia = (misc:dia + 1) % 7 # Atualiza o dia
  fimse
# Checa mensagem para os jogadores
  txt100 lin
  casovar misc:hora
  casose "5"
    lin = "Começa a amanhecer."
    sair
  casose "6"
    lin = "O sol surge no leste."
    sair
  casose "17"
    lin = "O sol começa a se por no oeste."
    sair
  casose "18"
    lin = "A noite chega."
    sair
  casose
    ret
  casofim
# Envia mensagem para os jogadores
  indiceitem i
  ref r
  epara i.ini("un "), txt1(i.txt) == "un", i.depois
    epara r = i.obj.perso.dono, r.dono, r = r.dono
    efim
    continuar r.s_luz && r.s_luz != 2
    i.obj.perso.msg(lin)
  efim

func evento # Objeto passa a receber eventos até um objeto mudar de sala
# arg0 a arg2 = objetos cujos eventos serão recebidos
  se ref(arg0)
    ref r
    r = criar("evrecebe")
    r.perso1 = arg0.evento.addfim(este, r)
    r.perso2 = arg1.evento.addfim(este, r)
    r.perso3 = arg2.evento.addfim(este, r)

func tempo # Eventos de tempo (cria objeto), vide classe evtempo
  se txt(arg0) && ref(arg1)
    ref r
    r = criar("evtempo")
    r.tempo1 = r.tempo2 = 1
    r.obj = este
    r.func = arg0
    r.tfunc = inttotal(arg0)
    r.perso1 = arg1, r.perso1.evento.addfim(r)
    r.perso2 = arg2, r.perso2.evento.addfim(r)
    r.perso3 = arg3, r.perso3.evento.addfim(r)


classe evrecebe
listaitem perso1 # Primeiro personagem
listaitem perso2 # Segundo personagem
listaitem perso3 # Terceiro personagem
const cmd_saiu = fim + apagar(este) # Personagem saiu da sala
const cmd_fim = fim + apagar(este) # Personagem saiu do jogo

func fim # Este objeto foi apagado
  perso1.remove, perso2.remove, perso3.remove


classe evtempo
# Processa eventos de tempo
#
# Deve ser criado com:
# misc:tempo("nome da função", personagens)
# É permitido até 3 personagens.
# Se um dos personagens mudar de sala, o evento é encerrado.
#
# Resultado: são executadas as funções cujo nome é o nome
# especificado seguido do tempo decorrido, em décimos de segundo
# A função com o nome especificado seguido de "0" é executada
# quando o objeto for apagado.
#
# Na função:
# arg0 a arg2 = personagens
# arg3 = objeto evtempo
#
inttempo tempo1 # Para gerar eventos de tempo
uint32 tempo2 # tempo2-tempo1 = Tempo decorrido
txt100 func # Nome da função que deve chamar
uint8 tfunc # Tamanho de func em caracteres
ref obj # Objeto que contém a função
ref perso1 # Primeiro personagem
ref perso2 # Segundo personagem
ref perso3 # Terceito personagem
const cmd_saiu = apagar(este) # Personagem saiu da sala
const cmd_fim = apagar(este) # Personagem saiu do jogo

func fim # Este objeto foi apagado
  obj.[func]0(perso1, perso2, perso3, este)

func tempo1_exec # Executa eventos
  ret !obj, apagar(este)
  prog p
  uint32 x
  uint32 v
  x = 1000000
  epara p.inifunc(obj, func), p.lin, p.depois
    v = txt(p.texto, tfunc)
    v > tempo2 && v < x && (x = v)
  efim
  x == 1000000 && apagar(este)
  v = tempo2
  tempo1 = x - tempo2
  tempo2 = x
  obj.[func + v](perso1, perso2, perso3, este)
