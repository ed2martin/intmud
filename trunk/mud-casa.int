classe adm_casa
# Comandos de casas
#
const adm_casa = "\b\c3Comandos de casas\b\n\
\c2LCASA\b [casa]\n\
  Lista casas que começam com o nome especificado.\n\
\c2CCASA\b <nome>\n\
  Cria casa. Nome deve ser o nome de uma área ou da casa\n\
  (nome da área seguido de um número de três dígitos de 001 a 999).\n\
  Nota: para casa casa é criado um arquivo no diretório sav2.\n\
\c2ECASA\b <casa>\n\
  Edita casa.\n\
\c2ACASA\b <um ou mais nomes de casa>\n\
  Apaga uma ou mais casas e os arquivos salvos das casas.\n\
\c2Para criar uma casa:\b\n\
  1. Usar o comando CCASA\n\
  2. Definir as salas que correspondem à casa com o comando ECASA\n\
  3. Editar as salas (comando ESALA) colocando 0 na opção \"Apagar itens\"\n\
  4. Acertar também a opção \"Objetos máximo\"\n\
  5. Para segurança dos jogadores, editar as saídas da casa (comando ESAI)\n\
     para fechar ao passar e trancar ao fechar\n\
  6. Colocar o nome da casa no código da fechadura (comando ESAI)"

func cmd_lcasa # Listar casas
  prog p
  se !p.iniclasse("c_" + txtremove(arg0, "EMDCT7"))
    msg("\bNenhuma casa encontrada.")
  senao
    datahora hora
    hora.agora
    textotxt t
    txt200 lin
    t.addfim("\b\c6Casa  ArquivoJogador  DiasTaxa  Situação\b")
    enquanto p.lin && t.linhas < 500
      lin = txtsub($[p.texto].nomejog, 1, 1)
      se lin
        lin = "  " + lin + "  " + (hora.numdias - $[p.texto].diataxa)
        casovar $[p.texto].infotaxa
        casose "1"
          lin += "  Atrasado"
          sair
        casose "2"
          lin += "  Bloqueado"
          sair
        casose
          lin += "  Ok"
        casofim
      fimse
      t.addfim(txt(p.texto, 2) + lin)
      p.depois
    efim
    msg2(t.remove(500))
  fimse
  ret 1

func cmd_ccasa # Criar casa
  prog p
  txt40 nome
  uint16 num
# Checa se digitou nome da casa
  se arg0 == ""
    msg("Tecle o nome da casa ou área após CCASA")
    ret 1
  fimse
# Checa nome completo
  nome = txtmin(txtremove(arg0, "EMDCT7"))
  num = int(txtfim(nome, 3)) + 1000
  se num > 1000 && txtfim(num, 3) == txtfim(arg0, 3)
    se !p.existe("a_" + txt(nome, 0, inttotal(nome) - 3))
      msg("Área não existe: " + txt(nome, 0, inttotal(nome) - 3))
      ret 1
    senao p.existe("c_" + nome)
      msg("Casa já existe: " + nome)
      ret 1
    fimse
# Checa nome de área
  senao !p.existe("a_" + nome)
    msg("Área não existe: " + nome)
    ret 1
  senao
    epara num = 1001, p.existe("c_" + nome + txtfim(num, 3)), num += 1
      continuar num < 2000
      msg("Atingido limite de casas na área " + nome)
      ret 1
    efim
    nome += txtfim(num, 3)
  fimse
# Cria casa
  txt200 area
  area = txt(nome, 0, inttotal(nome) - 3)
  criar("admordena", "a-" + area)
  p.criar("c_" + nome + "\na-" + area + "\nherda casa\nconst area = \"" + area + "\"")
# config:salvar
  msg("\bCasa criada: " + nome)
  admlog("criou casa " + nome)
  ret 1

func cmd_acasa # Apagar casa
  prog p
  refvar nome = txtmin(txtremove(arg0, "EMDCT7"))
  se nome == ""
    msg("Tecle um ou mais nomes da casa após ACASA")
    ret 1
  fimse
  uint16 x
  enquanto txtsub(nome, x, 1)
    se !p.existe("c_" + txtsub(nome, x, 1))
      msg("Casa não existe: " + txtsub(nome, x, 1))
      ret 1
    fimse
    x += 1
  efim
  tpasso = nome, p_acasa
  ret 1

func p_acasa # Confirmar que quer apagar casa
  passo = ""
  se arg0 == "n"
    msg("Cancelado")
  senao arg0 == "s"
    prog p
    uint16 x
    enquanto txtsub(tpasso, x, 1)
      p.apagar("c_" + txtsub(tpasso, x, 1))
      x += 1
    efim
    config:salvar
    se x < 2
      msg("Casa apagada: " + tpasso)
      admlog("apagou casa " + tpasso)
    senao
      msg("Casas apagadas: " + tpasso)
      admlog("apagou casas " + tpasso)
    fimse
  senao
    txt10 m1
    passo = "acasa"
    txt2(tpasso) && (m1 = "s")
    msg("Apagar casa" + m1 + " " + tpasso + "? Tecle S ou N")
  fimse
  ret 1

func cmd_ecasa # Editar casa
  txt100 nome
  prog p
  nome = txtmin(txtremove(arg0, "EMDCT7"))
  se nome == ""
    msg("Tecle o nome da casa após ECASA")
  senao !$c_[nome]
    msg("\bCasa não existe: " + nome)
  senao
    var.classe1 = "c_" + nome
    m_menu("menu_casa")
  fimse
  ret 1


classe menu_casa
const titulo = "Casa " + txt(var.classe1, 2)
const colunas = 25
#
const nome1 = "Nome"
const info1 = "Nome para os comandos LISTA e COMPRAR"
const tipo1 = "linha"
const clas1 = var.classe1
const vari1 = "nome"
#
const nome2 = "Descrição"
const info2 = "É mostrado ao teclar LISTAR e o nome da casa"
const tipo2 = "texto"
const clas2 = var.classe1
const vari2 = "desc"
#
const nome3 = "Palavras chave"
const info3 = "Palavras que os jogadores digitam para os comandos COMPRAR e LISTAR"
const tipo3 = "linha"
const clas3 = var.classe1
const vari3 = "ident"
#
const nome4 = "Valor da casa"
const tipo4 = "numero"
const clas4 = var.classe1
const vari4 = "valor"
#
const nome5 = "Sala fora da casa"
const info5 = "Quem sai do jogo dentro da casa entra no jogo nessa sala"
const tipo5 = "sala--"
const clas5 = var.classe1
const vari5 = "sfora"
#
const nome6 = "Sala 1"
const tipo6 = "sala"
const clas6 = var.classe1
const vari6 = "s1"
const exec6 = "acerta_mudou"
#
const nome7 = "Sala 2"
const tipo7 = "sala"
const clas7 = var.classe1
const vari7 = "s2"
const exec7 = "acerta_mudou"
#
const nome8 = "Sala 3"
const tipo8 = "sala"
const clas8 = var.classe1
const vari8 = "s3"
const exec8 = "acerta_mudou"
#
const nome9 = "Sala 4"
const tipo9 = "sala"
const clas9 = var.classe1
const vari9 = "s4"
const exec9 = "acerta_mudou"
#
const nome10 = "Sala 5"
const tipo10 = "sala"
const clas10 = var.classe1
const vari10 = "s5"
const exec10 = "acerta_mudou"
#
const nome11 = "Sala 6"
const tipo11 = "sala"
const clas11 = var.classe1
const vari11 = "s6"
const exec11 = "acerta_mudou"
#
const nome12 = "Sala 7"
const tipo12 = "sala"
const clas12 = var.classe1
const vari12 = "s7"
const exec12 = "acerta_mudou"
#
const nome13 = "Sala 8"
const tipo13 = "sala"
const clas13 = var.classe1
const vari13 = "s8"
const exec13 = "acerta_mudou"
#
const nome14 = "Sala 9"
const tipo14 = "sala"
const clas14 = var.classe1
const vari14 = "s9"
const exec14 = "acerta_mudou"


classe admatucasa
# Atualiza a variável infotaxa de todas as casas
const iniclasse = arg0 != "casa" && !$[arg0] && criar(arg0)
prog p
debug d
ref r

func atualiza # Atualiza as casas
  d.exec = 50000
  epara p.iniherdainv("casa"), p.lin, p.depois
    epara r = $[p.texto], r, r = objdepois(r)
      r.tempotaxa = 1
    efim
  efim


classe casa
listaobj salas
intexec inicasa
const iniclasse = arg0 != "casa" && !$[arg0] && criar(arg0)
const ini = inicasa = 1
sav indiceobj nomejog # "cj " + nome codificado + " " + prefixo da área
sav txt50 chave # Código da chave que abre a porta da casa
sav int32 diataxa # A partir de quando deve pagar a taxa de manutenção da casa
int8 infotaxa # 0=taxa em dia, 1=avisar, 2=bloquear casa
inttempo tempotaxa # Para atualizar infotaxa
int1 objmudou # Se as informações da casa foram mudadas (precisa salvar a casa)
const ident = nome
#
# Ordem que deve organizar as constantes:
const admordem = "area\nnome\ndesc\nident\nvalor\nsfora\ns1\ns2\ns3\ns4\ns5"

func fim # Apaga arquivo da casa
  ret inttotal(este) != 1, nulo # Por segurança: só apaga arquivo se tiver 1 objeto
  arqsav sav1
  sav1.apagar("sav2/c-" + txt(este, 2) + ".sav")

func inicasa_exec # Carrega objetos da casa
  listaobj l1
  l1.addfim(este)
  arqsav sav1
  sav1.ler("sav2/c-" + txt(este, 2) + ".sav", l1)
  l1.ini.remove # Remove da lista, porque é o objeto de controle da casa
# Acerta variáveis
  listaitem item
  debug d
  epara item = l1.ini, item, item.depois
    d.ini, item.obj.ajustaobj
  efim
  epara item = l1.fim, item, item.antes
    d.ini
    se txt(item.obj, 0, 2) == "s_" # Se for sala
      apagar($[item.obj]), item.obj.ini # Apaga a sala que já existia e inicializa essa
    senao !item.obj.dono # Se for item sem dono
      apagar(item.obj) # Apaga o item
    fimse
    item.obj.var.limpar("d_", "j_")
    item.obj.ajustapeso, item.obj.acertapos, item.obj.recalc = 1
  efim
# Indica que nenhuma sala mudou
  objmudou = 0
  s1.objmudou = 0, s2.objmudou = 0, s3.objmudou = 0
  s4.objmudou = 0, s5.objmudou = 0, s6.objmudou = 0
  s7.objmudou = 0, s8.objmudou = 0, s9.objmudou = 0
# Checa a fechadura
  !chave && mudachave
# Checa se ainda pertence a um jogador
  se nomejog
    arqsav sav
    se sav.existe("sav/" + txtsub(nomejog, 1, 1) + ".sav")
      nomejog = "cj " + txtsub(nomejog, 1, 1) + " " + area
    senao
      nomejog = "", objmudou = 1
    fimse
  fimse
  nomejog && tempotaxa_exec

func tempotaxa_exec # Atualiza variável infotaxa
  datahora hora
  hora.agora
  refvar atraso = hora.numdias - diataxa
  se intpos(config:casatempotaxa) == 0 # Sem taxa de manutenção das casas
    infotaxa = 0
    tempotaxa = 0
  senao !nomejog # Se não pertence a nenhum jogador
    infotaxa = 0
    tempotaxa = 0
  senao !diataxa # Se o tempo quando pagou a taxa está vazio
    infotaxa = 0
    tempotaxa = (86402 - hora.numseg) * 10 # Dois segundos após o dia mudar
    refvar tempo = intpos(config:casatempotaxa)
    diataxa = hora.numdias + tempo
    tempo && (diataxa = intdiv(diataxa / tempo) * tempo)
    objmudou = 1
  senao atraso >= config:casatempoperder
    infotaxa = 0
    tempotaxa = 0
    nomejog = ""
    mudachave
  senao atraso >= config:casatempobloq
    infotaxa = 2
    tempotaxa = (86402 - hora.numseg) * 10 # Dois segundos após o dia mudar
  senao atraso >= config:casatempoaviso
    infotaxa = 1
    tempotaxa = (86402 - hora.numseg) * 10 # Dois segundos após o dia mudar
  senao
    infotaxa = 0
    tempotaxa = (86402 - hora.numseg) * 10 # Dois segundos após o dia mudar
  fimse

func acerta_mudou # Chamado quando a lista das salas da casa mudou
  txt512 lin
  lin = "func mudou # Se houve alguma mudança\n"
  lin += "# Não alterar; função criada automaticamente\nret objmudou"
  prog p
  int8 x
  epara x = 1, x < 10, x += 1
    p.existe(este, "s" + x) && (lin += "||s" + x + ".objmudou")
  efim
  p.criar(este, lin)
  config:salvar
  objmudou = 1

func mudachave # Muda o código da fechadura da casa
  datahora hora
  hora.agora
  chave = txt(este) + " " + rand(10) + rand(10) + hora.numtotal
  objmudou = 1

func mudou # Se houve alguma mudança (há necessidade de salvar)
  ret objmudou

func salvar # Salva objetos da casa
  objmudou = 0
  s1.objmudou = 0, s2.objmudou = 0, s3.objmudou = 0
  s4.objmudou = 0, s5.objmudou = 0, s6.objmudou = 0
  s7.objmudou = 0, s8.objmudou = 0, s9.objmudou = 0
  listaitem item
  listaobj lista
  debug dbg
  dbg.exec = 50000
  lista.addfim1(este, s1, s2, s3, s4, s5, s6, s7, s8, s9)
  item = lista.ini, item.depois
  enquanto item
    se item.obj.objsav & 1 != 1 # Se item.obj.objsav!=1 e item.obj.objsav!=3
      item.removedepois
    senao lista.total < 2000
      lista.addfim(item.obj.dentro1, item.obj.dentro2, item.obj.dentro3), item.depois
    senao
      item.depois
    fimse
  efim
  arqsav sav1
  sav1.salvar("sav2/c-" + txt(este, 2) + ".sav", lista, 365000, "x")

func descloja # Retorna informações da casa para a venda
  uint16 itens
  uint8 salas
  itens = s1.objmax + s2.objmax + s3.objmax + s4.objmax + s5.objmax
  itens += s6.objmax + s7.objmax + s8.objmax + s9.objmax
  salas = 9 - !s1 - !s2 - !s3 - !s4 - !s5 - !s6 - !s7 - !s8 - !s9
  txt300 lin
  lin = txtcopiamai(nome, "A")
  lin += salas == 1 ? ", possui uma sala" : ", possui " + salas + " salas"
  ret lin + ", até " + itens + " itens"


classe cmd_pagar
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Pagar\b\n\
Sintaxe: PAGAR [item]\n\
Sem argumentos mostra a lista de casas cujas taxas de manutenção podem\n\
ser pagas. Seguido de um nome ou número paga a taxa."
const posic = 5
txt200 lin
int32 valor # Usado internamente: valor da taxa
int8 abre # Usado internamente: horário de abertura
int8 fecha # Usado internamente: horário de fechamento
real2 lucro # Para calcular o lucro do vendedor
int32 linha
ref p # Vendedor que está verificando
txt30 tipo1 # arg0.tipo1
txt30 tipo2 # arg0.tipo2
txt30 tipo3 # arg0.tipo3

func escr
  tipo1 = arg0.tipo1 ? "\n" + arg0.tipo1 + "\n" : ""
  tipo2 = arg0.tipo2 ? "\n" + arg0.tipo2 + "\n" : ""
  tipo3 = arg0.tipo3 ? "\n" + arg0.tipo3 + "\n" : ""
  arg1 ? escr2(arg0, arg1) : escr1(arg0)

func escr1 # Consultar a lista de taxas
  se intpos(config:casatempotaxa) == 0
    ret arg0.msg("Não há taxa de manutenção das casas.")
  fimse
  textotxt t
  listaobj l
  linha = 1, l.addfim(arg0.dono.dentro2)
  epara l.remove(arg0), l, l.ini.remove
    p = l.objini # Personagem que está sendo verificado
    continuar p.atkenv || !p.taxacasa
# Checa se pode cobrar alguma taxa
    se tipo1 && txtproc("\n" + txte(p.lojanao) + "\n", tipo1) >= 0
      t.addfim(txtcopiamai(p.descnome, "A") + ": Não negocio com " + arg0.tipo1)
      continuar
    senao tipo2 && txtproc("\n" + txte(p.lojanao) + "\n", tipo2) >= 0
      t.addfim(txtcopiamai(p.descnome, "A") + ": Não negocio com " + arg0.tipo2)
      continuar
    senao tipo3 && txtproc("\n" + txte(p.lojanao) + "\n", tipo3) >= 0
      t.addfim(txtcopiamai(p.descnome, "A") + ": Não negocio com " + arg0.tipo3)
      continuar
    fimse
    abre = p.lojaini - misc:hora, fecha = p.lojafim - misc:hora
    se abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0
      t.addfim(txtcopiamai(p.descnome, "A") + ": Volte outra hora")
      continuar
    senao
      listaobj e
      lin = ""
      epara e.addfim(arg0.evento, p.evento), e, e.ini.remove
        lin = e.objini.cmd_negociar(arg0, p, "pagar")
        sair lin
      efim
      se lin
        t.addfim(txtcopiamai(p.descnome, "A") + ": " + lin)
        continuar
      fimse
    fimse
    t.addfim("\b\c6" + txtcopiamai(p.descnome, "A") + " informa:\b")
    lucro = (100 + p.taxavenda) / 100
# Informa casas
    se 1
      textotxt t2
      indiceitem item
      datahora hora
      hora.agora
      int1 mudou
      epara t2.addfim(p.taxacasa), t2.linhas, t2.remove
        refvar casa = item.obj("cj " + txt2(arg0.sock.cnome) + " " + t2.ini.texto)
        continuar !casa
        lin = "\b\c2" + linha + (linha < 10 ? "\b. " : "\b.")
        lin += txtcopiamai(casa.nome, "A")
        lin += txtesp(40 - inttotal(lin))
        valor = hora.numdias - casa.diataxa
        se valor == -1
          t.addfim(lin + "Em 12 dias MUD (1 dia)")
        senao valor < 0
          valor = -valor
          t.addfim(lin + "Em " + valor * 12 + " dias MUD (" + valor + " dias)")
        senao
          se config:casatempotaxa
            valor = intdiv(valor / config:casatempotaxa) + 1
          senao
            valor = 0
          fimse
          valor *= lucro * casa.valor * config:casataxa / 100
          t.addfim(lin + "$ " + valor)
        fimse
        mudou = 1
      efim
      !mudou && t.addfim("Você não deve nada.")
    fimse
  efim
# Envia mensagens
  se t.linhas
    arg0.msg2(t.remove(1000))
  senao
    arg0.msg("Ninguém cobra taxas aqui.")

func escr2 # Consultar um item
  listaobj l
  nomeobj n
  linha = 0, l.addfim(arg0.dono.dentro2), n.ini(arg1, 1)
  epara l.remove(arg0), l, l.ini.remove
    p = l.objini # Personagem que está sendo verificado
    continuar p.atkenv || !p.taxacasa
# Checa se pode vender alguma coisa
    continuar tipo1 && txtproc("\n" + txte(p.lojanao) + "\n", tipo1) >= 0
    continuar tipo2 && txtproc("\n" + txte(p.lojanao) + "\n", tipo2) >= 0
    continuar tipo3 && txtproc("\n" + txte(p.lojanao) + "\n", tipo3) >= 0
    abre = p.lojaini - misc:hora, fecha = p.lojafim - misc:hora
    continuar abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0
    listaobj e
    epara e.addfim(arg0.evento, p.evento), e, e.ini.remove
      sair e.objini.cmd_negociar(arg0, p, "pagar")
    efim
    continuar e
    lucro = (100 + p.taxavenda) / 100
# Pagar casas
    se 1
      textotxt t2
      indiceitem item
      datahora hora
      hora.agora
      epara t2.addfim(p.taxacasa), t2.linhas, t2.remove
        refvar casa = item.obj("cj " + txt2(arg0.sock.cnome) + " " + t2.ini.texto)
        continuar !casa
        continuar txt(linha += 1) != arg1 && !n.nome(casa.ident, 1)
        valor = hora.numdias - casa.diataxa
        se valor < 0
          ret arg0.msg(txtcopiamai(p.descnome, "A") + " informa que a taxa já está paga.")
        senao config:casatempotaxa
          refvar total = intdiv(valor / config:casatempotaxa) + 1
          valor = total * lucro * casa.valor * config:casataxa / 100
          se arg0.var.z_moedas_ < valor
            ret arg0.msg("Você não tem " + valor + (valor == 1 ? " moeda." : " moedas."))
          fimse
          casa.diataxa += total * config:casatempotaxa
          casa.objmudou = 1
          arg0.var.z_moedas_ -= valor
        senao
          casa.diataxa = hora.numdias
          casa.objmudou = 1
        fimse
        ret arg0.msg(txtcopiamai(p.descnome, "A") + " informa que a taxa foi paga.")
      efim
      !mudou && t.addfim("Você não deve nada.")
    fimse
  efim
  arg0.msg("Não tem como você pagar isso aqui.")
