classe adm_hab
herda comando_adm
const txtajuda = "\b\c3Habilidades e magias\b\n\
  \c2LHAB\b      Lista habilidades existentes\n\
  \c2LMAG\b      Lista magias existentes\n\
  \c2CHAB\b      Cria uma habilidade\n\
  \c2CMAG\b      Cria uma magia\n\
  \c2EHAB\b      Edita uma habilidade\n\
  \c2EMAG\b      Edita uma magia\n\
  \c2AHAB\b      Edita uma ou mais habilidades\n\
  \c2AMAG\b      Edita uma ou mais magias\n\
  \c2ATKLOG\b    Mostra os cálculos de batalha no próximo ataque"


classe adm_lhab
herda comando_adm, comando_comum
const txtajuda = "\b\c3Lhab\b\n\
Sintaxe: LHAB [nome]\n\
Lista as habilidades que começam com o nome especificado.\n\
Se o nome for omitido, lista todas as habilidades."

func escr # Listar habilidades
  prog p
  textotxt t
  txt100 lin
  epara p.iniclasse("cmd_"), p.lin && t.linhas < 499, p.depois
    continuar !$[p.texto].cmdmenu # Continua se não é uma habilidade
    lin = txtcopiamai(txt2(txte(p.texto)), "A") + ", "
    se $[p.texto].tipoalvo < 6
      lin += txtsublin(config:atknomes, $[p.texto].tipoatk, 1)
    fimse
    casovar $[p.texto].tipoalvo
    casose "1"
      lin += ", Outros"
      sair
    casose "2"
      lin += ", Todos dividindo ataque"
      sair
    casose "3"
      lin += ", Outros dividindo ataque"
      sair
    casose "4"
      lin += ", Todos sem dividir ataque"
      sair
    casose "5"
      lin += ", Outros sem dividir ataque"
      sair
    casose "6"
      lin += "Não agressivo"
      sair
    casose "7"
      lin += "Não agressivo, O próprio"
      sair
    casose "8"
      lin += "Automático"
      sair
    casose "9"
      lin += "Nenhum"
      sair
    casofim
    t.addfim(lin)
  efim
  se t.linhas
    arg0.msg2("\b\c6Habilidade, Tipo, Alvo\b\n" + t.remove(500))
  senao
    arg0.msg("\bNenhuma habilidade encontrada.")
  fimse


classe adm_lmag
herda comando_adm, comando_comum
const txtajuda = "\b\c3Lmag\b\n\
Sintaxe: LMAG [nome]\n\
Lista as magias que começam com o nome especificado.\n\
Se o nome for omitido, lista todas as magias."

func escr # Listar magias
  prog p
  textotxt t
  txt100 lin
  epara p.iniclasse("magia_"), p.lin && t.linhas < 499, p.depois
    continuar !$[p.texto].cmdmenu # Continua se não é uma magia editável
    lin = txtcopiamai(txt2(txte(p.texto)), "A") + ", "
    se $[p.texto].tipoalvo < 6
      lin += txtsublin(config:atknomes, $[p.texto].tipoatk, 1)
    fimse
    casovar $[p.texto].tipoalvo
    casose "1"
      lin += ", Outros"
      sair
    casose "2"
      lin += ", Todos dividindo ataque"
      sair
    casose "3"
      lin += ", Outros dividindo ataque"
      sair
    casose "4"
      lin += ", Todos sem dividir ataque"
      sair
    casose "5"
      lin += ", Outros sem dividir ataque"
      sair
    casose "6"
      lin += "Não agressivo"
      sair
    casose "7"
      lin += "Não agressivo, O próprio"
      sair
    casose "8"
      lin += "Automático"
      sair
    casose "9"
      lin += "Nenhum"
      sair
    casofim
    t.addfim(lin)
  efim
  se t.linhas
    arg0.msg2("\b\c6Magia, Tipo, Alvo\b\n" + t.remove(500))
  senao
    arg0.msg("\bNenuma magia encontrada.")
  fimse


classe adm_chab
herda comando_adm, comando_comum
const txtajuda = "\b\c3Chab\b\n\
Sintaxe: CHAB <nome>\n\
Cria uma habilidade com o nome especificado.\n\
O nome deve ser composto de letras, mas pode ter espaços no meio."

func escr # Criar habilidade
  prog p
  txt80 nome
  uint16 num
# Checa se digitou nome do ataque
  se arg1 == ""
    ret arg0.msg("Tecle o nome da habilidade após CHAB")
  fimse
# Checa se nome válido
  nome = txte(txtremove(arg1, EMDSA))
  se txtsepara(nome, "DO+DOL,DOL+DO") != nome
    ret arg0.msg("Nome inválido para habilidade: " + nome)
  senao p.existe("cmd_" + nome)
    ret arg0.msg("Já existe o comando: " + nome)
  senao p.existe("soc_" + nome)
    ret arg0.msg("Já existe o comando social: " + nome)
  fimse
# Pergunta que tipo de habilidade criar
  arg0.sock.var.opcclasse = "cmd_" + txts(txtmin(nome))
  arg0.sock.var.opcvar = "h_" + txtcopiamai(txte(nome), "A")
  arg0.sock.var.opctipo = "habilidade"
  ret p_chab("\b")


classe adm_cmag
herda comando_adm, comando_comum
const txtajuda = "\b\c3Cmag\b\n\
Sintaxe: CMAG <nome>\n\
Cria uma magia com o nome especificado.\n\
O nome deve ser composto de letras, mas pode ter espaços no meio."

func escr # Criar magia
  prog p
  txt80 nome
  uint16 num
# Checa se digitou nome do ataque
  se arg1 == ""
    ret arg0.msg("Tecle o nome da magia após CMAG")
  fimse
# Checa se nome válido
  nome = txte(txtremove(arg1, EMDSA))
  se txtsepara(nome, "DO+DOL,DOL+DO") != nome
    ret arg0.msg("Nome inválido para magia: " + nome)
  senao p.existe("magia_" + nome)
    ret arg0.msg("Já existe a magia: " + nome)
  fimse
# Pergunta que tipo de magia criar
  arg0.sock.var.opcclasse = "magia_" + txts(txtmin(nome))
  arg0.sock.var.opcvar = "m_" + txtcopiamai(txte(nome), "A")
  arg0.sock.var.opctipo = "magia"
  passo(arg0.sock, "")

func passo # Escolher o tipo de habilidade ou magia
  txt40 deriv
  casovar txtmin(arg1)
  casose
    arg0.msg("Opção inválida")
  casose "\b"
  casose ""
    arg0.passo = este
    arg0.msg("Entre com o tipo de " + arg0.var.opctipo + ", O mostra as opções, Z cancela")
    ret 1
  casose "z"
    arg0.msg("Retornando ao jogo")
    arg0.passo = ""
    arg0.var.opcclasse = ""
    arg0.var.opcnome = ""
    arg0.var.opctipo = ""
    ret 1
  casose "o"
    arg0.txtmais.limpar
    arg0.txtmais.addfim("C Habilidade ou magia comum")
    arg0.txtmais.addfim("I Identificar")
    arg0.txtmais.addfim("R Retornar")
    arg0.txtmostra
    ret 1
  casose "c"
    deriv = "comando_ataque"
    sair
  casose "i"
    deriv = "comando_identificar"
    sair
  casose "r"
    deriv = "comando_retornar"
    sair
  casofim
# Cria habilidade ou magia
  txt512 lin
  lin = arg0.var.opcclasse + "\nb-hab\nherda " + deriv
  lin += "\nconst nomevar = \"" + arg0.var.opcvar + "\""
  lin += "\nconst arg0.msgatk0 = \"\\n\\n\\n$P ataca $a, $m\\n\\n$P ataca $a, $m\\n\\n\\n"
  lin += "$P ataca e mata $a, $m\\n\\n\\n$P ataca $a, errou\\n\\n\\n"
  lin += "$P ataca $a, nada acontece\\n\\n\\n\""
  prog p
  p.criar(lin)
  criar("admordena", "b-hab")
# config:salvar
  arg0.msg("\bCriou " + arg0.var.opctipo + ": " + txt(arg0.var.opcvar, 2))
  admlog("criou " + arg0.var.opctipo + " " + txt(arg0.var.opcvar, 2))
  arg0.passo = ""
  arg0.var.opcclasse = ""
  arg0.var.opcnome = ""
  arg0.var.opctipo = ""
  ret 1


classe adm_ahab
herda comando_adm, comando_comum
const txtajuda = "\b\c3Ahab\b\n\
Sintaxe: AHAB <nomes das habilidades>\n\
Apaga uma ou mais habilidades, com os nomes especificados."

func escr # Apagar habilidade
  prog p
  se arg1 == ""
    ret arg0.msg("Tecle um ou mais nomes de habilidades após AHAB")
  fimse
  uint16 x
  enquanto txtsub(arg1, x, 1)
    se !p.existe("cmd_" + txtsub(arg1, x, 1))
      ret arg0.msg("Habilidade não existe: " + txtsub(arg1, x, 1))
    senao !$cmd_[txtsub(arg1, x, 1)].cmdmenu
      ret arg0.msg("Comando não é uma habilidade: " + txtsub(arg1, x, 1))
    fimse
    x += 1
  efim
  arg0.sock.tpasso = arg1
  passo(arg0.sock, "")

func passo # Confirmar que quer apagar habilidade
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    uint16 x
    enquanto txtsub(arg0.tpasso, x, 1)
      p.apagar("cmd_" + txtsub(arg0.tpasso, x, 1))
      x += 1
    efim
    config:salvar
    se x < 2
      arg0.msg("Habilidade apagada: " + arg0.tpasso)
      admlog("apagou habilidade " + arg0.tpasso)
    senao
      arg0.msg("Habilidades apagados: " + arg0.tpasso)
      admlog("apagou habilidades " + arg0.tpasso)
    fimse
  senao
    arg0.passo = este
    refvar m1 = txt2(arg0.tpasso) ? "habilidades" : "habilidade"
    arg0.msg("Apagar " + m1 + " " + arg0.tpasso + "? Tecle S ou N")
  fimse
  ret 1


classe adm_amag
herda comando_adm, comando_comum
const txtajuda = "\b\c3Amag\b\n\
Sintaxe: AMAG <nomes das magias>\n\
Apaga uma ou mais magias, com os nomes especificados."

func escr # Apagar magia
  prog p
  se arg1 == ""
    ret arg0.msg("Tecle um ou mais nomes de magias após AMAG")
  fimse
  uint16 x
  enquanto txtsub(arg1, x, 1)
    se !p.existe("magia_" + txtsub(arg1, x, 1))
      ret arg0.msg("Magia não existe: " + txtsub(arg1, x, 1))
    senao !$magia_[txtsub(arg1, x, 1)].cmdmenu
      ret arg0.msg("Magia não pode ser apagada: " + txtsub(arg1, x, 1))
    fimse
    x += 1
  efim
  arg0.sock.tpasso = arg1
  passo(arg0.sock, "")

func passo # Confirmar que quer apagar magia
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    uint16 x
    enquanto txtsub(tpasso, x, 1)
      p.apagar("magia_" + txtsub(tpasso, x, 1))
      x += 1
    efim
    config:salvar
    se x < 2
      arg0.msg("Magia apagada: " + arg0.tpasso)
      admlog("apagou magia " + arg0.tpasso)
    senao
      arg0.msg("Magias apagadas: " + arg0.tpasso)
      admlog("apagou magias " + arg0.tpasso)
    fimse
  senao
    arg0.passo = este
    refvar m1 = txt2(tpasso) ? "magias" : "magia"
    arg0.msg("Apagar " + m1 + " " + arg0.tpasso + "? Tecle S ou N")
  fimse
  ret 1


classe adm_ehab
herda comando_adm, comando_comum
const txtajuda = "\b\c3Ehab\b\n\
Sintaxe: EHAB <nome>\n\
Edita a habilidade com o nome especificado."

func escr # Editar habilidade
  prog p
  se arg1 == ""
    arg0.msg("Tecle o nome da habilidade após EHAB")
  senao !p.existe("cmd_" + arg1)
    arg0.msg("Habilidade não existe: " + arg1)
  senao !$cmd_[arg1].cmdmenu
    arg0.msg("Comando não é uma habilidade: " + arg1)
  senao
    arg0.sock.var.classe1 = "cmd_" + txts(txtmin(arg1))
    arg0.sock.var.menufim = "menu_hab_" + $cmd_[arg1].cmdmenu
    $[arg0.sock.var.menufim].passo(arg0.sock)
    arg0.sock.m_menu(arg0.sock.var.menufim)
  fimse


classe adm_emag
herda comando_adm, comando_comum
const txtajuda = "\b\c3Emag\b\n\
Sintaxe: EMSG <nome>\n\
Edita a magia com o nome especificado."

func escr # Editar magia
  prog p
  se arg1 == ""
    arg0.msg("Tecle o nome da magia após EMAG")
  senao !p.existe("magia_" + arg1)
    arg0.msg("Magia não existe: " + arg1)
  senao !$magia_[arg1].cmdmenu
    arg0.msg("Comando não é uma magia editável: " + arg1)
  senao
    arg0.sock.var.classe1 = "magia_" + txts(txtmin(arg1))
    arg0.sock.var.menufim = "menu_magia_" + $magia_[arg1].cmdmenu
    arg0.sock.m_menu(arg0.sock.var.menufim)
  fimse


classe adm_atklog
herda comando_adm, comando_comum
const txtajuda = "\b\c3Atklog\b\n\
Sintaxe: ATKLOG\n\
Mostra os cálculos de batalha no próximo ataque que o seu personagem fizer\n\
ou receber, exceto quando seu personagem for um alvo secundário."

func escr # Mostrar ou não cálculos de batalha
  arg0.atklog = !arg0.atklog
  se arg0.atklog
    arg0.msg("Informando cálculos de batalha.")
  senao
    arg0.msg("Não informando cálculos de batalha.")
  fimse


classe menu_hab_custo
herda comando_menu
const titulo = "Consome"
const menufim = var.menufim
const colunas = 25
#
const nome1 = "Tempo de espera"
const info1 = "Tempo mínimo que deve esperar, em décimos de segundo"
const tipo1 = "opc_numero"
const clas1 = var.classe1
const vari1 = "c_espera"
const extr1 = "5 150"
#
const nome2 = "Vida iniciante"
const info2 = "Quantos pontos de vida consome no nível iniciante"
const tipo2 = "opc_numero"
const clas2 = var.classe1
const vari2 = "c_vida1"
#
const nome3 = "Vida perito"
const info3 = "Quantos pontos de vida consome no nível perito"
const tipo3 = "opc_numero"
const clas3 = var.classe1
const vari3 = "c_vida2"
#
const nome4 = "Mana iniciante"
const info4 = "Quantos pontos de mana consome no nível iniciante"
const tipo4 = "opc_numero"
const clas4 = var.classe1
const vari4 = "c_mana1"
#
const nome5 = "Mana perito"
const info5 = "Quantos pontos de mana consome no nível perito"
const tipo5 = "opc_numero"
const clas5 = var.classe1
const vari5 = "c_mana2"
#
const nome6 = "Vigor iniciante"
const info6 = "Quantos pontos de vigor consome no nível iniciante"
const tipo6 = "opc_numero"
const clas6 = var.classe1
const vari6 = "c_move1"
#
const nome7 = "Vigor perito"
const info7 = "Quantos pontos de vigor consome no nível perito"
const tipo7 = "opc_numero"
const clas7 = var.classe1
const vari7 = "c_move2"


classe menu_hab_alvo
herda comando_menu
const titulo = "Afeta o alvo"
const menufim = var.menufim
const colunas = 25
#
const nome1 = "Condição"
const tipo1 = "opc_opcao"
const clas1 = var.classe1
const vari1 = "a_cond"
const extr1 = "Um ou mais pontos de vida\nNenhum ponto de vida\nNenhuma condição"
#
const nome2 = "Vida"
const info2 = "Quantos pontos de vida ganha"
const tipo2 = "opc_numero"
const clas2 = var.classe1
const vari2 = "a_vida1"
#
const nome3 = "Vida por nível"
const info3 = "Quantos pontos de vida ganha a cada nível"
const tipo3 = "opc_numero"
const clas3 = var.classe1
const vari3 = "a_vida2"
#
const nome4 = "Mana"
const info4 = "Quantos pontos de mana ganha"
const tipo4 = "opc_numero"
const clas4 = var.classe1
const vari4 = "a_mana1"
#
const nome5 = "Mana por nível"
const info5 = "Quantos pontos de mana ganha a cada nível"
const tipo5 = "opc_numero"
const clas5 = var.classe1
const vari5 = "a_mana2"
#
const nome6 = "Vigor"
const info6 = "Quantos pontos de vigor ganha"
const tipo6 = "opc_numero"
const clas6 = var.classe1
const vari6 = "a_move1"
#
const nome7 = "Vigor por nível"
const info7 = "Quantos pontos de vigor ganha a cada nível"
const tipo7 = "opc_numero"
const clas7 = var.classe1
const vari7 = "a_move2"
#
const nome8 = "Nota vida/mana/vigor"
const extr8 = "Os valores de vida, mana e vigor são para o nível itermediário.\n\
Eles podem diminuir em até 50% (iniciante) ou aumentar em até 50% (perito)."
#
const nome9 = "Efeito 1"
const info9 = "Nome do efeito"
const tipo9 = "opc_linha"
const clas9 = var.classe1
const vari9 = "a_efeito1"
#
const nome10 = "Precisão 1"
const info10 = "Probabilidade de criar o efeito, 100=não falha"
const tipo10 = "opc_numero"
const clas10 = var.classe1
const vari10 = "a_prob1"
const extr10 = "0 100"
#
const nome11 = "Efeito 2"
const info11 = "Nome do efeito"
const tipo11 = "opc_linha"
const clas11 = var.classe1
const vari11 = "a_efeito2"
#
const nome12 = "Precisão 2"
const info12 = "Probabilidade de criar o efeito, 100=não falha"
const tipo12 = "opc_numero"
const clas12 = var.classe1
const vari12 = "a_prob2"
const extr12 = "0 100"
#
const nome13 = "Efeito 3"
const info13 = "Nome do efeito"
const tipo13 = "opc_linha"
const clas13 = var.classe1
const vari13 = "a_efeito3"
#
const nome14 = "Precisão 3"
const info14 = "Probabilidade de criar o efeito, 100=não falha"
const tipo14 = "opc_numero"
const clas14 = var.classe1
const vari14 = "a_prob3"
const extr14 = "0 100"
#
const nome15 = "Remover efeitos"
const info15 = "Efeitos que serão removidos; uma linha por efeito"
const tipo15 = "opc_texto"
const clas15 = var.classe1
const vari15 = "a_remove"


classe menu_hab_msg0
herda comando_menu
const titulo = "Mensagens 1"
const menufim = var.menufim
const colunas = 25
#
const titu1 = " * Ao usar, exceto poções comidas etc"
#
const nome1 = "Perso"
const tipo1 = "opc_txtlinha"
const clas1 = var.classe1
const vari1 = "msgatk" + txtfim(tpasso, 1)
const extr1 = "0"
#
const nome2 = "Alvo"
const info2 = "Se vazio, pega mensagem da opção 1"
const tipo2 = "opc_txtlinha"
const clas2 = var.classe1
const vari2 = "msgatk" + txtfim(tpasso, 1)
const extr2 = "1"
#
const nome3 = "Outros"
const info3 = "Se vazio, pega mensagem da opção 1"
const tipo3 = "opc_txtlinha"
const clas3 = var.classe1
const vari3 = "msgatk" + txtfim(tpasso, 1)
const extr3 = "2"
#
const titu4 = " * Acertou em si mesmo"
#
const nome4 = "Perso"
const tipo4 = "opc_txtlinha"
const clas4 = var.classe1
const vari4 = "msgatk" + txtfim(tpasso, 1)
const extr4 = "3"
#
const nome5 = "Outros"
const info5 = "Se vazio, pega mensagem da opção 4"
const tipo5 = "opc_txtlinha"
const clas5 = var.classe1
const vari5 = "msgatk" + txtfim(tpasso, 1)
const extr5 = "4"
#
const titu6 = " * Acertou outro personagem"
#
const nome6 = "Perso"
const tipo6 = "opc_txtlinha"
const clas6 = var.classe1
const vari6 = "msgatk" + txtfim(tpasso, 1)
const extr6 = "5"
#
const nome7 = "Alvo"
const info7 = "Se vazio, pega mensagem da opção 6"
const tipo7 = "opc_txtlinha"
const clas7 = var.classe1
const vari7 = "msgatk" + txtfim(tpasso, 1)
const extr7 = "6"
#
const nome8 = "Outros"
const info8 = "Se vazio, pega mensagem da opção 6"
const tipo8 = "opc_txtlinha"
const clas8 = var.classe1
const vari8 = "msgatk" + txtfim(tpasso, 1)
const extr8 = "7"
#
const titu9 = " * Matou o alvo"
#
const nome9 = "Perso"
const tipo9 = "opc_txtlinha"
const clas9 = var.classe1
const vari9 = "msgatk" + txtfim(tpasso, 1)
const extr9 = "8"
#
const nome10 = "Alvo"
const info10 = "Se vazio, pega mensagem da opção 9"
const tipo10 = "opc_txtlinha"
const clas10 = var.classe1
const vari10 = "msgatk" + txtfim(tpasso, 1)
const extr10 = "9"
#
const nome11 = "Outros"
const info11 = "Se vazio, pega mensagem da opção 9"
const tipo11 = "opc_txtlinha"
const clas11 = var.classe1
const vari11 = "msgatk" + txtfim(tpasso, 1)
const extr11 = "10"
#
const titu12 = " * Errou o alvo"
#
const nome12 = "Perso"
const tipo12 = "opc_txtlinha"
const clas12 = var.classe1
const vari12 = "msgatk" + txtfim(tpasso, 1)
const extr12 = "11"
#
const nome13 = "Alvo"
const info13 = "Se vazio, pega mensagem da opção 12"
const tipo13 = "opc_txtlinha"
const clas13 = var.classe1
const vari13 = "msgatk" + txtfim(tpasso, 1)
const extr13 = "12"
#
const nome14 = "Outros"
const info14 = "Se vazio, pega mensagem da opção 12"
const tipo14 = "opc_txtlinha"
const clas14 = var.classe1
const vari14 = "msgatk" + txtfim(tpasso, 1)
const extr14 = "13"
#
const titu15 = " * Não teve efeito"
#
const nome15 = "Perso"
const tipo15 = "opc_txtlinha"
const clas15 = var.classe1
const vari15 = "msgatk" + txtfim(tpasso, 1)
const extr15 = "14"
#
const nome16 = "Alvo"
const info16 = "Se vazio, pega mensagem da opção 15"
const tipo16 = "opc_txtlinha"
const clas16 = var.classe1
const vari16 = "msgatk" + txtfim(tpasso, 1)
const extr16 = "15"
#
const nome17 = "Outros"
const info17 = "Se vazio, pega mensagem da opção 15"
const tipo17 = "opc_txtlinha"
const clas17 = var.classe1
const vari17 = "msgatk" + txtfim(tpasso, 1)
const extr17 = "16"


classe menu_hab_msg1
herda menu_hab_msg0
const titulo = "Mensagens 2"


classe menu_hab_msg2
herda menu_hab_msg0
const titulo = "Mensagens 3"


classe menu_hab_msg3
herda menu_hab_msg0
const titulo = "Mensagens 4"


classe menu_hab_msg4
herda menu_hab_msg0
const titulo = "Mensagens 5"


classe menu_hab_comum
herda comando_menu
const nome3 = "Precisão"
const info3 = "Para habilidades e magias que por natureza são imprecisas\n\
De 0 (sempre erra) a 100 (mesmo que atacar sem arma) ou 101 (nunca falha)"
const tipo3 = "opc_numero"
const clas3 = var.classe1
const vari3 = "precisao"
const extr3 = "0 101"
#
const nome4 = "Requer arma"
const info4 = "Se vazio, a arma é ignorada: ataca sem arma mesmo se estiver empunhando uma"
const tipo4 = "opc_vetor"
const clas4 = var.classe1
const vari4 = "tipoarma"
const extr4 = config:arma_txt
#
const nome5 = "Consome"
const tipo5 = "menu_hab_custo--"
#
const nome6 = "Preço da aula"
const info6 = "Quantas moedas os personagens cobram para ensinar"
const tipo6 = "opc_numero"
const clas6 = var.classe1
const vari6 = "valor"
#
const nome7 = "Depende de"
const info7 = "Habilidades, magias e idiomas necessários para aprender esse ataque"
const tipo7 = "opc_tipodep"
const clas7 = var.classe1
const vari7 = "depende"
#
const nome8 = "Iniciante nível"
const info8 = "A partir de que nível pode ter a primeira aula"
const tipo8 = "opc_numero"
const clas8 = var.classe1
const vari8 = "aulaini"
#
const nome9 = "Perito nível"
const info9 = "A partir de que nível pode ter todas as aulas"
const tipo9 = "opc_numero"
const clas9 = var.classe1
const vari9 = "aulafim"
#
const nome10 = "Somente tipos"
const info10 = "Se estiver vazio, todas as classes e raças podem aprender"
const tipo10 = "opc_tipos"
const clas10 = var.classe1
const vari10 = "tipoperso"


classe menu_hab_ataque
herda menu_hab_comum
const titulo = "Hab " + txt(var.classe1, 4)
const colunas = 25
#
const nome1 = "Alvo"
const tipo1 = "opc_opcao"
const clas1 = var.classe1
const vari1 = "tipoalvo"
const extr1 = "Qualquer um; ataque\n\
Exceto o personagem; ataque\n\
Todos dividindo o ataque\n\
Outros dividindo o ataque\n\
Todos sem dividir o ataque\n\
Outros sem dividir o ataque\n\
Qualquer um; não é ataque\n\
O personagem; não é ataque\n\
Ataque automático\n\
Nenhum (não ataca)"
#
#
const nome2 = "Condição"
const tipo2 = "opc_opcao"
const clas2 = var.classe1
const vari2 = "a_batalha"
const extr2 = "Nenhuma\nDurante a batalha\nFora da batalha"
#
const nome11 = "Afeta o alvo"
const tipo11 = "menu_hab_alvo--"
#
const titu12 = " * Ataque"
#
const nome12 = "Tipo"
const tipo12 = "opc_opcao"
const clas12 = var.classe1
const vari12 = "tipoatk"
const extr12 = config:atknomes
#
const nome13 = "Força"
const info13 = "Em porcentagem; se 0 o alvo não perde pontos de vida"
const tipo13 = "opc_numero"
const clas13 = var.classe1
const vari13 = "ataque"
#
const nome14 = "Velocidade"
const info14 = "Em porcentagem"
const tipo14 = "opc_numero"
const clas14 = var.classe1
const vari14 = "vel"
#
const nome15 = "Precisão perso"
const info15 = "Quanta precisão o personagem ganha durante um ataque com essa arma"
const tipo15 = "opc_numero"
const clas15 = var.classe1
const vari15 = "addprecisao"
#
const nome16 = "Bônus"
const info16 = "Quais raças e classes atacam com mais força"
const tipo16 = "opc_tipos"
const clas16 = var.classe1
const vari16 = "tipobonus"
#
const titu17 = " * Textos"
#
const nome17 = "Informações"
const info17 = "Informações extras"
const tipo17 = "opc_texto"
const clas17 = var.classe1
const vari17 = "msgextra"
#
const nome18 = "Mensagens 1"
const tipo18 = "menu_hab_msg0--"
#
const nome19 = "Mensagens 2"
const tipo19 = "menu_hab_msg1--"
#
const nome20 = "Mensagens 3"
const tipo20 = "menu_hab_msg2--"
#
const nome21 = "Mensagens 4"
const tipo21 = "menu_hab_msg3--"
#
const nome22 = "Mensagens 5"
const tipo22 = "menu_hab_msg4--"
#
const nome23 = "Menus de mensagens"
const tipo23 = "opc_ajuda--"
const extr23 = menu_hab_ataque:msg1 + "\n" + menu_hab_ataque:msg2
#
const msg1 = "\c3Menus de mensagens:\b\n\
Em princípio, pode-se colocar todas as mensagens no menu Mensagens 1.\n\
Se você colocar mensagens em mais de um desses menus, as mensagens\n\
de batalha serão pegas de um dos menus, escolhido aleatoriamente.\n\
O efeito do golpe será o mesmo, apenas a mensagem muda.\n\
\c3Perso, alvo e outros:\b\n\
Se quiser mensagens diferentes para o personagem, para o alvo e para\n\
quem estiver assistindo, coloque as mensagens nas opções perso, alvo\n\
e outros. Se alvo e outros estiverem vazios, será usada a do perso."
const msg2 = "\c3Ao usar, exceto poções comidas etc:\b\n\
É a mensagem enviada assim que o personagem usa a habilidade ou magia,\n\
independente dela falhar ou não. No entanto, essa mensagem não é enviada\n\
quando a magia for disparada por um item (quando o personagem comeu ou\n\
bebeu o item, usou pergaminho, etc)."


classe menu_magia_ataque
herda menu_hab_ataque
const titulo = "Magia " + txt(var.classe1, 6)
const colunas = 25
