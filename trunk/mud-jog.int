classe jogsock
herda adm_comum, adm_misc, adm_tipo, adm_atk, adm_sala, adm_perso, adm_item, adm_social, \
adm_efeito, adm_atrib, adm_reset, adm_casa
# Comunicação com o jogador
# Funções predefinidas:
# ini = objeto foi criado
# fim = objeto está sendo apagado
# info = tipo (l=local, t=telnet, p=papovox, b=bot) + espaço + extra
# sendo que extra pode ser o endereço IP ou o nome da sala
# msgsock(texto) = envia mensagem para jogador
# msgsala(texto) = envia mensagem para todos da sala
# msgtodos(texto) = envia mensagem para todos os jogadores
# recebe(texto) = executado sempre que receber mensagem do jogador
# salaobj(listaobj) = adicionar na listaobj com os objetos na mesma sala
#
ref perso # Personagem controlado pelo jogador
indiceobj cnome # "un " + nome codificado
txt20 nome # Nome do personagem
txt20 nomefim # Nome ao apresentar quando o usuário sair do jogo
textotxt txtmais # Texto do tecle M para mais
int1 jogconfig.24 # Configurações do personagem
txt512 ultimocom # Último comando digitado pelo usuário
textotxt comandos # Comandos em espera para serem processados
intexec msgprompt # Para enviar mensagens do prompt
intinc tempojogo # Tempo da sessão
intdec msgtot1 # Usado no controle de banda das mensagens para o jogador
real msgtot2 # Usado no controle de banda das mensagens para o jogador
#
txt20 passo # Passo atual; "" se estiver jogando
txt100 tpasso # Texto usado no passo atual
textovar var # Variáveis criadas dinamicamente
textotxt teditor # Texto usado no editor
textopos leditor # Linha atual no editor
textopos leditor1 # Início de bloco
textopos leditor2 # Fim de bloco
listaobj lmonit # Lista de quem está monitorando esse jogador
listaitem imonit # Um item de lmonit
txt512 peditor # Texto sendo procurado, opção P do editor
textotxt transf # Área de transferência do editor

func ini
  jogconfig.bits = 12 # Cores(8) + acentuação(4)
  refvar t = info
  refvar ban = (txt1(t) == "t" || txt1(t) == "p") && $miscban.banido(txt2(t))
  ban ? config:apresban && msg(config:apresban) : config:apres && msg(config:apres)
  reinicia

func fim
  lmonit.limpar
  perso.fechou(txt1(info) == "b")
  mudaperso(nulo)
  nomefim && msgchegou("* Saiu: " + nome + ", " + nomefim, "* " + nome + " saiu")

func mudaperso # Muda o personagem, arg0=novo personagem
  ret perso == arg0 || arg0.sock, nulo
  lmonit.limpar, imonit.limpar
  ref r
# Indica que o jogador não controla o antigo personagem
  epara r = perso, r, r = r.dono
    r.socktot -= 1
  efim
  perso.sock = nulo
# Indica que o jogador controla o novo personagem
  perso = arg0
  perso.sock = este
  epara r = perso, r, r = r.dono
    r.socktot += 1
  efim

func reinicia # Volta ao início: pede o nome do personagem
  jogconfig.bits = 12 # Cores(8) + acentuação(4)
  cnome = "un", nome = ""
  mudaperso(nulo)
  p_perso

func recebe # Recebeu mensagem do jogador
  ret passo || !perso.var.t_[txt1(arg0)], recebe1(arg0)
  $cmdalias.m_0 = txt2(arg0)
  textotxt t
  t.addfim($cmdalias.mens(perso.var.t_[txt1(arg0)]))
  debug d
  enquanto t.linhas
    d.ini
    ret recebe1(t.remove), nulo
  efim

func recebe1 # Função recebe após uso de atalhos
# Retorna verdadeiro se deve cancelar os comandos do alias
# Checa quem está monitorando
  se lmonit
    casovar passo
    casose
      listaitem i
      epara i = lmonit.ini, i, i.depois
        i.obj.msg("<" + arg0, 1), i.obj.msgprompt = 1
      efim
    casose "criasenha1"
    casose "criasenha2"
    casose "entrasenha"
    casose "mudasenha1"
    casose "mudasenha2"
    casose "mudasenha3"
    casose "autoapagar2"
    casofim
  fimse
# Atualiza tempo para sair do MUD
  temposair
# Teclar M para mais
  se arg0 == "m" && txtmais.linhas
    txtmostra
    ret
  fimse
# Passo atual / executa comando
  txtmais.limpar
  se p_[passo](arg0) # Função do passo
    comandos.limpar
    ret
  senao arg0 && arg0 == config:senhaadm # Administração
    jogconfig.23 = !jogconfig.23 # Administração
    jogconfig.19 = jogconfig.23 # Canal AC
    perso.jogconfig.bits = jogconfig.bits
    perso.recalc = 1 # Para atualizar perso.bitver
    txt100 t1
    se jogconfig.23
      msg("Você virou admin, tecle ADM para saber os comandos.")
      t1 = "*** " + perso.nome + " virou admin."
    senao
      msg("Você deixou de ser admin.")
      t1 = "*** " + perso.nome + " deixou de ser admin."
    fimse
    indiceitem item
    epara item.ini("un "), txt1(item.txt) == "un", item.depois
      item.obj.jogconfig.23 && item.obj != este && item.obj.msg(t1)
    efim
    ret
  senao arg0 != "!" # Anota o último comando
    casovar txt(arg0, 0, 1)
    casose "."
      ultimocom = "chat " + txt(arg0, 1)
      sair
    casose "'"
      ultimocom = "falar " + txt(arg0, 1)
      sair
    casose "="
      ultimocom = "telepatia " + txt(arg0, 1)
      sair
    casose
      ultimocom = arg0
    casofim
  fimse
# Comando de administração
  se jogconfig.23 && cmd_[txt1(ultimocom)](txt2(ultimocom))
    comandos.limpar
    ret
# Comando para o jogo
  senao !perso.p_espera # Checa se pode processar o comando
    perso.teclou(ultimocom) # Personagem processa comando
    perso.p_espera < 2 && (perso.p_espera = 2)
  senao perso.atktempo # Checa se está batalhando
# comandos && msg("Feito, aguarde")
    comandos.limpar
    comandos.addfim(ultimocom)
  senao comandos.bytes < 1024 # Não chegou ao limite de comandos
    comandos.addfim(ultimocom)
  senao # Chegou ao limite de comandos
    msg("Aguarde")
    ret 1

func espera_exec # Chamado por p_espera do personagem
  se comandos
    perso.teclou(comandos.remove(1)) # Personagem processa comando
    perso.p_espera < 2 && (perso.p_espera = 2)

func temposair # Acerta variáveis de tempo para sair do MUD
  casovar txt1(info)
  casose "t" # Conectado via Papovox
  casose "p" # Conectado via Telnet
    perso.p_tempofim = 30
    sair
  casose # Rodando como bot ou independente
    perso.p_tempofim = 0
  casofim
  !perso.p_tempoatu && (perso.p_tempoatu = 150)

func msg2 # Mensagem grande para o jogador
  txtmais.limpar
  txtmais.addfim(arg0)
  txtmostra

func txtmostra # Mostra próximo bloco de txtmais
  se txtmais.linhas <= 10
    msg(txtmais.remove(10))
  senao
    msg(txtmais.remove(9) + "\nTecle M para mais")

func msg # Envia mensagem
# arg0=mensagem
# arg1 é verdadeiro se deve apenas enviar a mensagem
  se arg1
  senao lmonit
    msgprompt = 1
    listaitem i
    epara i = lmonit.ini, i, i.depois
      i.obj.msg(">" + arg0, 1), i.obj.msgprompt = 1
    efim
  senao
    msgprompt = 1
  fimse
# Controle de banda
  ret msgtot1 >= admbanda:b1, nulo
  msgtot1 += intdiv(msgtot2 += inttotal(arg0) / admbanda:b2)
  msgtot2 -= intdiv(msgtot2)
# Configuração do jogador
  casovar jogconfig.bits & 12
  casose "0" # -CORES -ACENTO
    ret msgsock("\b" + txtremove(arg0, "C7"))
  casose "4" # +CORES -ACENTO
    ret msgsock(txtremove(arg0, "7"))
  casose "8" # -CORES +ACENTO
    ret msgsock("\b" + txtremove(arg0, "C"))
  casose "12" # +CORES +ACENTO
    ret msgsock(arg0)
  casofim

func msgprompt_exec
  se !perso
  senao perso.atkenv
    ret !jogconfig.7, nulo
    refvar t1 = $mens_prompt.mens(perso.var.z_bprompt, perso) + "\b"
    msg(t1, 1)
  senao
    ret !jogconfig.6, nulo
    refvar t1 = $mens_prompt.mens(perso.var.z_prompt, perso) + "\b"
    msg(t1, 1)

func msgchegou # Mensagem de usuário chegando ou saindo
# arg0 = mensagem para administradores
# arg1 = mensagem para usuários normais
  se config:entrainfo
    indiceitem item
    epara item.ini("un "), txt1(item.txt) == "un", item.depois
      continuar item.obj == este
      se item.obj.jogconfig.23 # Se usuário é admin...
        arg0 && item.obj.msg(arg0)
      senao config:entrainfo == 2 && !jogconfig.17
        arg1 && item.obj.msg(arg1)
      fimse
    efim

func p_perso # Entrando no jogo: digitar o nome do personagem
  indiceitem ind
  txt20 texto
  arqsav sav1
  passo = "perso", tpasso = nome = cnome = ""
  texto = txtnome(arg0)
  se !arg0
    msg("Digite o nome do seu personagem")
  senao inttotal(arg0) < 3 || inttotal(arg0) > 16
    msg("O nome deve ter de 3 a 16 caracteres; digite outro")
  senao intnome(arg0) || txtproc(txtsepara("a" + arg0, "L+D"), " ") >= 0
    msg("Nome inválido; digite outro")
  senao sav1.existe("sav/" + texto + ".sav") # Carregar jogo salvo
    msg("Personagem '" + txtmaimin(arg0) + "' já existe")
    tpasso = txtmaimin(arg0)
    p_entrasenha
  senao ind.obj("un " + texto)
    msg("Nome já está sendo usado; digite outro")
  senao # Criar personagem
    refvar t = info
    se (txt1(t) == "t" || txt1(t) == "p") && $miscban.banido(txt2(t))
      msg(config:apresban)
      apagar(este)
    senao $admnomesnao.nomes.n_[texto] # Checa se nome permitido
      msg("Nome não permitido para personagem")
    senao
      cnome = "un " + texto
      nome = txtmaimin(arg0)
      p_perso1
    fimse
  fimse
  ret 1

func p_perso1
  se arg0 == "N"
    p_perso
  senao arg0 == "S"
    config:salvacria ? p_criasenha1 : config:email ? p_email1 : p_sexo1
    nomefim = info
    msgchegou("* Criando personagem: " + nome + ", " + nomefim)
  senao
    passo = "perso1"
    msg("Deseja criar o personagem '" + nome + "'? (tecle S ou N)")

func p_criasenha1 # Digitar a senha ao criar personagem
  passo = "criasenha1"
  tpasso = txt1(tpasso)
  se !arg0
    msg("Digite uma senha para o personagem")
  senao inttotal(arg0) < 5 || inttotal(arg0) > 16
    msg("A senha deve ter de 5 a 16 caracteres, digite outra")
  senao intsenha(arg0) == 3
    msg("Senha deve ter letras e números, digite outra")
  senao intsenha(arg0)
    msg("Senha inválida, digite outras")
  senao
    var.j_senha = arg0
    p_criasenha2
  fimse
  ret 1

func p_criasenha2 # Repetir a senha ao criar personagem
  passo = "criasenha2"
  se !arg0
    msg("Digite novamente a senha")
  senao arg0 != var.j_senha
    msg("As senhas são diferentes")
    var.limpar("j_")
    p_perso
  senao
    config:email ? p_email1 : p_sexo1
  fimse
  ret 1

func p_email1 # Digitar o e-mail
  passo = "email1"
  txt100 lin.3
  se !arg0
    se config:email == 1
      msg("Digite seu e-mail ou N para nenhum")
    senao
      msg("Digite seu e-mail")
    fimse
  senao arg0 == "n" && config:email == 1
    p_sexo1
  senao txtproc(arg0, " ") >= 0
    msg("O e-mail não pode conter espaços; digite outro")
  senao txtremove(arg0, "7") !== arg0
    msg("E-mail contém caracteres inválidos, digite outro")
  senao lin.separar(arg0, "@") != 2 || lin.0 == ""
    msg("E-mail inválido; digite outro")
  senao txtfim(lin.1, 1) == "." || txtproc(lin.1, ".") <= 0
    msg("E-mail inválido; digite outro")
  senao
    var.j_email = arg0
    p_sexo1
  fimse
  ret 1

func p_sexo1 # Digitar H ou M
  passo = "sexo1"
  se arg0 != "H" && arg0 != "M"
    msg("Você é homem ou mulher? (tecle H ou M)")
    ret 1
  fimse
  var.j_sexo = arg0 == "H" # 0=feminino, 1=masculino
  ret p_raca1

func p_raca1 # Começa a escolha da raça
  tpasso = "raça"
  ret p_raca2

func p_raca2 # Escolhe a raça
  txt100 lin
  prog p
# Obtém a lista de raças e checa se escolheu uma raça
  txtmais.limpar
  epara p.iniclasse("tipo_"), p.lin, p.depois
    continuar txts([p.texto]:menu) != tpasso
    txtmais.addfim(txt(txtmais.linhas + 1) + ". " + [p.texto]:nome)
    lin = p.texto
    continuar txt(arg0) != txt(txtmais.linhas)
    txtmais.limpar, tpasso = p.texto
    msg2([tpasso]:desc ? [tpasso]:desc : [tpasso]:nome)
    ret p_raca3
  efim
# Somente uma raça para escolher: escolhe automaticamente
  se txtmais.linhas == 1
    txtmais.limpar
    var.j_tipo1 = txt(lin, 5)
    ret p_classe1
# Nenhuma raça para escolher: passa para o próximo menu
  senao txtmais.linhas == 0
    txtmais.limpar
    tpasso != "raça" && (var.j_tipo1 = tpasso)
    ret p_classe1
# Mais de uma raça: apresenta o menu
  senao
    passo = "raca2"
    se arg0
      txtmais.addini("Raça inválida; escolha uma:")
    senao tpasso == "raça"
      txtmais.addini("Escolha uma raça:")
    senao
      txtmais.addini("Escolha uma sub-raça:")
    fimse
    txtmostra
    ret 1

func p_raca3 # Mostra informações da raça e pede confirmação
  passo = "raca3"
  se arg0 == "S"
    tpasso = txt(tpasso, 5)
    ret p_raca2
  senao arg0 == "N"
    tpasso = txts([tpasso]:menu)
    ret p_raca2
  senao
    msg("Você quer essa raça? (tecle S ou N)")
    ret 1

func p_classe1 # Começa a escolha da raça
  tpasso = "classe"
  ret p_classe2

func p_classe2 # Escolhe a classe
  txt100 lin
  prog p
# Obtém a lista de classes e checa se escolheu uma classe
  txtmais.limpar
  epara p.iniclasse("tipo_"), p.lin, p.depois
    continuar txts([p.texto]:menu) != tpasso
    se [p.texto]:racas
      se txtproc("\n" + txts([p.texto]:racas) + "\n", "\n" + var.j_tipo1 + "\n") < 0
        continuar
      fimse
    fimse
    txtmais.addfim(txt(txtmais.linhas + 1) + ". " + [p.texto]:nome)
    lin = p.texto
    continuar txt(arg0) != txt(txtmais.linhas)
    txtmais.limpar, tpasso = p.texto
    msg2([tpasso]:desc ? [tpasso]:desc : [tpasso]:nome)
    ret p_classe3
  efim
# Somente uma classe para escolher: escolhe automaticamente
  se txtmais.linhas == 1
    txtmais.limpar
    var.j_tipo2 = txt(lin, 5)
    ret p_entrajogo
# Nenhuma classe para escolher: passa para o próximo menu
  senao txtmais.linhas == 0
    txtmais.limpar
    tpasso != "classe" && (var.j_tipo2 = tpasso)
    ret p_entrajogo
# Mais de uma classe: apresenta o menu
  senao
    passo = "classe2"
    se arg0
      txtmais.addini("Classe inválida; escolha uma:")
    senao tpasso == "classe"
      txtmais.addini("Escolha uma classe:")
    senao
      txtmais.addini("Escolha uma sub-classe:")
    fimse
    txtmostra
    ret 1

func p_classe3 # Mostra informações da classe e pede confirmação
  passo = "classe3"
  se arg0 == "S"
    tpasso = txt(tpasso, 5)
    ret p_classe2
  senao arg0 == "N"
    tpasso = txts([tpasso]:menu)
    ret p_classe2
  senao
    msg("Você quer essa classe? (tecle S ou N)")
    ret 1

func p_entrajogo # Entrar no jogo: cria personagem
  passo = ""
  jogconfig.bits = config:jogconfig # Configurações iniciais
  msg("Iniciando jogo; para ajuda tecle AJUDA")
  var.j_inivar = txt(tipo_[var.j_tipo1]:inivar) + "," + tipo_[var.j_tipo2]:inivar
  mudaperso(criar("jogador", nulo, 0, var.j_inivar))
  perso.cnome = "pn " + txt2(cnome)
  perso.nome = nome
  perso.jogconfig.bits = jogconfig.bits
  perso.psexo = var.j_sexo
  perso.senha = var.j_senha
  perso.tipo1 = var.j_tipo1
  perso.tipo2 = var.j_tipo2
  perso.var.z_email = var.j_email
  var.limpar("j_")
  perso.mudadono(config:salaini)
  perso.recalc = 1
  temposair # Acerta tempo para sair do MUD
  se perso.senha
    !perso.salvar && msg("Não foi possível salvar o personagem")
  fimse
  msgchegou("* Criou personagem: " + nome + ", " + nomefim, "* " + nome + " entrou")
  $mens.p(perso)
  $mens.mvis2("", "$P chegou.")
  ret 1

func p_entrasenha # Entrar com a senha para carregar jogo salvo
  indiceitem ind
  txt20 texto
  arqsav sav1
  ref r
# msg(texto + " , " + arg0)
  texto = txtnome(tpasso)
  passo = "entrasenha"
  se !arg0
    msg("Digite a senha ou, se o personagem não for seu, tecle Z")
  senao arg0 == "z"
    nome = "", p_perso
  senao !sav1.senha("sav/" + texto + ".sav", txtmin(arg0))
    msg("Senha incorreta")
    casovar txt1(info)
    casose "t" # Conectado via Papovox
    casose "p" # Conectado via Telnet
      apagar(este)
      ret
    casofim
    p_perso
  senao ind.obj("pn " + texto)
    r = ind.obj("un " + texto)
    casovar txt1(r.info)
    casose "t" # Conectado via Papovox
    casose "p" # Conectado via Telnet
      apagar(r)
      r.mudaperso(nulo)
      r.msg("Jogador " + info + " começou a usar seu personagem")
      r.nomefim = ""
    casose ""
      sair
    casose
      r.msg("Jogador " + info + " começou a usar seu personagem")
      r.reinicia
    casofim
    passo = ""
    mudaperso(ind.obj("pn " + texto))
    nome = perso.nome
    cnome = "un " + texto
    jogconfig.bits = perso.jogconfig.bits
    temposair # Acerta tempo para sair do MUD
    msg("Reconectado")
    txt200 lin
    nomefim = info
    lin = "* Entrou: " + nome + ", " + info + ", N" + perso.pnivel + " $" + perso.var.z_moedas_
    msgchegou(lin, "* " + nome + " entrou")
    perso.teclou("olhar")
  senao
# Primeiro cria personagem
    passo = ""
    nome = tpasso
    cnome = "un " + texto
    mudaperso(criar("jogador"))
    perso.cnome = "pn " + texto
    perso.nome = nome
    perso.senha = txtmin(arg0)
# Carrega personagem
    listaobj l1
    l1.addfim(perso)
    sav1.ler("sav/" + texto + ".sav", l1)
    nome = perso.nome
    jogconfig.bits = perso.jogconfig.bits
# Acerta variáveis
    listaitem item
    debug d
    epara item = l1.ini, item, item.depois
      d.ini, item.obj.ajustaobj
    efim
    epara item = l1.fim, item, item.antes
      d.ini
      !item.obj.dono && !item.obj.jog && apagar(item.obj)
      item.obj.var.limpar("d_", "j_")
      item.obj.ajustapeso, item.obj.acertapos, item.obj.recalc = 1
    efim
# Muda de sala e volta ao jogo
    perso.p_espera = 2 # Para processar um comando do jogador só após mudar de sala
    criar("jogsock_retorna", perso, $[perso.salanome]) # Para mudar de sala
    msg("Continuando jogo salvo.")
    txt200 lin
    lin = "* Entrou: " + nome + ", " + info + ", N" + perso.pnivel + " $" + perso.var.z_moedas_
    msgchegou(lin, "* " + nome + " entrou")
    nomefim = info
  fimse
  ret 1

func p_mudasenha1 # Digitar a senha atual para mudar a senha
  passo = "mudasenha1"
  se !arg0
    msg("Digite a senha atual do personagem ou z para desistir")
  senao arg0 == "z"
    passo = ""
    msg("Cancelado")
  senao arg0 != perso.senha
    msg("Senha incorreta; cancelado")
    passo = ""
  senao
    p_mudasenha2
  fimse
  ret 1

func p_mudasenha2 # Digitar a nova senha
  passo = "mudasenha2"
  se !arg0
    msg("Digite a nova senha do personagem ou Z para desistir")
  senao arg0 == "z"
    passo = ""
    msg("Cancelado")
  senao inttotal(arg0) < 5 || inttotal(arg0) > 16
    msg("A senha deve ter de 5 a 16 caracteres, digite outra")
  senao intsenha(arg0) == 3
    msg("Senha deve ter letras e números, digite outra")
  senao intsenha(arg0)
    msg("Senha inválida, digite outras")
  senao
    tpasso = arg0
    p_mudasenha3
  fimse
  ret 1

func p_mudasenha3 # Repetir a senha digitada
  passo = "mudasenha3"
  se !arg0
    msg("Digite novamente a senha")
  senao tpasso != arg0
    msg("As senhas são diferentes; cancelado")
    passo = ""
  senao
    perso.senha = txtmin(arg0)
    msg(perso.salvar ? "Jogo salvo" : "Não foi possível salvar")
    passo = ""
  fimse
  ret 1

func p_autoapagar1
  passo = "autoapagar1"
  se !arg0
    msg("Deseja realmente apagar o personagem " + perso.nome + "? Tecle S ou N")
  senao arg0 == "s"
    p_autoapagar2
  senao
    msg("Autoapagar cancelado")
    passo = ""
  fimse
  ret 1

func p_autoapagar2
  arqsav sav1
  passo = "autoapagar2"
  se !arg0
    msg("Digite a senha ou tecle Z para cancelar")
  senao arg0 == "z"
    msg("Autoapagar cancelado")
    passo = ""
  senao arg0 != perso.senha
    msg("Senha incorreta; autoapagar cancelado")
    passo = ""
  senao sav1.apagar("sav/" + txt2(cnome) + ".sav")
    perso.senha = ""
    apagar(perso)
    $miscsav.apagousav(txt2(cnome))
  senao
    msg("Não foi possível apagar o personagem.")
    passo = ""
  fimse
  ret 1


classe jogsock_retorna
# Coloca o jogador na sala em que estava, logo após entrar no MUD
ref perso
ref sala
intexec ex

func ini
  perso = arg0, sala = arg1, ex = 1
# telatxt t
# t.msg("Perso " + arg0 + " sala " + arg1 + "\n")

func ex_exec
  apagar(este)
  perso.mudadono(sala ? sala : config:salasav)
  temposair # Acerta tempo para sair do MUD
  $mens.p(perso)
  $mens.mvis2("", "$P chegou.")


classe jogador
herda comum_persoanimal
# Personagem no jogo
const jog = 1 # Para identificar que é jogador
const ident = nome
indiceobj cnome # "pn " + nome codificado (usado ao reconectar)
sav txt20 nome # Nome do personagem
sav txt40 salanome # Nome da sala
const msexo = psexo # Sexo do personagem
sav int1 jogconfig.24 # Para salvar sock.jogconfig
txt20 senha # Senha do jogo salvo, ou "" se não estiver salvo
sav listaobj dentro3 # Lista de animais reserva
inttempo p_tempoatu # Tempo para atualizar personagem
uint8 p_tempomsg # Para enviar mensagens de fome e sede em tempoatu_exec
uint8 p_tempofim # Para sair do jogo após algum tempo
sav inttempo tempojogo1 # Em décimos de segundo, até 24 horas
sav uint16 tempojogo2 # Dias, para contar o tempo de jogo
const pesoobj = 65000
const p_recebe = 1 # Para poder receber itens de outros personagens
sav txt32 tipo1 # Raça do jogador; vide classes "tipo_*" em mud-b-tipo.int
sav txt32 tipo2 # Classe do jogador; vide classes "tipo_*" em mud-b-tipo.int
const p_naoseguir = !jogconfig.5
const p_imortal = jogconfig.14
sav uint32 p_fugir
sav uint8 p_sede # Sede, quanto menor mais sede tem
sav uint8 p_fome # Fome, quanto menor mais fome tem
sav uint8 p_bebida # Embriagês, quanto maior mais bêbado está
sav uint8 p_diges # Digestão
int1 atklog # Para mostrar os cálculos de batalha no próximo ataque

func ini # Objeto foi criado
  tempojogo1 = 864000
  nivel = 1
  p_sede = p_fome = 30
  var.z_prompt = "<%c3%hhp %c2%mmn %c6%vmv%b> "
  var.z_bprompt = "<%c3%hhp %c2%mmn %c6%vmv%b> "
  comum_persoanimal:ini(arg0, arg1, arg2, arg3, arg4)

func fim # Objeto foi apagado
  salvar
  se posicao
    $mens.p(este)
    $mens.mvis2("", "$P foi embora.")
  fimse
  comum_persoanimal:fim
# Se era o último jogador online, salva todas as casas
  cnome = nome = ""
  indiceitem item
  item.ini("pn ")
  txt1(item.txt) != "pn" && $miscsav.salvartudo

func fechou # Executado quando o objeto sock é apagado
# arg0 é verdadeiro se jogador via bot (deve sair mais rápido do jogo)
  se arg0
    p_tempofim = 7
    !atkenv && apagar(este) # Apaga personagem se não estiver batalhando
  senao
    p_tempofim = 12
  fimse
  senha == "" && apagar(este) # Apaga personagem se não tem jogo salvo

func mudasenha # Usuário escolhe mudar a senha ou salvar pela primeira vez
  senha ? sock.p_mudasenha1 : sock.p_mudasenha2

func tempojogo1_exec
  tempojogo1 = 864000, tempojogo2 += 1

func p_tempoatu_exec # Atualiza variáveis e salva o jogo de tempos em tempos
  p_tempoatu = rand(150, 200)
# Checa tempo para sair do jogo
  se !p_tempofim # 0 não faz nada
  senao (p_tempofim -= 1) == 5 # Informa que vai sair do jogo
    $mens.p(este)
    $mens.mvis1("$P caminha em direção ao vazio.")
  senao !p_tempofim # Chegou a 0 apaga o personagem (sai do jogo)
    msg("Muito tempo sem comunicação")
    ret apagar(este)
  fimse
# Restaura status de tempos em tempos
  real2 recup
  casovar posicao
  casose "1" # Mortalmente ferido
  casose "2" # Incapacitado
    p_diges -= 1, vida += 1, acertapos
    sair
  casose "3" # Fraco
    p_diges -= 1, vida += 2, acertapos
    sair
  casose "4" # Dormindo
    recup = contr.dono.s_recup(este) / (poslugar.objlista.i_movel >= 3 ? 500 : 600)
    p_diges -= 3
    sair
  casose "5" # Descansando
    recup = contr.dono.s_recup(este) / (poslugar.objlista.i_movel >= 3 ? 685 : 800)
    p_diges -= 3
    sair
  casose "6" # Sentado
    recup = contr.dono.s_recup(este) / (poslugar.objlista.i_movel >= 3 ? 1000 : 1200)
    p_diges -= 3
    sair
  casose "7" # Lutando
    recup = contr.dono.s_recup(este) / 1400
    p_diges -= 1
    sair
  casose "8" # Em pé
    recup = contr.dono.s_recup(este) / 1400
    p_diges -= 2
    sair
  casose
    p_diges -= 1
  casofim
  se !recup # Sem taxa de recuperação
  senao p_sede && p_fome # Recuperação normal
    pmana < pmanamax && (pmana = intmin(pmanamax, intmax(2, pmana + pmanamax * recup)))
    pmove < pmovemax && (pmove = intmin(pmovemax, intmax(2, pmove + pmovemax * recup)))
    pvida < pvidamax && (pvida = intmin(pvidamax, intmax(2, pvida + pvidamax * recup)))
  senao # Recuperação com muita fome e/ou muita sede
    recup /= 2
    pmana < pmanamax && (pmana = intmin(pmanamax, intmax(2, pmana + pmanamax * recup)))
    pmove < pmovemax && (pmove = intmin(pmovemax, intmax(2, pmove + pmovemax * recup)))
  fimse
# Acerta fome, sede e embriaguês
  se p_bebida == 1 || p_bebida == 2
    msg(msexo ? "Você está sóbrio." : "Você está sóbria.")
  fimse
  se jogconfig.14 # Imortal
    p_sede = intmax($miscfome.semfome, p_sede - 1)
    p_fome = intmax($miscfome.semfome, p_fome - 1)
    p_bebida = intmin(1, p_bebida - 1)
  senao pnivel < config:fomeini || pnivel >= config:fomefim || dono.s_fome == 1 # Não sente
    p_sede = intmax($miscfome.semfome, p_sede - 1)
    p_fome = intmax($miscfome.semfome, p_fome - 1)
    p_bebida -= 2
  senao !dono.s_fome # Sente fome/sede
    p_sede -= dono.s_terreno == 11 ? 3 : 1 # No deserto sente sede 3x mais rápido
    p_fome -= 1
    p_bebida -= 2
  senao # Se recupera de fome/sede aos poucos
    p_sede = intmax(p_sede - 1, intmin($miscfome.semfome, p_sede + 1))
    p_fome = intmax(p_fome - 1, intmin($miscfome.semfome, p_fome + 1))
    p_bebida -= 2
  fimse
# Mensagens de fome e sede e pontos de vida
  se !(p_tempomsg -= 1)
    casovar txtchr(97 + $miscfome.t.[p_fome]) + $miscfome.t.[p_sede]
    casose "a1" # Pouca sede
      p_tempomsg = 5
      msg("Sua boca está um pouco seca.")
      sair
    casose "a2" # Com sede
      p_tempomsg = 5
      msg("Você está com sede.")
      sair !config:fomemsg
      $mens.p(este)
      $mens.mvis2("", "$P está com sede.")
      sair
    casose "a3" # Muita sede
      p_tempomsg = 5
      pvida -= 5
      msg("Você está morrendo de sede, -5")
      $mens.p(este)
      $mens.mvis2("", "$P está morrendo de sede.")
      sair
    casose "b0" # Pouca fome
      p_tempomsg = 5
      msg("Você sente umas pontadas de fome.")
      sair
    casose "b1" # Pouca fome + Pouca sede
      p_tempomsg = 5
      msg("Você sente umas pontadas de fome e a boca um pouco seca.")
      sair
    casose "b2" # Pouca fome + Com sede
      p_tempomsg = 5
      msg("Você está com sede e sente umas pontadas de fome.")
      sair !config:fomemsg
      $mens.p(este)
      $mens.mvis2("", "$P está com sede.")
      sair
    casose "b3" # Pouca fome + Muita sede
      p_tempomsg = 5
      pvida -= 5
      msg("Você está morrendo de sede e sente umas pontadas de fome, -5")
      $mens.p(este)
      sair !config:fomemsg
      $mens.mvis2("", "$P está morrendo de sede.")
      sair
    casose "c0" # Com fome
      p_tempomsg = 5
      msg("Você está com fome.")
      sair !config:fomemsg
      $mens.p(este)
      $mens.mvis2("", "Você ouve o estômago de $P roncar.")
      sair
    casose "c1" # Com fome + Pouca sede
      p_tempomsg = 5
      msg("Você está com fome e sente a boca um pouco seca.")
      sair !config:fomemsg
      $mens.p(este)
      $mens.mvis2("", "Você ouve o estômago de $P roncar.")
      sair
    casose "c2" # Com fome + Com sede
      p_tempomsg = 5
      msg("Você está com fome e sede.")
      sair !config:fomemsg
      $mens.p(este)
      $mens.mvis2("", "$P está com fome e sede.")
      sair
    casose "c3" # Com fome + Muita sede
      p_tempomsg = 5
      pvida -= 5
      msg("Você está morrendo de sede e com fome, -5")
      $mens.p(este)
      se config:fomemsg
        $mens.mvis2("", "$P está morrendo de sede e com fome.")
      senao
        $mens.mvis2("", "$P está morrendo de sede.")
      fimse
      sair
    casose "d0" # Muita fome
      p_tempomsg = 5
      pvida -= 10
      msg("Você está morrendo de fome, -10")
      $mens.p(este)
      $mens.mvis2("", "$P está morrendo de fome.")
      sair
    casose "d1" # Muita fome + Pouca sede
      p_tempomsg = 5
      pvida -= 10
      msg("Você está morrendo de fome e sente a boca um pouco seca, -10")
      $mens.p(este)
      $mens.mvis2("", "$P está morrendo de fome.")
      sair
    casose "d2" # Muita fome + Com sede
      p_tempomsg = 5
      pvida -= 10
      msg("Você está morrendo de fome e com sede, -10")
      $mens.p(este)
      se config:fomemsg
        $mens.mvis2("", "$P está morrendo de fome e com sede.")
      senao
        $mens.mvis2("", "$P está morrendo de fome.")
      fimse
      sair
    casose "d3" # Muita fome + Muita sede
      p_tempomsg = 5
      pvida -= 15
      msg("Você está morrendo de fome e sede, -15")
      $mens.p(este)
      $mens.mvis2("", "$P está morrendo de fome e sede.")
      sair
    casofim
  fimse
# Cair sentado devido à bebida
  se posicao == 8 && p_bebida >= rand($miscfome.bebedir, $miscfome.cheio)
    poslugar.remove
    posicao = 6
    pvida -= 5
    msg("Você se desequilibrou e caiu, -5")
    $mens.p(este)
    $mens.mtodos2("", "$P se desequilibrou e caiu.")
  fimse
# Acerta estado do personagem
  acertapos(1)

func salvar # Salva o jogo, desde que a senha não seja nula
# Retorna verdadeiro se conseguiu salvar
  ret !senha, 0
  listaitem item
  listaobj lista
  debug dbg
  dbg.exec = 50000
  lista.addfim(este, dentro1, dentro2, dentro3)
  item = lista.ini, item.depois
  enquanto item
    se !item.obj.objsav
      item.removedepois
    senao lista.total < 2000
      lista.addfim(item.obj.dentro1, item.obj.dentro2, item.obj.dentro3), item.depois
    senao
      item.depois
    fimse
  efim
  salanome = dono
# msg(txt2(cnome) + " , " + senha)
  dbg.exec = 2000
  ret !lista.total, 0
# Obtém o tempo do jogo salvo, em dias, e salva o jogo
  int32 tempo
  se jogconfig.23
    tempo = config:salvaadmin
  senao pnivel < config:nivelveterano
    tempo = config:salvainiciante
  senao
    tempo = config:salvaveterano
  fimse
  arqsav sav1
  ret sav1.salvar("sav/" + txt2(cnome) + ".sav", lista, tempo, senha)

func cmd_recalc1 # Recalcula variáveis do personagem
# pnivel < 10 && (pvidamax += 50 - pnivel * 5)
  jogconfig.14 && (bitver |= 0x107C) # Propriedade config +imortal
  jogconfig.18 && (bitinv |= 128) # Propriedade config +invsala
  jogconfig.23 && (bitver |= 128) # Se é administrador


classe cmdalias
# Para processar o comando alias
const iniclasse = criar(arg0)
txt512 m_0
const m_1 = txt1(m_0)
const m_2 = txtsub(m_0, 1, 1)
const m_3 = txtsub(m_0, 2, 1)
const m_4 = txtsub(m_0, 3, 1)
const m_5 = txtsub(m_0, 4, 1)
const m_6 = txtsub(m_0, 5, 1)
const m_7 = txtsub(m_0, 6, 1)
const m_8 = txtsub(m_0, 7, 1)
const m_9 = txtsub(m_0, 8, 1)
const m_S = txtsub(m_0, 1)
const m_T = txtsub(m_0, 2)
const m_Z = "\n"
const m_@ = "$"
const mens = vartroca(txttroca(arg0, "$$", "$@"), "$", "m_")
