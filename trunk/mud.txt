Índice

1. Rodando o MUD
2. Organização dos arquivos e classes
3. Envio de mensagens formatadas (mud-mens.int)
4. Variáveis dinâmicas de personagens, salas e itens
5. Comum a salas, personagens e itens (mud-comum.int)
6. Salas (mud-sala.int)
7. Personagens e itens
8. Personagens (mud-perso.int)
9. Personagens não jogador (mud-perso.int)
10. Itens (mud-item.int)
11. Funções chamadas somente para o próprio objeto
12. Eventos
13. Eventos incondicionais
14. Eventos condicionais
15. Criando menus de edição (administração)
16. Lista de coisas pendente


1. Rodando o MUD

Para rodar o MUD há três formas:
A. Renomear o arquivo intmud.exe para mud.exe e executar
B. Arrastar o arquivo mud.int para o intmud.exe
C. Usando o prompt de comando do Windows ou a opção X do Dosvox (executar),
digitar: intmud mud

Após rodar o programa, crie um personagem e tecle x2. Deverá vir uma
mensagem assim:
Você virou administrador, tecle ADM para saber os comandos.
Depois tecle ECONFIG para mudar as configurações do MUD, principalmente
a senha de administração, que inicialmente é x2. Para outros jogadores
conectarem-se ao MUD, é necessário ativar pelo menos uma das opções:
jogar em uma porta ou jogar em um chat.

O programa em si não produz som, portanto deficientes visuais deverão
usar um leitor de telas, como o NVDA ou o JAWS. Se isso não for possível,
antes de rodar o MUD, altere as configurações abrindo o arquivo mud.int
em um editor de texto. As opções estão definidas a partir da linha 15
desse arquivo.

Os próximos tópicos referem-se à organização do programa do MUD.


2. Organização dos arquivos e classes

De modo geral, o MUD está dividido em três grupos:
Arquivos mud-a-*.int Contém as áreas (itens, personagens e salas das areas).
Arquivos mud-b-*.int Contém os comandos e configurações definidos pela
administração do MUD.
Os demais arquivos mud*.int formam a base do MUD.

2.1. mud.int
É responsável pela comunicação entre o jogo e os jogadores.

2.2. mud-b-config.int
Configuração do jogo (a classe 'config'), como por exemplo, se vai rodar em
uma janela ou abrindo uma porta, a sala inicial, etc.

2.3. mud-b-tipo.int
Raças e classes definidas no MUD.

2.4. mud-b-social.int
Comandos sociais criados pela administração.

2.5. mud-b-hab.int
Habilidades e magias criadas pela administração.

2.6. mud-a-*.int
Contém as classes que compõem uma área.
Geralmente são:
Definições da área: classe de nome 'a_' + prefixo da área
Propriedades herdadas pelas salas: classe de nome 'b_' + prefixo da área
Salas: classes de nome 's_' + prefixo da área + número de '001' a '999'

2.7. mud-comum.int
Classe 'comum_obj', que é herdada por todos os personagens, itens e salas.
Basicamente essa classe lida com a hierarquia dos objetos (quais objetos
um objeto possui), peso e volume.
Classe 'comum_persoitem', que é herdada por todos os personagens e itens.

2.8. mud-sala.int
Classes 'area' e 'sala', herdadas por todas as áreas e salas.

2.9. mud-item.int
Classe 'comum_item', herdada por todos os itens.
Classe 'comum_itemgrupo', herdada pelos itens que podem ser agrupados
em um único objeto.
Os itens são classes cujo nome começa com 'i_'.

2.10. mud-perso.int
Classe 'comum_perso' - herdada por todos os personagens.
Classe 'comum_persobat' - personagens que podem batalhar.
Classe 'comum_persoanimal' - personagens que podem batalhar e carregar animais.
Classe 'perso_restaurar' - restaurar status de personagens que podem batalhar.
Os personagens não jogadores são classes cujo nome começa com 'p_'.

2.11. mud-jog.int
Classes responsáveis pelos jogadores.
A classe 'jogador' é o personagem dos jogadores.
A classe 'jogsock' é responsável pela comunicação com o usuário:
Funções cmd_<nome do comando>   Comandos de administração
Funções adm_<nome do tópico>    Tópicos de ajuda da administração
Funções p_<texto>               São executadas conforme a variável passo

2.12. mud-cmd*.int
Contém os comandos que os personagens podem digitar. Todo comando é uma
classe cujo nome é 'cmd_' (comandos normais), 'cmd_magia_' (magias) ou
'cmdfim_' (comandos de baixa prioridade) seguido do nome do comando.
Quando o jogador digita algo, são verificadas as classes 'cmd_magia_',
'cmd_' e depois as classes 'cmdfim_'.
A classe 'comando_comum' é herdada por todos os comandos.
Quando é necessário uma única classe herdada por dois ou mais comandos,
geralmente o nome dessa classe começa com 'comando_'.

2.13. mud-info.int
Comandos que apenas dão informações ao jogador.

2.14. mud-social.int
Menus para criar e editar comandos sociais e a classe 'soccomum', que serve
de base para esses comandos. Todo comando é uma classe cujo nome é "soc_"
seguido do nome do comando. Quando o jogador digita algo, os sociais são
verificados após as classes 'cmd_' e 'cmd_magia_' e antes das classes
'cmdfim_'.

2.15. mud-cmd.int
Diversos comandos.

2.15. mud-cmd-item.int
Comandos de manuseio de objetos.

2.16. mud-cmd-mover.int
Comandos de movimentação.

2.17. mud-ataque.int
Menus para criar e editar habilidades e magias e a classe 'comando_ataque',
que serve de base para esses comandos. Via de regra, a função 'escr' checa
se está em condições de atacar e obtém o alvo, e chama a função 'exechab',
que realiza o ataque propriamente dito.

2.18. mud-efeito.int
Efeitos que podem afetar personagens e itens.
Cada efeito é uma classe cujo nome começa com 'e_'.

2.19. mud-mens.int
Contém a classe 'mens', especializada no envio de mensagens para personagens.

2.20. mud-misc.int
Contém a classe 'misc', que é uma miscelânia de funções, variáveis e tabelas.
Diferentemente das outras classes, as funções de misc devem ser chamadas
com 'misc:'. Por exemplo, 'misc:obj' ao invés de '$misc.obj'.

2.21. mud-adm.int
Funções básicas usadas pelos comandos de adminsitração.

2.22. mud-adm-*.int
Comandos de administração.


3. Envio de mensagens formatadas (arquivo mud-mens.int)

Para enviar uma mensagem formatada a um ou mais personagens, usa-se
a classe 'mens', contida no arquivo 'mud-mens.int'.

Primeiro define-se de um a três objetos, com a seguinte função:
$mens.p(<personagem>, [alvo], [objeto])

Depois, envia-se uma mensagem com uma das seguintes funções:

$mens.mtodos1(texto para todos)
$mens.mtodos2(texto para personagem, texto para outros)
$mens.mtodos3(texto para personagem, texto para alvo, texto para outros)
Enviar mensagem para todos que estiverem acordados.

$mens.mvis1(texto para todos)
$mens.mvis2(texto para personagem, texto para outros)
$mens.mvis3(texto para personagem, texto para alvo, texto para outros)
Enviar mensagem para todos que estiverem acordados e puderem ver
o personagem.

<personagem>.msginv(texto)
Envia mensagem para o personagem se ele estiver acordado.

<personagem>.msgvis(texto)
Envia mensagem para o personagem se ele estiver acordado e vendo
o personagem definido em $mens.p.

O texto pode conter os seguintes caracteres especiais:

$$ = Símbolo $
$P = Nome do personagem
$Q = Nome do personagem sem citar o dono
$A = Nome do alvo
$B = Nome do alvo sem citar o dono
$O = Nome do objeto
$S = Depende do personagem: "o", "a", "um" ou "uma"
$T = Depende do alvo: "o", "a", "um" ou "uma"
$U = Depende do objeto: "o", "a", "um" ou "uma"
$M = Texto de $mens.mens

Quando o símbolo $ for seguido de uma letra minúscula, a primeira letra
do texto não é transformada em maiúscula."


4. Variáveis dinâmicas de personagens, salas e itens

Todos os personagens e salas têm uma lista de variáveis dinâmicas
(podem ser criadas e apagadas) contidas na seguinte variável:
textovar var

Os dois primeiros caracteres das variáveis de var indicam o tipo:
a_ = agenda (1=viu, 2=pegou)
d_ = variável que é apagada quando o objeto muda de dono
e_ = nome da classe que contém o efeito
     tem efeito somente quando o item ou personagem é criado
j_ = variável que é apagada quando é carregado um jogo salvo
h_ = habilidade
i_ = idioma
m_ = magia
o_ = item classificado como "outros"
u_ = usuário ignorado
z_ = variável não visível ao jogador

Variáveis mais comuns:
z_email = e-mail do jogador (somente nos personagens de jogadores)
z_dono = nome do dono original (quem capturou o animal)
z_pnivel = nível do animal quando foi capturado
z_captura = nome do item que o jogador escolheu para capturar animais
z_salafim = sala para onde vai quando retorna da morte
z_moedas = quantas moedas o personagem, item ou sala possui
z_aulas = pontos de aula (quantas aulas ainda pode fazer)


5. Comum a salas, personagens e itens (classe comum_obj, em mud-comum.int)

5.1. varfunc dono
Quem possui esse objeto.
No caso do personagem, é a sala aonde o personagem está.

5.2. ref donoantes
Dono anterior desse objeto.

5.3. listaobj dentro1
Lista de itens, exceto vestindo

5.4. listaobj dentro2
Se for sala: lista de personagens
Se for personagem: lista de itens que está vestindo

5.5. listaobj evento
Objetos que recebem eventos desse objeto


6. Salas (classe sala, em mud-sala.int)

6.1. const s_titulo = "texto"
Retorna o título da sala. arg0 é quem está requisitanto o título.

6.2. const s_desc = "texto"
Retorna a descrição da sala. arg0 é quem está requisitanto a descrição.

6.3. const s_noite = "texto"
Retorna a descrição da sala quando está de noite.
arg0 é quem está requisitanto a descrição.

6.4. const s_ocultar = 0
Verdadeiro (geralmente 1) deve ocultar a descrição da sala ao entrar.

6.5. const s_luta = 0
Tipo de luta permitido:
0=nenhuma
1=exceto entre jogador
2=qualquer luta

6.6. ref dir_[direção]
Antes de acessar fazer misc:obj=personagem
Sala na direção especificada.
Geralmente definido dessa forma: const dir_s = $sala1
As direções válidas são: n s l o ne no se so c b
Se estiver ausente, não há sala nessa direção

6.7. uint8 porta_[direção]
     const portaini_[direção]
Antes de acessar fazer misc:obj=personagem
Especifica o tipo de saída em determinada direção.
Porta é o valor atual, geralmente definido dessa forma: uint8 porta_s
PortaIni é o valor inicial, geralmente definido dessa forma: const porta_s = 2
0 = não há porta
1 = está aberto
2 = está fechado
3 = está trancado

6.8. const inv_[direção]
Antes de acessar fazer misc:obj=personagem
Verdadeiro se for invisível (não aparece na lista de saídas)

6.9. const tranc_[direção]
Antes de acessar fazer misc:obj=personagem
0 = não pode ser trancado
1 = pode ser trancado
2 = tranca ao fechar

6.10. const fechadura_[direção]
Antes de acssar fazer misc:obj=personagem
Texto que contém o código da fechadura.
Somente uma chave com o mesmo código tranca e destranca.
Se estiver ausente ou for um texto vazio, não requer chave.

6.11. const portanome_[direção]
Nome da porta na direção especificada. Se estiver ausente ou for um
texto vazio, será usada a mensagem padrão, que depende da porta.
Essas constantes são usadas nos comandos abrir/fechar/trancar/destrancar.
Exemplo:
const portanome_n = "a porta da casa"

6.12. const s_reset
Reset de sala:
Um texto que contém os executados quando algum jogador entra na sala.
O significado do texto está explicado no início do arquivo mud-reset.int.

6.13. const a_reset
Reset de área:
Um texto que contém os executados quando ocorre reset da área.
O significado do texto está explicado no início do arquivo mud-reset.int.

6.14. func txtsai( jogador )
Retorna as saídas existentes (texto)

6.15. func descsala( jogador, modo )
Adiciona texto com a descrição da sala
Se modo=0, mostra o mais curto possível
Somar 1 para mostrar descrição completa
Somar 2 para mostrar saídas
Somar 4 para mostrar os personagens e itens

6.16. func descitens( jogador )
Adiciona texto com descrição dos itens para um jogador

6.17. func ver_[nome do a descrição]( jogador, 0 )
Deve retornar verdadeiro (ou um texto não vazio) se essa descrição extra
existir ou falso (ou um texto não vazio) se não existir.

6.18. func ver_[nome do a descrição]( jogador, 1 )
Deve retornar um texto que é a descrição extra.
Exemplo de como criar uma descrição:
const ver_placa = "Você olha para uma placa vazia."


7. Personagens e itens (classe comum_persoitem, em mud-comum.int)

7.1. int16 bitinv
Grau de invisibilidade do personagem ou objeto; geralmente é 3
0 = visível a qualquer um, mesmo no escuro ou a quem estiver cego
somar 1 se invisível a quem estiver cego
somar 2 se invisível no escuro
somar 4 se está invisível
somar 8 se está oculto
somar 16 se está voando alto
somar 128 se é administrador invisível

7.2. int16 bitver
O que está visível ao personagem ou objeto; geralmente é 1 ou 3
0 = nada (está cego)
somar 1 se não está cego
somar 2 se enxega no escuro
somar 4 se pode ver invisível
somar 8 se pode ver oculto
somar 16 se pode ver voando alto
somar 128 se pode ver administradores invisíveis
somar 256 se anda em silêncio
somar 512 se está voando ou flutuando
somar 1024 se está dormindo por efeito de algo
somar 2048 se não pode ser colocado para dormir

7.3. intexec recalc
Para chamar recalc_exec quando necessário

7.4. func recalc_exec
Ajusta variáveis, principalmente batalha

7.5. func visivel( personagem )
Retorna verdadeiro se está visível para o persoangem

7.6. texto ident
Nomes que o jogador digita para ações com o personagem ou item
Exemplo: ao pegar um item ou atacar um personagem

7.7. txt16 nome
Nome do personagem ou item, usado em ações com o objeto

7.8. int1 sexoini
Sexo inicial: 0=feminino, 1=masculino, 2=aleatório

7.9. int1 sexo
Sexo atual: 0=feminino, 1=masculino

7.10. texto descpos
Descrição quando está na sala; arg0=quem quer ver

7.11. texto descver
Descrição, quando olha para o objeto; arg0=quem quer ver


8. Personagens (arquivo mud-perso.int)

8.1. Para criar um personagem
criar("nome da classe", aonde está, nível do personagem, "variáveis")
Se o nível for omitido, será 0.
Variáveis é um texto do tipo "variável=valor". Quando houver mais de uma
variável, separar por vírgula (exemplo, "v1=10,v2=20").
São criadas as variáveis correspondentes em 'textovar var' do personagem.

8.2. const perso = 1
1 = personagem que não batalha (classe comum_perso)
2 = personagem que batalha (classe comum_persobat)
3 = personagem que batalha e carrega animais (classe comum_persoanimal)

8.3. sav uint8 posicao
Posição do personagem:
0 = morto
1 = mortalmente ferido
2 = incapacitado
3 = fraco
4 = dormindo
5 = descansando
6 = sentado
7 = lutando
8 = em pé

8.4. const pospadr = 8
Posição padrão do personagem

8.5. const p_recebe = 0
Verdadeiro (=1) se pode receber itens

8.6. sav textovar var
Variáveis criadas sob demanda do personagem
As variáveis cujo nome começa com "1" são apagadas quando o personagem
muda de sala (função mudadono).
As variáveis cujo nome começa com "1" ou "2" são apagadas quando o jogo
salvo é recarregado (quando o jogador entra no jogo).

8.7. func teclou
Chamado sempre que o personagem tecla algum comando (arg0=comando)

8.8. func p_espera_exec
Pega o próximo comando da lista

8.9. func teclouproc
Processa comando, sem espera (arg0=comando)

8.10. func mudadono
Coloca personagem em outra sala (arg0 = sala)

8.11. func acertapos
Acerta posição do personagem, conforme pontos de vida e batalha
Para checar se morreu, chamar com: acertapos(1)

8.12. func batalhafim
Encerra a batalha
Para checar se morreu, chamar com: batalhafim(1)

8.13. func atktempo
É chamado após algum tempo sem golpes, para encerrar a batalha

8.14. func morreu
Executa procedimentos quando o personagem morre


9. Personagens não jogador (arquivo mud-perso.int)

* const p_pet = 0
NÃO ESTÁ PRONTO
0 = não pode ser animal de estimação
1 = jogador pode pegar e usar em batalhas
2 = segue ordens do jogador

* const p_mover = 0
Aonde pode se movimentar:
0 = não sai do lugar
1 = somente na área
2 = pode sair da área

* const p_movervel = 100
Tempo médio em décimos de segundo para ir para outra sala

* const p_fora = 0
NÃO ESTÁ PRONTO
Não entra em lugares fechados

* const p_pegar = 0
NÃO ESTÁ PRONTO
0 = não pega itens do chão
1 = pega itens
2 = pega somente itens de valor

* func p_agressivo(personagem alvo)
* const p_agressivo = 0
Se é agressivo a um determinado personagem
0 = pacífico, não luta
1 = ataca se for atacado
2 = ataca quando possível

* func p_naoseguir(personagem que quer seguir)
* const p_naoseguir = 0
Se não pode ser seguido.
0 = pode ser seguido
1 = não pode ser seguido

* const p_foge = 0
NÃO ESTÁ PRONTO
Se foge quando estiver fraco
Não agressivo: foge se for atacado

* const p_nadar = 0
NÃO ESTÁ PRONTO
Pode atravessar lugares em que não se pode nadar.

* const p_imortal = 0
NÃO ESTÁ PRONTO
Se não pode morrer.

* const taxacompra = 0
Porcentagem de lucro quando compra: preço final = valor * (100-p_compra)

* const taxavenda = 0
Porcentagem de lucro quando vende: preço final = valor * (100+p_venda)

come corpos
mata jogadores que mataram ou roubaram outros
ataca jogadores que mataram ou roubaram outros
pega lixo
patrulha: encerra brigas


10. Itens (arquivo mud-item.int)

10.1. Para criar um item
Itens que podem ser agrupados:
criar("nome da classe", aonde está, quantidade de itens)
Se a quantidade for omitida ou for menor que 1, será 1.

Outros itens:
criar("nome da classe", aonde está, nível do item, "variáveis")
Se o nível for omitido, será 0.
Variáveis é um texto do tipo "variável=valor". Quando houver mais de uma
variável, separar por vírgula (exemplo, "v1=10,v2=20").
São criadas as variáveis correspondentes em 'textovar var' do item.

10.2. const item = 1
1 = item comum (classe comum_item)
2 = pode agrupar (classe comum_itemgrupo)
3 = completo (classe comum_itemperso)

10.3. const vestir1 = 0
Em que lugares do corpo pode ir quando é vestido.
Cada bit corresponde a um lugar. Os nomes dos lugares estão definidos na
constante equip_txt, na classe config, no arquivo mud-b.config.int.

10.4. uint8 vestpos
Em que posição está vestindo.
0 = não está vestindo
50 = está empunhando
Outros valores, começando pelo número 1, correspondem aos lugares definidos
na constante equip_txt, na classe config, no arquivo mud-b.config.int.
Nota: Usar a função vestir ao invés de alterar essa variável diretamente.

10.5. const i_captura = 0
      func i_captura( animal )
Nível médio dos animais que podem ser capturados com esse item.
Se for 0, esse item não pode ser usado para capturar animais.
O argumento dessa função é o animal que o jogador está tentando capturar,
(uma variável ref), ou nulo se estiver apenas escolhendo esse item para
capturar.

10.6. const i_movel = 0
Tipo de móvel:
0 = não é móvel
1 = pode sentar
2 = pode sentar e deitar

10.7. const i_lugar = 0
Quantos personagens podem sentar-se.

10.8. const i_abertoini = 0
Valor inicial de aberto

10.9. uint8 i_aberto
Tipo de container:
0 = não é container
1 = está sempre aberto
2 = está aberto
3 = está fechado
4 = está trancado

10.10. const i_tranc = 0
0 = não pode ser trancado
1 = pode ser trancado
2 = tranca ao fechar

10.11. const i_fechadura = ""
Texto que contém o código da fechadura.
Somente uma chave com o mesmo código tranca e destranca.
Se estiver ausente ou for um texto vazio, não requer chave.

10.12. const i_chave = ""
Texto que contém o código da chave, ou "" se não for chave.

10.13. const luzitem = 0
Tipo de fonte de luz:
0 = Não aceita acender/apagar, sem fogo
1 = Lanterna (acende/apaga, sem fogo)
2 = Lanterna 2 (acende/apaga, inclusive na água)
3 = Não aceita acender/apagar, produz fogo
4 = Lampião (acende/apaga, produz fogo)
5 = Fósforo (acende uma vez, produz fogo)
6 = Tocha (acende com fogo, produz fogo)

10.14. const luzini = 1000
Duração da luz, em décimos de segundo

10.15. const luzliga = "$P acende $o."
Mensagem quando alguém acende a luz

10.16. const luztxt = ""
Mensagem quando a luz acaba, se estiver vazio não envia nenhuma mensagem

10.17. const luzfim = 0
Se item some (é apagado) quando a luz acaba (0=não, 1=sim)

10.18. const armatipo = 0
Tipo de arma; vide config:arma_txt (0 significa que não é arma)

10.19. const armaprecisao = 0
Precisão da arma, em porcentagem, 100 significa mesma precisão de
atacar sem arma

10.20. const armamin = 0
Ataque mínimo da arma

10.21. const armamax = 0
Ataque máximo da arma

10.22. func vestir( posição )
Veste um item apenas, não verifica se a posição já está ocupada.
Se posição for 0, deixa de vestir.

10.23. func mudadono(novo dono, quantidade)
Item muda de dono. Quando a quantidade for omitida ou o tipo de item
não puder ser agrupado em um objeto, a quantidade será sempre 1.


11. Funções chamadas somente para o póprio objeto

func cmd_ini(arg0, arg1, arg2, arg3, arg4)
Chamado quando o objeto é criado. Arg0 a arg5 são os 5 primeiros argumentos
da função ini do objeto.

func cmd_objfim
Chamado quando o objeto é apagado. O antigo dono está na variável donoantes.

func cmd_salaperso(personagem)
Chamado para a própria sala, quando um personagem controlado por um jogador
entra na sala.

func cmd_mudadono
Chamado por mudadono, logo após o item ou personagem mudar de dono.

func cmd_recalc1(personagem)
Chamado por func recalc_exec, para ajustar as variáveis do personagem
(pontos de vida, mana, etc.)

func cmd_pnj_proc
Chamado cada vez que o personagem não jogador decidir fazer alguma coisa.
Não é chamado se estiver sendo controlado por um jogador ou pertencer
a outro personagem.

func cmd_podevestir
Chamado para o próprio item, quando um personagem quer vestir (roupa)
ou empunhar (arma). Se retornar um texto, o personagem não conseguirá
vestir e será enviado esse texto.


12. Eventos

São funções executadas quando um personagem digita algo, muda de sala
ou ocorre qualquer outro fato. Mesmo os itens e salas podem gerar eventos.

Um item, personagem ou sala pode receber diversos tipos de eventos,
bastando acrescentar uma ou mais das seguintes variáveis:

const eveste = 1 # Receber eventos do próprio objeto
const evperso = 1 # Receber eventos do dono se o dono for personagem
const evitem = 1 # Receber eventos do dono se o dono for item
const evsala = 1 # Receber eventos do dono se o dono for sala

Essas constantes têm efeito sempre que o objeto muda de dono ou é criado.
Se for preciso atualizar em outras situações, chamar a função ajustaev.

Internamente, itens, personagens e salas possuem a seguinte variável:
listaobj evento

Gerar um evento significa executar uma função qualquer de todos os objetos
dessa lista. O nome da função está relacionado ao tipo de evento. Exemplo,
'cmd_pegar' corresponde ao comando 'pegar' (quando um personagem tenta pegar
algo, é executada a função 'cmd_pegar').

Para saber quais são as listas envolvidas, basta verificar os argumentos
da função.

Exemplo, o evento correspondente a abrir uma porta está definido assim:
func cmd_abrirdir(personagem, sala, texto)
Significa que quando o personagem tentar abrir uma porta, será executada
a função cmd_abrirdir das listas do personagem e da sala.


13. Eventos incondicionais

São funções chamadas como resultado de uma ação que aconteceu ou vai
acontecer. A função não tem a opção de cancelar a ação.

A seguir são listados os eventos (as funções).

func cmd_fim(personagem ou objeto)
Objeto vai sair do jogo. É chamado para os eventos do personagem apenas.
Antes desse evento ocorrer, o objeto sai da sala a 'listaobj evento' do
objeto é limpa.

func cmd_saiu(personagem, sala)
Personagem saiu da sala.

func cmd_chegou(personagem, sala)
Personagem entrou na sala. É chamado logo após mudar de sala.

func cmd_recalc2(personagem)
Chamado para os objetos em personagem.dentro2, por func recalc_exec,
para ajustar as variáveis (pontos de vida, mana, etc.)

func cmd_recalc3(personagem)
Chamado para os objetos em personagem.evento, por func recalc_exec,
para ajustar as variáveis (pontos de vida, mana, etc.)

func cmd_moveu(personagem, sala, direção)
Personagem foi para uma direção.

func cmd_falou(personagem, texto)
Personagem falou alguma coisa.

func cmd_sussurrou(personagem, personagem alvo, texto)
Personagem sussurrou alguma coisa.
Texto é o nome do personagem alvo seguido da mensagem.
Se o personagem alvo não for encontrado esse evento é gerado com personagem
alvo 'nulo', e em seguida é enviada uma mensagem dizendo que não encontrou
o personagem.

cmd_social1(personagem, alvo, objeto do comando)
Personagem executou algum comando social.

cmd_social2(personagem, alvo, objeto do comando)
Personagem ou item foi algo de algum comando social.

func cmd_pegouobj(personagem, origem, item, quantidade do item)
func cmd_soltouobj(personagem, destino, item, quantidade do item)
func cmd_deuobj(personagem, destino, item, quantidade do item)
Pegou, soltou ou deu algum item.

func cmd_pegouanim(personagem, animal, sala)
func cmd_soltouanim(personagem, animal, sala)
func cmd_deuanim(personagem, animal, personagem destino)
Pegou (capturou), soltou ou deu algum animal.

func cmd_abriudir(personagem, sala, texto)
func cmd_fechoudir(personagem, sala, texto)
func cmd_destrancoudir(personagem, sala, texto, chave)
func cmd_trancoudir(personagem, sala, texto, chave)
Abriu, fechou, trancou ou destrancou porta na direção especificada.

func cmd_abriuobj(personagem, item)
func cmd_fechouobj(personagem, item)
func cmd_trancouobj(personagem, item, chave)
func cmd_destrancouobj(personagem, item, chave)
Abriu, fechou, trancou ou destrancou um item.

func cmd_acendeu(personagem, item)
func cmd_apagou(personagem, item)
Acendeu ou apagou um item.

func cmd_vestiu(personagem, item, posição)
Vestiu um item ou empunhou uma arma.
A posição é um número que indica a posição, conforme a variável vestpos
do objeto. Começa na posição1, empunhando é a posição 50.

func cmd_removeu(personagem, item, posição)
Remover um item que está vestindo/usando ou uma arma que está empunhando.
Posição é a posição em que estava vestindo ou empunhando.

func cmd_atacou(personagem, alvo, objeto que processa o comando)
Fim do ataque a outro personagem.
A variável result do objeto contém o resultado; 0=atacou com sucesso,
A variável mudavida do objeto contém quantos pontos de vida mudaram no alvo.
Esse evento é chamado também para o objeto que processa o comando.

func cmd_levantou(personagem)
func cmd_sentouchao(personagem)
func cmd_descansouchao(personagem)
func cmd_sentouobj(personagem, item, texto)
func cmd_descansouobj(personagem, item, texto)
Ficou em pé, começou a descansar ou sentou-se.

func cmd_morreu(personagem)
Personagem morreu.


14. Eventos condicionais

São funções que, se retornarem 1 ou qualquer outro valor verdadeiro,
a ação será cancelada. Nesse caso, a função deve enviar mensagens ao
usuário informando o motivo.

A seguir são listados os eventos (as funções).

func cmd_escr(personagem, texto que digitou, objeto que processa o comando)
Personagem digitou alguma coisa.

func cmd_ajuda(personagem ou objeto, texto)
Teclou ajuda seguido de um texto.

func cmd_mover(personagem, sala, direção)
Personagem quer ir em uma direção.

func cmd_abrir(personagem, texto)
Quer abrir um objeto ou uma porta.

func cmd_fechar(personagem, texto)
Quer fechar um objeto ou uma porta.

func cmd_ver(personagem, texto, completo)
Quer ver alguma coisa.
Completo pode ser 0 se for descrição resumida (comando olhar) ou 1 se
for descrição completa (comando ver).

func cmd_pegar(personagem, texto)
func cmd_soltar(personagem, texto)
func cmd_dar(personagem, texto)
Quer pegar, soltar ou dar alguma coisa.

func cmd_pegarmoedas(personagem, origem, quantidade de moedas)
func cmd_soltarmoedas(personagem, destino, quantidade de moedas)
func cmd_darmoedas(personagem, destino, quantidade de moedas)
Quer pegar, soltar ou dar moedas.

func cmd_pegarobj(personagem, origem, item, quantidade do item)
func cmd_soltarobj(personagem, destino, item, quantidade do item)
func cmd_darobj(personagem, destino, item, quantidade do item)
Quer pegar, soltar ou dar algum item.

func cmd_pegaranim(personagem, animal, sala)
func cmd_soltaranim(personagem, animal, sala)
func cmd_daranim(personagem, animal, personagem destino)
Quer pegar (capturar), soltar ou dar algum animal.

func cmd_abrirdir(personagem, sala, texto)
func cmd_fechardir(personagem, sala, texto)
func cmd_trancardir(personagem, sala, texto, chave)
func cmd_destrancardir(personagem, sala, texto, chave)
Quer abrir, fechar, trancar ou destrancar porta na direção especificada.

func cmd_abrirobj(personagem, item)
func cmd_fecharobj(personagem, item)
func cmd_trancarobj(personagem, item, chave)
func cmd_destrancarobj(personagem, item, chave)
Quer abrir, fechar, trancar ou destrancar um item.

func cmd_acender(personagem, item)
func cmd_apagar(personagem, item)
Quer acender ou apagar um item.

func cmd_vestir(personagem, item, posição)
Quer vestir um item ou empunhar uma arma.
A posição é um número que indica a posição, conforme a variável vestpos
do objeto. Começa na posição1, empunhando é a posição 50.

func cmd_remover(personagem, item, posição)
Quer remover um item que está vestindo/usando ou uma arma que está empunhando.
Posição é a posição atual.

func cmd_negociar(personagem, personagem vendedor, tipo)
Se o personagem negocia com um jogador.
Se não negocia, deve retornar uma mensagem (um texto) contendo o motivo.
Tipo pode ser "comprar", "vender" ou "ensinar".

func cmd_atacar(personagem, alvo, objeto que processa o ataque)
Quer atacar algum personagem.

cmd_alvocontr(personagem, alvo, objeto que processa o comando)
Personagem quer usar uma habilidade ou magia não agressiva.
Esse evento é chamado para quem está controlando o personagem e o alvo.

cmd_alvo(personagem, alvo, objeto que processa o comando)
Personagem quer usar uma habilidade ou magia não agressiva.

cmd_atacarcontr(personagem, alvo, objeto que processa o comando)
Personagem quer usar uma habilidade ou magia agressiva.
Esse evento é chamado para quem está controlando o personagem e o alvo.

cmd_atacar(personagem, alvo, objeto que processa o comando)
Personagem quer usar uma habilidade ou magia agressiva.
Esse evento é chamado também para o objeto que processa o comando.

func cmd_atkenv(personagem, alvo, objeto que processa o ataque)
Chamado quando um personagem vai realizar um ataque a outro.
Esse evento é chamado para o personagem e o objeto que processa o comando.

func cmd_atkrec(personagem, alvo, objeto que processa o ataque)
Chamado quando um personagem vai receber um ataque de outro.
Esse evento é chamado para o alvo.

func cmd_levantar(personagem)
func cmd_sentarchao(personagem)
func cmd_descansarchao(personagem)
func cmd_sentarobj(personagem, item, texto)
func cmd_descansarobj(personagem, item, texto)
Quer ficar em pé, descansar ou sentar-se.

func cmd_fugir(personagem)
Quer fugir de uma batalha.

func cmd_resgatar(personagem, quem será resgatado)
Quer resgatar alguém de uma batalha.

func cmd_morrer(personagem)
Vai morrer porque os pontos de vida chegaram a zero.

func cmd_ident(personagem, item ou personagem)
Quer identificar um item ou personagem.

func cmd_curar(personagem, personagem alvo)
Quer curar um personagem.


15. Criando menus de edição (administração)

Primeiro criar uma classe como a seguinte:

classe menu_config
# Título é o nome do menu (aparece antes da lista de opções)
const titulo = "Configuração do MUD"

# Quantos caracteres deve ter o nome de cada opção do menu
# Se tiver menos que isso, são acrescentados espaços
const colunas = 23

# Nome da classe que contém o menu anterior, ou "" se não houver menu anterior
# Quando o usuário escolhe sair do menu (teclando Z), vai para esse menu
const menufim = ""

# Primeira opção do menu:

const nome1 = "Quantidade de animais"
# Nome é o nome da opção

const info1 = "Quantos animais um jogador pode usar em batalha"
# Texto de informações, mostrado quando a opção é escolhida
# Se estiver ausente, não é mostrado nenhum texto

const clas1 = "config"
# Nome da classe

const vari1 = "animal"
# Nome da variável

const tipo1 = "numero--"
# Tipo é o tipo de dado sendo editado:
# "linha" = texto de uma linha (exemplo: título das salas)
# "texto" = texto de uma ou mais linhas (exemplo: descrição das salas)
# "numero" = valor numérico inteiro
# "numreal" = valor numérico que pode ter dígitos após a vírgula
# "opcao" = um valor numérico baseado numa lista de opções
# "txtopcao" = uma lista de opções: texto de várias linhas, sendo que
#              pode-se mudar uma linha sem mudar as outras
# "vetor" = um valor numérico sendo que cada bit é uma opção de uma lista
# "tipos" = texto contendo uma lista de tipos (raças e classes)
# "tipodep" = texto contendo uma lista de habilidades, magias e/ou idiomas
# "simnao" = uma opção que pode ser apenas 0 (não) ou 1 (sim)
# "sala" = uma sala
# "atribcomum" = função que altera atributos comuns de um personagem
# "atribatk" = função que altera atributos de ataque de um personagem
# "atribdef" = função que altera atributos de defesa de um personagem
# "menu" = um submenu; a opção nome da classe é a classe que contém o submenu
# Se não for possível editar como função, acrescente um sinal de '-' no nome
# Se não for possível apagar, acrescente mais um sinal de '-' no nome

const exec = "atualiza"
# Se não for nulo, quando o usuário muda a opção, é executada a função
# com esse nome de todos os objetos que foram mudados

const extr1 = "1 8"
# Opções extras. Os tipos que possuem opções extras são:
# No tipo "numero" são os valores mínimo e máximo (nesse caso, vai de 1 a 8)
# No tipo "opcao", é a lista de opções
# No tipo "txtopcao" são a quantidade mínima e a quantidade máxima de linhas
#         e o número da primeira opção que pode ser alterada

# As outras opções seguem o mesmo padrão, apenas mudando o número
# no nome da variável. Exemplo:

const nome2 = "Senha de administração" # Nome da opção
const tipo2 = "linha" # Tipo de variável
const clas2 = "config"
const vari2 = "senhaadm"

const nome3 = "Tipo de ataque"
const tipo3 = "opcao"
const clas3 = "config"
const vari3 = "atktempo"
const extr3 = "manual\nautomático" # 0=manual, 1=automático

Para chamar o menu, basta executar a função m_menu do jogador (classe
jogsock), passando como argumento o nome da classe.
Exemplo: m_menu("menu_config")


16. Lista de coisas pendentes

Animais reserva (além dos animais usados na batalha)
Veículos fechados
Habilidades:
- Rosnar - diminui ataque do adversário
- Dormir - restaura pontos de vida e dorme por 15 segundos
- Roncar - só pode ser usado enquanto estiver dormindo
Magias:
- Drenar energia - retira parte do mana e movimento do alvo
- Restaurar vitalidade - restaura movimentos
Efeitos de área - afetam uma sala; podem mudar o clima
Comandos para salvar e para mudar a senha
Poder aprender algo ao subir de nível; para cada linha da lista:
- Nível do personagem
- Aprender ou aperfeiçoar
- Nome da magia/habilidade/idioma
- Nível de aprendizado
Evolução de itens e personagens; para cada linha da lista:
- Nível do item ou personagem
- Evoluir obrigatório ou opcional
- Nome do novo item ou personagem
Criar uma classe específica para restaurar vida/mana/vigor dos jogadores
Vendedores: poder vender itens que possui no inventário
Ao criar personagem: altura
Acertar itens que produzem luz
(testar) Volume que cabe dentro, ou 0 se não for container
(testar) Ao alterar tipo de container, acertar a variável i_aberto
Volume que cabe dentro em salas
Quantos litros cabe, ou 0 se não for vasilhame
Quanto sustenta, ou 0 se não for alimento
Idiomas
Criar itens genéricos
Sistema de dicas aleatórias
Banco
Propriedade de salas:
* const s_semrastr = 0 # Se o comando de rastrear não passa por essa sala
Propriedades de personagens:
* inttempo tempocair # Quanto tempo leva para cair ou afundar
* const p_ajuda = 0 # Ajuda outros PNJs sendo atacados por jogadores
Propriedade de itens:
* inttempo tempocair # Quanto tempo leva para cair ou afundar
