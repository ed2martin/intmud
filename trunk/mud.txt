Índice

1. Rodando o MUD
2. Como atualizar o MUD
3. Organização dos arquivos e classes
4. Envio de mensagens formatadas (mud-mens.int)
5. Variáveis dinâmicas de personagens, salas e itens
6. Comum a salas, personagens e itens (mud-comum.int)
7. Salas (mud-sala.int)
8. Personagens e itens
9. Personagens (mud-perso.int)
10. Personagens não jogador (mud-perso.int)
11. Itens (mud-item.int)
12. Funções chamadas somente para o próprio objeto
13. Eventos
14. Eventos incondicionais
15. Eventos condicionais
16. Habilidades e magias (mud-ataque.int)
17. Efeitos (mud-efeito.int e mud-b-efeito.int)
18. Comandos
19. Criando menus de edição (administração)
20. Funcionamento interno das opções dos menus
21. Lista de coisas pendentes


1. Rodando o MUD

Para rodar o MUD há três formas:
A. Renomear o arquivo intmud.exe para mud.exe e executar
B. Arrastar o arquivo mud.int para o intmud.exe
C. Usando o prompt de comando do Windows ou a opção X do Dosvox (executar),
digitar: intmud mud

Após rodar o programa, crie um personagem e tecle x2. Deverá vir uma
mensagem assim:
Você virou administrador, tecle ADM para saber os comandos.
Depois tecle ECONFIG para mudar as configurações do MUD, principalmente
a senha de administração, que inicialmente é x2. Para outros jogadores
conectarem-se ao MUD, é necessário ativar pelo menos uma das opções:
jogar em uma porta ou jogar em um chat.

O programa em si não produz som, portanto deficientes visuais deverão
usar um leitor de telas, como o NVDA ou o JAWS. Se isso não for possível,
antes de rodar o MUD, altere as configurações abrindo o arquivo
mud-b-config.int em um editor de texto. As opções estão definidas a partir
da linha 9 desse arquivo.


2. Como atualizar o MUD

Copie as áreas que você criou (arquivos mud-a-*.int) para a nova versão.
Não copie as áreas que já vêm com o MUD, os arquivos:
mud-a-casa.int
mud-a-fim.int
mud-a-ini.int
mud-a-teste.int

Copie todos os arquivos mud-b-*.int da versão antiga para a nova,
substituindo os já existentes. São eles:
mud-b-config.int
mud-b-tipo.int
mud-b-social.int
mud-b-hab.int
mud-b-efeito.int

Copie os diretórios sav e sav2 (os jogos salvos) da versão antiga para a nova.

Rode o MUD. Se for necessário, ele atualizará os arquivos para a nova versão.

Nota: É sempre recomendável manter uma cópia da versão anterior por um tempo.


3. Organização dos arquivos e classes

De modo geral, o MUD está dividido em três grupos:
Arquivos mud-a-*.int Contém as áreas (itens, personagens e salas das areas).
Arquivos mud-b-*.int Contém os comandos e configurações definidos pela
administração do MUD.
Os demais arquivos mud*.int formam a base do MUD.

mud.int
É responsável pela comunicação entre o jogo e os jogadores.

mud-b-config.int
Configuração do jogo (a classe 'config'), como por exemplo, se vai rodar em
uma janela ou abrindo uma porta, a sala inicial, etc. A grande maioria são
as opções do comando ECONFIG do MUD.

mud-b-tipo.int
Raças e classes de personagens existentes.

mud-b-social.int
Comandos sociais existentes.

mud-b-hab.int
Habilidades e magias existente.

mud-b-efeito.int
Efeitos existentes.

mud-a-*.int
Contém as classes que compõem uma área.
Geralmente são:
Definições da área: classe de nome 'a_' + prefixo da área
Propriedades herdadas pelas salas: classe de nome 'b_' + prefixo da área
Salas: classes de nome 's_' + prefixo da área + número de '001' a '999'

mud-atualiza.int
Atualiza os arquivos mud-a-*.int e mud-b-*.int criados com versões
anteriores do programa.

mud-comum.int
Classe 'comum_obj', que é herdada por todos os personagens, itens e salas.
Basicamente essa classe lida com a hierarquia dos objetos (quais objetos
um objeto possui), peso, volume, quantidade de itens e luz.
Classe 'comum_persoitem', que é herdada por todos os personagens e itens.
Herda 'comum_obj' e acrescenta duas coisas: se está ou não visível e os
atributos que aparecem na frente do nome do personagem ou item.

mud-sala.int
Classes 'area' e 'sala', herdadas por todas as áreas e salas.

mud-item.int
Classe 'comum_item', herdada por todos os itens.
Classe 'comum_itemgrupo', herdada pelos itens que podem ser agrupados
em um único objeto.
Os itens são classes cujo nome começa com 'i_'.

mud-perso.int
Classe 'comum_perso' - herdada por todos os personagens.
Classe 'comum_persobat' - personagens que podem batalhar.
Classe 'comum_persoanimal' - personagens que podem batalhar e carregar animais.
Os personagens não jogadores são classes cujo nome começa com 'p_'.

mud-jog.int
Classes responsáveis pelos jogadores.
A classe 'jogador' é o personagem dos jogadores.
A classe 'jogsock' é responsável pela comunicação com o usuário.

mud-cmd*.int
Contém os comandos que os personagens podem digitar. Vide tópico "Comandos".

mud-info.int
Comandos que apenas dão informações ao jogador.

mud-social.int
Menus para criar e editar comandos sociais e a classe 'soccomum', que serve
de base para esses comandos. Todo comando é uma classe cujo nome é "soc_"
seguido do nome do comando. Quando o jogador digita algo, os sociais são
verificados após as classes 'cmd_' e 'cmd_magia_' e antes das classes
'cmdfim_'.

mud-cmd-item.int
Comandos de manuseio de objetos.

mud-cmd-mover.int
Comandos de movimentação.

mud-ataque.int
Menus para criar e editar habilidades e magias e a classe 'comando_ataque',
que serve de base para esses comandos. Via de regra, a função 'escr' checa
se está em condições de atacar e obtém o alvo, e chama a função 'exechab',
que realiza o ataque propriamente dito.

mud-efeito.int
Efeitos que podem afetar personagens e itens.
Cada efeito é uma classe cujo nome começa com 'e_'.

mud-mens.int
Contém a classe 'mens', especializada no envio de mensagens para personagens.

mud-misc.int
Contém a classe 'misc', que é uma miscelânia de funções, variáveis e tabelas.
Diferentemente das outras classes, as funções de misc devem ser chamadas
com 'misc:'. Por exemplo, 'misc:obj' ao invés de '$misc.obj'.

mud-adm.int
Funções básicas usadas pelos comandos de administração.

mud-adm-*.int
Contém os comandos de administração. Todo comando é uma classe cujo nome
é 'adm_'. As seguintes funções são usadas:
escr - Quando o jogador escreveu o comando
exec - Quando a variável passo for o nome do comando
Nas funções escr e exec:
  este = objeto jogsock do jogador
  arg0 = texto que foi digitado
  Deve retornar 1 se o comando foi processado
menu - Texto que deve ser apresentado quando for uma opção de menu
Na função menu:
  este = objeto jogsock do jogador
  arg0 = nome da classe
  arg1 = nome da variável
  arg2 = nomes das opções (não usado)
  Deve retornar o texto que vai aparecer no menu
ajuda - Texto que deve ser apresentado ao teclar adm seguido do nome do comando
  Se houver a ajuda, deve retornar o texto da ajuda


4. Envio de mensagens formatadas (arquivo mud-mens.int)

Para enviar uma mensagem formatada a um ou mais personagens, usa-se
a classe 'mens', contida no arquivo 'mud-mens.int'.

Primeiro define-se de um a três objetos, com a seguinte função:
$mens.p(<personagem>, [alvo], [objeto])

Depois, envia-se uma mensagem com uma das seguintes funções:

$mens.mtodos1(texto para todos)
$mens.mtodos2(texto para personagem, texto para outros)
$mens.mtodos3(texto para personagem, texto para alvo, texto para outros)
Enviar mensagem para todos que estiverem acordados.

$mens.mvis1(texto para todos)
$mens.mvis2(texto para personagem, texto para outros)
$mens.mvis3(texto para personagem, texto para alvo, texto para outros)
Enviar mensagem para todos que estiverem acordados e puderem ver
o personagem.

$mens.marea1(texto para todos)
Enviar mensagem para todos que estiverem na mesma área, mesmo dormindo

$mens.mmudarea1(texto para todos)
Enviar mensagem para todos que estiverem acordados na mesma área

$mens.mmud1(texto para todos)
Enviar mensagem para todos do MUD, mesmo os que estiverem dormindo

$mens.mmudtodos1(texto para todos)
Enviar mensagem para todos que estiverem acordados no MUD

<personagem>.msginv(texto)
Envia mensagem para o personagem se ele estiver acordado.

<personagem>.msgvis(texto)
Envia mensagem para o personagem se ele estiver acordado e vendo
o personagem definido em $mens.p.

O texto pode conter os seguintes caracteres especiais:

$$ = Símbolo $
$P = Nome do personagem
$Q = Nome do personagem sem citar o dono
$R = Nome do personagem no comando QUEM
$A = Nome do alvo
$B = Nome do alvo sem citar o dono
$C = Nome do alvo no comando QUEM
$O = Nome do objeto
$F = Depende do personagem: "um" ou "uma"
$G = Depende do alvo: "um" ou "uma"
$H = Depende do objeto: "um" ou "uma"
$S = Depende do personagem: "o" ou "a"
$T = Depende do alvo: "o" ou "a"
$U = Depende do objeto: "o" ou "a"
$V = Depende do personagem: "e" ou "a"
$W = Depende do alvo: "e" ou "a"
$X = Depende do objeto: "e" ou "a"
$M = Texto de $mens.mens
$D = É substituído por "de"
     No entando, seguido de o/a/os/as, forma as palavras do/da/dos/das
     Costuma ser usado nas mensagens como $d $p, $d $a e $d $o
$E = É substituído por "em"
     No entando, seguido de o/a/os/as, forma as palavras no/na/nos/nas
     Costuma ser usado nas mensagens como $e $p, $e $a e $e $o
$1 a $5 = Variáveis $mens.o_1 a $mens.o_5

Quando o símbolo $ for seguido de uma letra minúscula, a primeira letra
do texto não é transformada em maiúscula.


5. Variáveis dinâmicas de personagens, salas e itens

Todos os personagens e salas têm uma lista de variáveis dinâmicas
(podem ser criadas e apagadas) contidas na seguinte variável:
textovar var

Os dois primeiros caracteres das variáveis de var indicam o tipo:
a_ = agenda (1=viu, 2=pegou)
d_ = variável que é apagada quando o objeto muda de dono
e_ = nome da classe que contém o efeito
     tem efeito somente quando o item ou personagem é criado
j_ = variável que é apagada quando é carregado um jogo salvo
h_ = habilidade
i_ = idioma
m_ = magia
o_ = item classificado como "outros"
u_ = usuário ignorado
z_ = variável não visível ao jogador

Variáveis mais comuns:
z_aulas = pontos de aula (quantas aulas ainda pode fazer)
z_captura = nome do item que o jogador escolheu para capturar animais
z_desc = descrição criada por um jogador; vide comandos pdesc e rdesc
z_dono = nome do dono original (quem capturou o animal)
z_email = e-mail do jogador (somente nos personagens de jogadores)
z_moedas = quantas moedas o personagem, item ou sala possui
z_pnivel = nível do animal quando foi capturado
z_salafim = sala para onde vai quando retorna da morte
z_teleentra = mensagem definida com o comando teleentra
z_telesai = mensagem definida com o comando telesai
z_titulo = título criado por um jogador; vide comandos ptitulo e rtitulo

São usados os seguintes textos em indiceobj/indiceitem:
"ip " + endereço IP
    Contém a lista de usuários com esse endereço IP
    Variável jogoservip:endereco, arquivo mud.int
"bs " + nome da sala no chat (quando o MUD é ativado como bot)
    Variável jogobot_sala:sala_nome, arquivo mud.int
"bu " + nome do usuário no chat (quando o MUD é ativado como bot)
    Variável jogobot_usr:j_nome, arquivo mud.int
"un " + nome codificado (nome do arquivo SAV sem o .SAV)
    O objeto responsável pela comunicação com o jogador
    Variável jogsock:cnome, arquivo mud-jog.int
"pn " + nome codificado (nome do arquivo SAV sem o .SAV)
    Personagem do jogador
    Variável jogador:cnome, arquivo mud-jog.int
"cj " + nome codificado + " " + prefixo da área
    Casa do jogador (nome codificado corresponde ao arquivo SAV do jogador)
    Variável casa:nomejog, arquivo mud-casa.int


6. Comum a salas, personagens e itens (classe comum_obj, em mud-comum.int)

ref dono
Quem possui esse objeto; mesmo que: idono.objlista
No caso do personagem, é a sala aonde o personagem está.
Para mudar o dono, usar a função mdono.

ref contr
Quem está controlando; mesmo que: (perso && dono.perso ? dono : este)
Usado quando um personagem possui animais, para saber quem está
controlando o animal.

ref donoantes
Dono anterior desse objeto.

listaobj dentro1
Lista de itens, exceto os que estão sendo vestidos.

listaobj dentro2
Se for sala: lista de personagens.
Se for personagem: lista de itens que está vestindo, animais e efeitos.

listaobj evento
Objetos que recebem eventos desse objeto.

const objsav = 0
Se deve salvar o objeto ao salvar personagem ou sala
0 = não salva
1 = salva
2 = salva só em arquivos de jogadores
3 = salva só em arquivos de casas

int1 objmudou
Se 1, deve salvar a sala porque ocorreu alguma mudança na lista de objetos
Essa variável costuma estar presente somente nas salas

Variáveis relacionadas ao peso
uint32 pesoden # Somente leitura: quanto peso tem dentro
uint32 pesotot # Somente leitura: peso total
const pesoobj = 1 # Peso do objeto (em gramas)
const pesoadd = 1 # Se falso, está voando/flutuando (pesotot será 0)

func mdono( novo dono )
Muda o dono do objeto, acertando diversas variáveis.

func ajustaobj
Acerta o dono do objeto (variável dono) e os eventos, baseado nas constantes:
const eveste = 1 # Receber eventos do próprio objeto
const evperso = 1 # Receber eventos do dono se o dono for personagem
const evitem = 1 # Receber eventos do dono se o dono for item
const evsala = 1 # Receber eventos do dono se o dono for sala
Usa internamente a variável:
listaitem evrec.2

func ajustapeso
Ajuda peso e volume; variáveis pesoden, pesotot, volden, voltot.
Vide arquivo mud-comum.int


7. Salas (classe sala, em mud-sala.int)

const s_titulo = "texto"
Retorna o título da sala. arg0 é quem está requisitanto o título.

const s_desc = "texto"
Retorna a descrição da sala. arg0 é quem está requisitanto a descrição.

const s_noite = "texto"
Retorna a descrição da sala quando está de noite.
arg0 é quem está requisitanto a descrição.
Inicialmente, para ser a mesma descrição que de dia, é definido como:
const s_noite = s_desc

const s_ocultar = 0
Verdadeiro (geralmente 1) deve ocultar a descrição da sala ao entrar.

const s_terreno = 0
Tipo de terreno:
0 = Dentro, lugar fechado - 1mv
1 = Rua de uma cidade - 2mv
2 = Campo, um campo aberto - 2mv
3 = Pântano, itens afundam - 3mv
4 = Floresta densa - 3mv
5 = Colina - 4mv
6 = Montanha, excessivamente montanhoso - 6mv
7 = Água, pode nadar - 4mv
8 = Água, requer barco para passar - 50mv
9 = Em baixo d'água - 10mv
10 = Ar, itens e personagens caem - 10mv
11 = Deserto, 3x mais sede, 6mv

const s_luz = 0
Tipo de iluminação:
0 = Claro com eventos de tempo
1 = Claro sem eventos de tempo
2 = Luz do sol
3 = Escuro

const s_recup = 100
Taxa de recuperação de vida, mana e movimentos dos personagens.
Quanto maior, mais recupera; 0 não recupera.

const s_item = 5
Em quantos minutos sem jogador na sala deve começar a apagar os itens.
Os itens são apagados aos poucos, pela função t_item_exec, com a variável:
inttempo t_item # Tempo para começar a apagar itens da sala

const s_morre = 0
Se o personagem morre ao entrar na sala:
0 = Não morre
1 = Morre
2 = Morre e perde itens e moedas

const s_falar = ""
Mensagem recebida ao usar o comando falar.
Se nulo ou um texto vazio, permite falar.

const s_gritar = s_falar
Mensagem recebida ao usar o comando gritar.
Se nulo ou um texto vazio, permite gritar.

const s_luta = 1
Tipo de luta permitido:
0 = Nenhuma
1 = Exceto entre jogador
2 = Qualquer luta

const s_semmagia = 0
Se não é possível usar magia na sala (0=permite, 1=não permite).

const s_retornar = 0
Se não é possível retornar (comando e magia retornar) dessa sala
(0=permite, 1=não permite).

const s_voltar = nulo
Quando um jogador sair do jogo e voltar, para qual sala deve voltar.
Exemplo de constante: const s_voltar = $s_casa001

const s_pnj = 0
Se PNJs não entram (0=podem entrar, 1=não podem).

const s_soltar = 0
Se é permitido soltar itens:
0 = Permitido
1 = Não permitido
2 = Se soltar, destrói afundando
3 = Se soltar, destrói caindo
4 = Se soltar, desintegra

ref dir_[direção]
Antes de acessar fazer misc:obj=personagem
Sala na direção especificada.
Geralmente definido dessa forma: const dir_s = $sala1
As direções válidas são: n s l o ne no se so c b
Se estiver ausente, não há sala nessa direção

uint8 porta_[direção]
const portaini_[direção]
Antes de acessar fazer misc:obj=personagem
Especifica o tipo de saída em determinada direção.
Porta é o valor atual, geralmente definido dessa forma: uint8 porta_s
PortaIni é o valor inicial, geralmente definido dessa forma: const porta_s = 2
0 = Não há porta
1 = Está aberto
2 = Está fechado
3 = Está trancado

const inv_[direção]
Antes de acessar fazer misc:obj=personagem
Verdadeiro se for invisível (não aparece na lista de saídas)

const tranc_[direção]
Antes de aceessar fazer misc:obj=personagem
0 = Não pode ser trancado
1 = Pode ser trancado
2 = Tranca ao fechar

const fechadura_[direção]
Antes de acessar fazer misc:obj=personagem
Texto que contém o código da fechadura.
Somente uma chave com o mesmo código tranca e destranca.
Se estiver ausente ou for um texto vazio, não requer chave.

const voar_[direção]
Antes de acessar fazer misc:obj=personagem
Se é preciso estar voando ou flutuando para seguir nessa direção.
0=não, 1=sim

const fugir_[direção]
Antes de acessar fazer misc:obj=personagem
Se não existe a possibilidade de fugir de uma luta nessa direção.
0=permite fugir, 1=não permite fugir

const portanome_[direção]
Nome da porta na direção especificada. Se estiver ausente ou for um
texto vazio, será usada a mensagem padrão, que depende da porta.
Essas constantes são usadas nos comandos abrir/fechar/trancar/destrancar.
Exemplo:
const portanome_n = "a porta da casa"

const portaartigo_[direção]
Se o nome da porta está no singular ou plural, feminino ou masculino.
0 a (porta)
1 as (portas)
2 o (portão)
3 os (portões)

const s_reset
Reset de sala:
Um texto que contém os executados quando algum jogador entra na sala.
O significado do texto está explicado no início do arquivo mud-reset.int.

const a_reset
Reset de área:
Um texto que contém os executados quando ocorre reset da área.
O significado do texto está explicado no início do arquivo mud-reset.int.

func ver_[nome do a descrição]( jogador, 0 )
Deve retornar verdadeiro (ou um texto não vazio) se essa descrição extra
existir ou falso (ou um texto vazio) se não existir.

func ver_[nome do a descrição]( jogador, 1 )
Deve retornar um texto que é a descrição extra.
Exemplo de como criar uma descrição:
const ver_placa = "Você olha para uma placa vazia."

func descsala( jogador, modo )
Adiciona texto com a descrição da sala
Se modo=0, mostra o mais curto possível
Somar 1 para mostrar descrição completa
Somar 2 para mostrar saídas
Somar 4 para mostrar os personagens e itens

func txtsai( jogador )
Retorna as saídas existentes (texto)

func mudaporta( saída, valor, mens1, mens2 )
Muda estado de uma saída; variável porta_[arg0]
Saída é nome da saída (até duas letras)
Novo valor, vide porta_[direção]
Mens1 = mensagem enviada para a própria sala, da mesma forma que $mens.mtodos1
Mens2 = mensagem enviada para a sala vizinha, da mesma forma que $mens.mtodos1
Nas mensagens, "$m" é o nome da porta
Retorna: 0=saída inexistente, 1=saída foi alterada

func msg( mensagem )
Envia mensagem para todos os personagens que estiverem na sala.

func msgtodos( mensagem )
Envia mensagem para todos os personagens que estiverem acordados na sala.


8. Personagens e itens (classe comum_persoitem, em mud-comum.int)

int16 bitinv
Grau de invisibilidade do personagem ou objeto; geralmente é 3
0 = visível a qualquer um, mesmo no escuro ou a quem estiver cego
somar 1 se invisível a quem estiver cego
somar 2 se invisível no escuro
somar 4 se está invisível
somar 8 se está oculto
somar 16 se está voando
somar 32 se está voando alto
somar 128 se é administrador invisível

int16 bitver
O que está visível ao personagem ou objeto; geralmente é 1 ou 3
0 = nada (está cego)
somar 1 se não está cego
somar 2 se enxega no escuro
somar 4 se pode ver invisível
somar 8 se pode ver oculto
somar 16 se pode ver voando
somar 32 se pode ver voando alto
somar 0x80 se pode ver administradores invisíveis
somar 0x100 se anda em silêncio
somar 0x200 se está flutuando
somar 0x400 se está dormindo por efeito de algo
somar 0x800 se não pode ser colocado para dormir
somar 0x1000 se percebe quem anda em silêncio

textotxt atribs
Atributos do item ou personagem, como "flutuando", "invisível", etc.
Um atributo por linha.

const nivel = 0
Nível definido no item ou personagem.

sav uint16 pnivel
Nível atual do item ou personagem.
Os personagens só conseguem vestir itens de nível igual ou menor.

txt16 nome
const nome = ""
Nome do personagem ou item, usado em ações com o objeto.

const ident = nome
Nomes que o jogador digita para ações com o personagem ou item.
Exemplo: ao pegar um item ou atacar um personagem.

const descnome = nome
Descrição curta. É a descrição usada na maioria dos comandos.
Exemplos: "uma bola", "Joaquim" e "um ladrão"

func descpos
Descrição quando está na sala; arg0=quem quer ver.
Nos itens, inicialmente é uma mensagem genérica.
Nos personagens apresenta uma mensagem de acordo com a posição atual,
e por isso é raramente alterado.

const descver = ""
Descrição quando alguém olha para o item ou personagem (comando olhar).
Aqui arg0=quem quer ver.

const descident = ""
Descrição para quem usa a habilidade identificar no item ou personagem.
Não é necessário colocar aqui a maioria das propriedades (nível, tipo,
etc) porque elas já são mostradas automaticamente.

const msexo = 0
Usado nas mensagens com o personagem ou item.
0=feminino, 1=masculino

const inivar = ""
Lista de variáveis definidas quando o personagem ou item é criado.
Vide tópico "Variáveis dinâmicas de personagens, salas e itens".

intexec recalc
Para chamar recalc_exec quando necessário.

func recalc_exec
Ajusta variáveis, principalmente batalha.

func visivel( personagem )
Retorna verdadeiro se está visível para o persoangem.

func mudadono( item ou personagem, quantidade )
Item ou personagem muda de dono.
Quando a quantidade for omitida ou não for um item que pode ser
agrupado em um objeto, a quantidade será considerada 1.
Essa função retorna o próprio personagem ou item que foi movido.
Isso é útil principalmente em itens que agrupam.

func apagar( quantidade )
Apaga o personagem ou uma quantidade do item.


9. Personagens (arquivo mud-perso.int)

Para criar um personagem
criar("nome da classe", aonde está, nível do personagem, "variáveis")
Se o nível for omitido, será 0.
Variáveis é um texto do tipo "variável=valor". Quando houver mais de uma
variável, separar por vírgula (exemplo, "v1=10,v2=20").
São criadas as variáveis correspondentes em 'textovar var' do personagem.

const perso = 1
1 = personagem que não batalha (classe comum_perso)
2 = personagem que batalha (classe comum_persobat)
3 = personagem que batalha e carrega animais (classe comum_persoanimal)

sav uint8 posicao
Posição do personagem:
0 = morto
1 = mortalmente ferido
2 = incapacitado
3 = fraco
4 = dormindo
5 = descansando
6 = sentado
7 = lutando
8 = em pé

const pospadr = 8
Posição padrão do personagem.

const descpadr
Descrição quando está na sala na posição padrão.
Exemplo: "Uma bola foi largada aqui." e "Um ladrão procura alguém distraído".

const sexoini = msexo
Sexo inicial: 0=feminino, 1=masculino, 2=aleatório
Aleatório escolhe um quando o personagem é criado.
Da forma como foi feita, se não for definido, é o mesmo sexo usado nas
mensagens com o personagem (constante msexo).

int1 psexo
Sexo do personagem: 0=feminino, 1=masculino

const tipo1 = 0
Primeiro tipo associado ao personagem; geralmente é a raça.

const tipo2 = 0
Segundo tipo associado ao personagem; geralmente é a classe.

const tipo3 = 0
Terceiro tipo associado ao personagem.

const equip1 = 0
Se não for 0, são as posições aonde pode usar equipamentos.
Cada bit corresponde a uma posição.
Nota: é muito mais fácil alterar essa constante pela edição online.

const equip2 = 0
Adicionar essas posições no personagem.
Nota: é muito mais fácil alterar essa constante pela edição online.

const equip3 = 0
Remover essas posições no personagem.
Nota: é muito mais fácil alterar essa constante pela edição online.

sav textotxt p_hist
Histórico do personagem: quem o personagem matou.

const p_recebe = 0
Se recebe itens (se podem dar itens ao personagem); 0=não pode, 1=pode.
Nos jogadores, essa constante é 1 (pode receber).

const p_naoseguir = 0
Se não é possível seguir o personagem (0=podem seguir, 1=não podem).
Nos jogadores, depende da opção "config +seguir", devido à linha:
const p_naoseguir = !i.obj.jogconfig.5

const p_atktipo = 0
Tipo de ataque, quando o personagem ataca automaticamente e sem arma.
Os tipos estão definidos na constante config:atk_txt, arquivo mud-config.int.
Nota: é muito mais fácil alterar essa constante pela edição online.

const p_imortal = 0
Se é imortal (0=pode morrer, 1=não pode).
Nos jogadores, depende da opção "config +imortal", devido à linha:
const p_imortal = jogconfig.14

const p_corpo = 0
Se o corpo do personagem fica quando ele morre:
0 Não deixa corpo
1 Deixa corpo vazio
2 Deixa corpo com itens e moedas

const p_exp = 100
func p_exp( personagem )
Quanta experiência dá quando morre, em porcentagem.
Com essa opção é possível fazer alguns PNJs darem mais experiência que
outros, independente do nível.

const p_morreu1 = "$P morreu."
Mensagem quando o personagem morreu e não tem dono.

const p_morreu2 = "$P desmaiou."
Mensagem quando o personagem morreu e tem dono (percente a outro personagem).

func teclou
Chamado sempre que o personagem tecla algum comando (arg0=comando)

func p_espera_exec
Pega o próximo comando da lista.

func teclouproc
Processa comando, sem espera (arg0=comando).

func erropos
Retorna uma mensagem conforme a posição atual, para indicar que o que
o personagem digitou não pode ser feito.

func acertapos
func acertapos(1)
Acerta posição do personagem, conforme pontos de vida e batalha.
Para checar se morreu, chamar com: acertapos(1)
Retorna o corpo do personagem, se ele morreu e ficou o corpo.

func batalhaexp( valor )
Dá experiência a quem estiver atacando o personagem
Valor é o fator do ganho de experiência

func batalhafim
Encerra a batalha
Para checar se morreu, chamar com: batalhafim(1)

func atktempo
É chamado após algum tempo sem golpes, para encerrar a batalha.

func morreu
func morreu( quem matou o personagem )
Executa procedimentos quando o personagem morre.
Se for fornecido o personagem, é ele quem pegará as moedas.
Retorna o corpo do personagem, se ele morreu e ficou o corpo.

func msg( mensagem )
Envia mensagem para o personagem.

func msgvis( mensagem )
Envia mensagem para o personagem, se ele estiver vendo o autor da mensagem.
Essa função funciona em conjunto com a classe mens, mais especificamente
a função: $mens.p( autor, alvo, objeto )

func msginv( mensagem )
Envia mensagem para o personagem, mesmo se o autor da mensagem estiver
invisível. Vide comentários na documentação de msgvis (logo acima).

func dentrocasa
Retorna 1 se o jogador está dentro da própria casa ou nulo se não está
Para personagens não jogador, essa função retorna sempre nulo


10. Personagens não jogador (arquivo mud-perso.int)

const p_captura = 0
Se pode ser capturado:
0 = Não
1 = Muito fácil
2 = Fácil
3 = Normal
4 = Difícil
5 = Muito difícil

const p_soltar = 0
Se pode ser dado ou solto:
0 = Pode-se dar e soltar
1 = Pode-se apenas soltar
2 = Não se pode dar nem soltar

const p_mover = 0
Aonde pode se movimentar:
0 = Não sai do lugar
1 = Somente na área
2 = Qualquer lugar

const p_movervel = 140
Tempo médio em décimos de segundo para ir para outra sala.

const p_agressivo = 0
func p_agressivo(personagem)
Se ataca os jogadores.
0 = Pacífico
1 = Se atacarem
2 = Sim

const p_fugir = 0
Foge de uma luta se os pontos de vida estiverem abaixo desse valor.

const p_naoresg = 0
Se não permite resgatar jogadores lutando com esse personagem.
(0=permite resgatar, 1=não permite)

const p_comecorpo = 0
Se come corpos de outros personagens (desde que esteja cordado).
(0=não come, 1=come)

const lojaini = 0
Que horas a loja abre ou o PNJ começa a ensinar.

const lojafim = 0
Que horas a loja abre ou o PNJ pára de ensinar.
Se for igual ao horário de abertura, nunca fecha.

const taxavenda = 0
Lucro na venda, em porcentagem (0=sem lucro; paga o valor do item).

const taxacompra = 0
Lucro na compra, em porcentagem (de 0=preço normal a 100=não paga pelo item).

const taxaaula = 0
Preço da aula em porcentagem (exemplo, 0=de graça e 100=preço da aula).

const lojaitem = ""
Tipos de produtos que vende. É um texto sendo que cada linha é um produto,
no seguinte formato: <item>  <nível>
Exemplo:
const lojaitem = "teste012 3\nteste013 0"

const lojainv = 0
Produtos inv: se vende os produtos listados no comando inv (0=não, 1=sim).

const lojasala = ""
Produtos sala: Nome da sala com os produtos que serão vendidos.

const lojacasa = 0
Vende casas: se compra e vende casas na área aonde está (0=não, 1=sim).

const lojachave = 0
Chaveiro: Se vende chaves e fechaduras para casas da área aonde está
(0=não, 1=sim).

const tipoitem = 0
Tipos de produtos que compra.
É um valor numérico em que cada bit corresponde a um tipo de produto
da lista em config:produtos, no arquivo mud-b-config.int.
Nota: é muito mais fácil alterar essa constante pela edição online.

const lojaaula = ""
Aulas que ensina. É um texto sendo que cada linha é uma aula, no seguinte
formato:  <nome da variável>  <nível>
O nome da variável pode começar com:
  "h_" para habilidade, como h_Chutar
  "m_" para magia, como m_Retornar
  "i_" Para idioma, como i_Hebráico
  "e_" para extra (aparece no comando Outros)
O nível pode ser:
  1 = Iniciante
  2 = Muito básico
  3 = Básico
  4 = Intermediário
  5 = Avançado
  6 = Muito avançado
  7 = Mestre
  8 = Perito
Exemplo:
const lojaaula = "h_Chutar 3\nm_Retornar 7"

const lojanao = ""
Raças e classes de personagens com quem não negocia (não compra, não vende
e não ensina). É um texto sendo que cada linha é uma raça ou classe.
Exemplo:
const lojanao = "anão\nguerreiro"

* const p_pet = 0
NÃO ESTÁ PRONTO
0 = não pode ser animal de estimação
1 = jogador pode pegar e usar em batalhas
2 = segue ordens do jogador

* const p_fora = 0
NÃO ESTÁ PRONTO
Não entra em lugares fechados

* const p_pegar = 0
NÃO ESTÁ PRONTO
0 = não pega itens do chão
1 = pega itens
2 = pega somente itens de valor

* const p_nadar = 0
NÃO ESTÁ PRONTO
Pode atravessar lugares em que não se pode nadar.

mata jogadores que mataram ou roubaram outros
ataca jogadores que mataram ou roubaram outros
pega lixo
patrulha: encerra brigas


11. Itens (arquivo mud-item.int)

Para criar um item
Itens que podem ser agrupados:
criar("nome da classe", aonde está, quantidade de itens)
Se a quantidade for omitida ou for menor que 1, será 1.

Outros itens:
criar("nome da classe", aonde está, nível do item, "variáveis")
Se o nível for omitido, será 0.
Variáveis é um texto do tipo "variável=valor". Quando houver mais de uma
variável, separar por vírgula (exemplo, "v1=10,v2=20").
São criadas as variáveis correspondentes em 'textovar var' do item.

const item = 1
1 = Item comum (classe comum_item)
2 = Pode agrupar (classe comum_itemgrupo)
3 = Completo (classe comum_itemperso)

const mantersala = 0
Como a opção "Apagar itens" da sala ou área afeta o item.
0 = Item é apagado normalmente depois de um tempo sem jogador por perto
1 = Item permanece na sala

const manterperso = 0
Se o jogador não perde o item ao entrar em uma sala que mata e perde itens.
0 = Perde
1 = Não perde

const vestir1 = 0
Em que lugares do corpo pode ir quando é vestido.
Cada bit corresponde a um lugar. Os nomes dos lugares estão definidos na
constante equip_txt, na classe config, no arquivo mud-b.config.int.

uint8 vestpos
Em que posição está vestindo.
0 = não está vestindo
50 = está empunhando
Outros valores, começando pelo número 1, correspondem aos lugares definidos
na constante equip_txt, na classe config, no arquivo mud-b.config.int.
Nota: Usar a função vestir ao invés de alterar essa variável diretamente.

const i_captura = 0
func i_captura( animal )
Nível médio dos animais que podem ser capturados com esse item.
Se for 0, esse item não pode ser usado para capturar animais.
O argumento dessa função é o animal que o jogador está tentando capturar,
(uma variável ref), ou nulo se estiver apenas escolhendo esse item para
capturar.

const i_movel = 0
Tipo de móvel:
0 = Não é móvel
1 = Pode sentar
2 = Pode sentar e deitar

const i_lugar = 0
Quantos personagens podem sentar-se.

const i_abertoini = 0
Valor inicial de aberto

uint8 i_aberto
Tipo de container:
0 = Não é container
1 = Está sempre aberto
2 = Está aberto
3 = Está fechado
4 = Está trancado
5 = Indefinido; não checa se está aberto, fechado ou trancado

const i_tranc = 0
0 = Não pode ser trancado
1 = Pode ser trancado
2 = Tranca ao fechar

const i_fechadura = ""
Texto que contém o código da fechadura.
Somente uma chave com o mesmo código tranca e destranca.
Se estiver ausente ou for um texto vazio, não requer chave.

const i_chave = ""
Texto que contém o código da chave, ou "" se não for chave.

const i_pegar = ""
Mensagem ao tentar pegar o item; se vazio, consegue pegar.

const luzitem = 0
Tipo de fonte de luz:
0 = Não aceita acender/apagar, sem fogo
1 = Lanterna (acende/apaga, sem fogo)
2 = Lanterna 2 (acende/apaga, inclusive na água)
3 = Não aceita acender/apagar, produz fogo
4 = Lampião (acende/apaga, produz fogo)
5 = Fósforo (acende uma vez, produz fogo)
6 = Tocha (acende com fogo, produz fogo)

const luzini = 1000
Duração da luz, em décimos de segundo.

const luzliga = "$P acende $o."
Mensagem quando alguém acende a luz.

const luztxt = ""
Mensagem quando a luz acaba, se estiver vazio não envia nenhuma mensagem.

const luzfim = 0
Se item some (é apagado) quando a luz acaba (0=não, 1=sim).

const armatipo = 0
Tipo de arma; vide config:arma_txt (0 significa que não é arma).

const armaprecisao = 0
Precisão da arma, em porcentagem, 100 significa mesma precisão de
atacar sem arma.

const armamin = 0
Ataque mínimo da arma.

const armamax = 0
Ataque máximo da arma.

const armamanual = 0
Se o personagem não usa essa arma em ataques automáticos (0=pode, 1=não pode).

const f_tipo = 0
Tipo de item fome/sede:
0 = Nenhum
1 = Fonte, não some após beber
2 = Poção, beber
3 = Comida, comer
4 = Pergaminho, recitar

const f_sede = 0
O quanto sacia a sede. Um minuto são de 3 a 4 unidades, exceto no deserto.
O valor máximo da sede do jogador (sem sede) é $miscfome.cheio.

const f_fome = 0
O quanto sustenta. Um minuto são de 3 a 4 unidades.
O valor máximo da fome do jogador (sem fome) é $miscfome.cheio.

const f_bebida = 0
O quanto deixa bêbado. Um minuto são de 6 a 8 unidades.
O valor máximo da embriaguês do jogador (totalmente embriagado)
é $miscfome.cheio.

const f_diges = 0
Quanto tempo leva para digerir o alimento.
Um minuto são de 3 a 12 unidades, dependendo da posição do personagem.
O valor máximo da digestão do jogador é $miscfome.cheio.

const f_magia1 = ""
const f_nivel1 = 0
Primeira magia lançada ao beber/comer/recitar e o nível da magia.

const f_magia2 = ""
const f_nivel2 = 0
Segunda magia lançada ao beber/comer/recitar e o nível da magia.

const f_magia3 = ""
const f_nivel3 = 0
Terceira magia lançada ao beber/comer/recitar e o nível da magia.

func vestir( posição )
Veste um item apenas, não verifica se a posição já está ocupada.
Se posição for 0, deixa de vestir.


12. Funções chamadas somente para o póprio objeto

func cmd_ini(arg0, arg1, arg2, arg3, arg4)
Chamado quando o objeto é criado. Arg0 a arg5 são os 5 primeiros argumentos
da função ini do objeto.

func cmd_objfim
Chamado quando o objeto é apagado. O antigo dono está na variável donoantes.

func cmd_salaperso(personagem)
Chamado para a própria sala, quando um personagem controlado por um jogador
entra na sala.

func cmd_mudadono
Chamado por mudadono, logo após o item ou personagem mudar de dono.

func cmd_recalc1(personagem)
Chamado por func recalc_exec, para ajustar as variáveis do personagem
(pontos de vida, mana, etc.)

func cmd_pnj_proc
Chamado cada vez que o personagem não jogador decidir fazer alguma coisa.
Não é chamado se estiver sendo controlado por um jogador ou pertencer
a outro personagem.

func cmd_podevestir
Chamado para o próprio item, quando um personagem quer vestir (roupa)
ou empunhar (arma). Se retornar um texto, o personagem não conseguirá
vestir e será enviado esse texto.


13. Eventos

São funções executadas quando um personagem digita algo, muda de sala
ou ocorre qualquer outro fato. Mesmo os itens e salas podem gerar eventos.

Um item, personagem ou sala pode receber diversos tipos de eventos,
bastando acrescentar uma ou mais das seguintes variáveis:

const evhora = 1 # Receber evento cmd_hora a cada hora MUD (5 minutos)
const eveste = 1 # Receber eventos do próprio objeto
const evperso = 1 # Receber eventos do dono se o dono for personagem
const evitem = 1 # Receber eventos do dono se o dono for item
const evsala = 1 # Receber eventos do dono se o dono for sala

Essas constantes têm efeito sempre que o objeto muda de dono ou é criado.
Se for preciso atualizar em outras situações, chamar a função ajustaobj.

Quando a função cmd_hora do objeto é chamada, arg0 é sempre a hora atual,
ou seja, o mesmo que a variável misc:hora.

Internamente, itens, personagens e salas possuem a seguinte variável:
listaobj evento

Gerar um evento significa executar uma função qualquer de todos os objetos
dessa lista. O nome da função está relacionado ao tipo de evento. Exemplo,
'cmd_pegar' corresponde ao comando 'pegar' (quando um personagem tenta pegar
algo, é executada a função 'cmd_pegar').

Para saber quais são as listas envolvidas, basta verificar os argumentos
da função.

Exemplo, o evento correspondente a abrir uma porta está definido assim:
func cmd_abrirdir(personagem, sala, texto)
Significa que quando o personagem tentar abrir uma porta, será executada
a função cmd_abrirdir das listas do personagem e da sala.


14. Eventos incondicionais

São funções chamadas como resultado de uma ação que aconteceu ou vai
acontecer. A função não tem a opção de cancelar a ação.

A seguir são listados os eventos (as funções).

func cmd_fim(personagem ou objeto)
Objeto vai sair do jogo. É chamado para os eventos do personagem apenas.
Antes desse evento ocorrer, o objeto sai da sala a 'listaobj evento' do
objeto é limpa.

func cmd_saiu(personagem, sala)
Personagem saiu da sala.

func cmd_chegou(personagem, sala)
Personagem entrou na sala. É chamado logo após mudar de sala.

func cmd_recalc2(personagem)
Chamado para os objetos em personagem.dentro2, por func recalc_exec,
para ajustar as variáveis (pontos de vida, mana, etc.)

func cmd_recalc3(personagem)
Chamado para os objetos em personagem.evento, por func recalc_exec,
para ajustar as variáveis (pontos de vida, mana, etc.)

func cmd_moveu(personagem, sala, direção)
Personagem foi para uma direção.

func cmd_falou(personagem, texto)
Personagem falou alguma coisa.

func cmd_gritou(personagem, texto)
Personagem gritou alguma coisa.

func cmd_sussurrou(personagem, personagem alvo, texto)
Personagem sussurrou alguma coisa.
Texto é o nome do personagem alvo seguido da mensagem.
Se o personagem alvo não for encontrado esse evento é gerado com personagem
alvo 'nulo', e em seguida é enviada uma mensagem dizendo que não encontrou
o personagem.

cmd_social1(personagem, alvo, objeto do comando)
Personagem executou algum comando social.
É chamada também a função cmd_social1 do objeto que trata do comando.

cmd_social2(personagem, alvo, objeto do comando)
Personagem ou item foi alvo de algum comando social.
É chamada também a função cmd_social2 do objeto que trata do comando.

func cmd_pegouobj(personagem, origem, item, quantidade do item)
func cmd_soltouobj(personagem, destino, item, quantidade do item)
func cmd_deuobj(personagem, destino, item, quantidade do item)
Pegou, soltou ou deu algum item.

func cmd_pegouanim(personagem, animal, sala)
func cmd_soltouanim(personagem, animal, sala)
func cmd_deuanim(personagem, animal, personagem destino)
Pegou (capturou), soltou ou deu algum animal.

func cmd_abriudir(personagem, sala, texto)
func cmd_fechoudir(personagem, sala, texto)
func cmd_destrancoudir(personagem, sala, texto, chave)
func cmd_trancoudir(personagem, sala, texto, chave)
Abriu, fechou, trancou ou destrancou porta na direção especificada.

func cmd_abriuobj(personagem, item)
func cmd_fechouobj(personagem, item)
func cmd_trancouobj(personagem, item, chave)
func cmd_destrancouobj(personagem, item, chave)
Abriu, fechou, trancou ou destrancou um item.

func cmd_acendeu(personagem, item)
func cmd_apagou(personagem, item)
Acendeu ou apagou um item.

func cmd_vestiu(personagem, item, posição)
Vestiu um item ou empunhou uma arma.
A posição é um número que indica a posição, conforme a variável vestpos
do objeto. Começa na posição1, empunhando é a posição 50.

func cmd_removeu(personagem, item, posição)
Remover um item que está vestindo/usando ou uma arma que está empunhando.
Posição é a posição em que estava vestindo ou empunhando.

func cmd_bebeu(personagem, item)
func cmd_comeu(personagem, item)
func cmd_recitou(personagem, item)
Comeu, bebeu ou recitou alguma coisa.

func cmd_alvofim(personagem, alvo, objeto que processa o comando)
Personagem usou uma habilidade ou magia não agressiva.
Esse evento é chamado também para o objeto que processa o comando.

func cmd_atacou(personagem, alvo, objeto que processa o comando)
Fim do ataque a outro personagem.
A variável result do objeto contém o resultado; 0=atacou com sucesso,
A variável mudavida do objeto contém quantos pontos de vida mudaram no alvo.
Esse evento é chamado também para o objeto que processa o comando.

func cmd_levantou(personagem)
func cmd_sentouchao(personagem)
func cmd_descansouchao(personagem)
func cmd_sentouobj(personagem, item, texto)
func cmd_descansouobj(personagem, item, texto)
Ficou em pé, começou a descansar ou sentou-se.

func cmd_morreu(personagem)
Personagem morreu.


15. Eventos condicionais

São funções que, se retornarem 1 ou qualquer outro valor verdadeiro,
a ação será cancelada. Nesse caso, a função deve enviar mensagens ao
usuário informando o motivo.

A seguir são listados os eventos (as funções).

func cmd_escr(personagem, texto que digitou, objeto que processa o comando)
Personagem digitou alguma coisa.

func cmd_ajuda(personagem ou objeto, texto)
Teclou ajuda seguido de um texto.

func cmd_mover(personagem, sala, direção)
Personagem quer ir em uma direção.

func cmd_abrir(personagem, texto)
Quer abrir um objeto ou uma porta.

func cmd_fechar(personagem, texto)
Quer fechar um objeto ou uma porta.

func cmd_ver(personagem, personagem ou item alvo)
func cmd_olhar(personagem, personagem ou item alvo)
Quer ver ou olhar alguma coisa. São os comandos ver (descrição resumida)
e olhar (descrição completa). Para apenas acrescentar uma descrição ao
personagem ou item, vide constante descver e a opção "Descrição ao olhar"
dos comandos de edição online eperso e eitem.

func cmd_pegar(personagem, texto)
func cmd_soltar(personagem, texto)
func cmd_dar(personagem, texto)
Quer pegar, soltar ou dar alguma coisa.

func cmd_pegarmoedas(personagem, origem, quantidade de moedas)
func cmd_soltarmoedas(personagem, destino, quantidade de moedas)
func cmd_darmoedas(personagem, destino, quantidade de moedas)
Quer pegar, soltar ou dar moedas.

func cmd_pegarobj(personagem, origem, item, quantidade do item)
func cmd_soltarobj(personagem, destino, item, quantidade do item)
func cmd_darobj(personagem, destino, item, quantidade do item)
Quer pegar, soltar ou dar algum item.

func cmd_pegaranim(personagem, animal, sala)
func cmd_soltaranim(personagem, animal, sala)
func cmd_daranim(personagem, animal, personagem destino)
Quer pegar (capturar), soltar ou dar algum animal.

func cmd_abrirdir(personagem, sala, texto)
func cmd_fechardir(personagem, sala, texto)
func cmd_trancardir(personagem, sala, texto, chave)
func cmd_destrancardir(personagem, sala, texto, chave)
Quer abrir, fechar, trancar ou destrancar porta na direção especificada.

func cmd_abrirobj(personagem, item)
func cmd_fecharobj(personagem, item)
func cmd_trancarobj(personagem, item, chave)
func cmd_destrancarobj(personagem, item, chave)
Quer abrir, fechar, trancar ou destrancar um item.

func cmd_acender(personagem, item)
func cmd_apagar(personagem, item)
Quer acender ou apagar um item.

func cmd_vestir(personagem, item, posição)
Quer vestir um item ou empunhar uma arma.
A posição é um número que indica a posição, conforme a variável vestpos
do objeto. Começa na posição 1, empunhando é a posição 50.

func cmd_remover(personagem, item, posição)
Quer remover um item que está vestindo/usando ou uma arma que está empunhando.
Posição é a posição atual.

func cmd_beber(personagem, item)
func cmd_comer(personagem, item)
func cmd_recitar(personagem, item)
Quer comer, beber ou recitar alguma coisa.

func cmd_negociar(personagem, personagem vendedor, tipo)
Se o personagem negocia com um jogador.
Se não negocia, deve retornar uma mensagem (um texto) contendo o motivo.
Tipo pode ser "comprar", "vender" ou "ensinar".

func cmd_alvocontr(personagem, alvo, objeto que processa o comando)
Personagem quer usar uma habilidade ou magia não agressiva.
Esse evento é chamado para quem está controlando o personagem e o alvo.

func cmd_alvo(personagem, alvo, objeto que processa o comando)
Personagem quer usar uma habilidade ou magia não agressiva.
Esse evento é chamado também para o objeto que processa o comando.

func cmd_atacarcontr(personagem, alvo, objeto que processa o comando)
Personagem quer usar uma habilidade ou magia agressiva.
Esse evento é chamado para quem está controlando o personagem e o alvo.

func cmd_atacar(personagem, alvo, objeto que processa o comando)
Personagem quer usar uma habilidade ou magia agressiva.
Esse evento é chamado também para o objeto que processa o comando.

func cmd_atkenv(personagem, alvo, objeto que processa o ataque)
Chamado quando um personagem vai realizar um ataque a outro.
Esse evento é chamado para o personagem e o objeto que processa o comando.

func cmd_atkrec(personagem, alvo, objeto que processa o ataque)
Chamado quando um personagem vai receber um ataque de outro.
Esse evento é chamado para o alvo.

func cmd_levantar(personagem)
func cmd_sentarchao(personagem)
func cmd_descansarchao(personagem)
func cmd_sentarobj(personagem, item, texto)
func cmd_descansarobj(personagem, item, texto)
Quer ficar em pé, descansar ou sentar-se.

func cmd_fugir(personagem)
Quer fugir de uma batalha.

func cmd_resgatar(personagem, quem será resgatado)
Quer resgatar alguém de uma batalha.

func cmd_morrer(personagem)
Vai morrer porque os pontos de vida chegaram a zero.

func cmd_ident(personagem, item ou personagem)
Quer identificar um item ou personagem.

func cmd_curar(personagem, personagem alvo)
Quer curar um personagem.


16. Habilidades e magias (mud-ataque.int)

Habilidades são definidas como a maioria dos comandos do MUD: uma classe
cujo nome é "cmd_" seguido do nome da habilidade.
Magias são classes cujo nome é "magia_" seguido do nome da magia.

Via de regra, habilidades e magias são colocadas no arquivo mud-b-hab.int.
Todas elas herdam, diretamente ou indiretamente, a classe comando_hab.

Podem ser dos seguintes tipos:
Comuns: herdam comando_ataque
De identificação: herdam comando_identificar
De retorno: herdam comando_retornar

Na classe comando_hab:

const posic = 7
Posição mínima do personagem para usar a hab/magia.

const precisao = 100
Precisão do golpe, maior que 100 nunca falha.

const tipoarma = 0
É um valor numérico em que cada bit corresponde a um tipo de arma
da lista em config:arma_txt, no arquivo mud-b-config.int.
Se for 0, funciona independente da arma usada.
Nota: é muito mais fácil alterar essa constante pela edição online.

const valor = 0
Preço da aula: quantas moedas os personagens cobram para ensinar.

const depende = ""
Habilidades, magias e idiomas necessários para aprender esse ataque.
É um texto em que cada linha contém o nome de uma prática, no formato:
Habilidades são "h_" seguido do nome da habilida
Magias são "m_" seguido do nome da magia
Idiomas são "i_" seguido do nome do idioma
Exemplo:
const depende = "h_chutar\nm_voar"

const aulaini = 0
Iniciante nível: a partir de que nível pode ter a primeira aula.

const aulafim = 0
Perito nível: A partir de que nível pode ter todas as aulas

const tipoperso = ""
Raças e classes de personagens que podem aprender essa hab/magia.
É um texto sendo que cada linha é uma raça ou classe.
Se estiver vazio, todas as classes e raças podem aprender.
Exemplo:
const tipoperso = "anão\nguerreiro"

const c_espera = 15
Tempo de espera: tempo mínimo que deve esperar, em décimos de segundo

const c_vida1 = 0
Quantos pontos de vida consome no nível iniciante.

const c_vida2 = 0
Quantos pontos de vida consome no nível perito.

const c_mana1 = 0
Quantos pontos de mana consome no nível iniciante.

const c_mana2 = 0
Quantos pontos de mana consome no nível perito.

const c_move1 = 0
Quantos pontos de vigor consome no nível iniciante.

const c_move2 = 0
Quantos pontos de vigor consome no nível perito.

const a_cond = 0
Condição para aplicar os efeitos sob o alvo:
0 = Um ou mais pontos de vida
1 = Nenhum ponto de vida
2 = Nenhuma condição

const a_vida1 = 0
Quantos pontos de vida ganha.

const a_vida2 = 0
Quantos pontos de vida ganha por nível.

const a_mana1 = 0
Quantos pontos de mana ganha.

const a_mana2 = 0
Quantos pontos de mana ganha por nível.

const a_move1 = 0
Quantos pontos de vigor ganha.

const a_move2 = 0
Quantos pontos de vigor ganha por nível.

const a_efeito1 = ""
Nome do primeiro efeito aplicado sob o alvo.

const a_prob1 = 100
Probabilidade de criar o primeiro efeito, 100=não falha.

const a_efeito2 = ""
Nome do segundo efeito aplicado sob o alvo.

const a_prob2 = 100
Probabilidade de criar o segundo efeito, 100=não falha.

const a_efeito3 = ""
Nome do terceiro efeito aplicado sob o alvo.

const a_prob3 = 100
Probabilidade de criar o terceiro efeito, 100=não falha.

const a_remove = ""
Nomes dos efeitos que serão removidos.
É um texto sendo que cada linha é o nome de um efeito.
Exemplo:
const a_remove = "flutuar"

func checahab1( personagem )
func checahab2( personagem, quanto sabe )
Checa se personagem pode usar habilidade/magia e avisa o personagem.
O argumento quanto sabe é um número de 0 a 1 que indica quanto sabe da
habilidade ou magia (0=iniciante até 1=perito).
Retorna verdadeiro se puder usar (na prática, 0=falso, 1=verdadeiro).

func autohab1( personagem )
func autohab2( personagem, quanto sabe )
Mesmo que checahab (acima), exceto que não avisa o personagem.

func custohab1( personagem )
func custohab2( personagem, quanto sabe )
Aplica os custos da habilidade/magia, como gasto de mana e de moviemnto.
Argumento quanto sabe, vide função checahab2, acima.

Na classe comando_ataque:

const tipoalvo = 0
Indica o tipo de alvo e de hab/magia:
0 = Qualquer um; ataque
1 = Exceto o personagem; ataque
2 = Todos dividindo o ataque
3 = Outros dividindo o ataque
4 = Todos sem dividir o ataque
5 = Outros sem dividir o ataque
6 = Qualquer um; não é ataque
7 = O personagem; não é ataque
8 = Ataque automático
9 = Nenhum (não ataca)

const a_batalha = 0
Condição:
0 = Nenhuma
1 = Durante a batalha
2 = Fora da batalha

const tipoatk = 0
Elemento usado no ataque, como contusão, cortante, fogo, etc. Os elementos
estão definidos na constante config:atknomes, arquivo mud-config.int.
Nota: é muito mais fácil alterar essa constante pela edição online.

const ataque = 50
Força de ataque, em porcentagem (100 significa 100%).

const vel = 50
Velocidade do golpe, em porcentagem (100 significa 100%).

const tipobonus = ""
Raças e classes de personagens que possuem um bônus (atacam com mais força).
É um texto sendo que cada linha é uma raça ou classe.
Exemplo:
const tipobonus = "anão\nguerreiro"

const msgextra = ""
Informações extras, mostradas quando o jogador consulta sobre a hab/magia.

const msgatk0 = ""
Variáveis msgatk0 a msgatk4. Contém várias linhas de texto, sendo que cada
linha é uma mensagem de batalha.
Ao usar a habilidade ou magia:
Linha 0 = para o personagem
Linha 1 = para o alvo; se vazio assume linha 0
Linha 2 = para os outros; se vazio assume linha 0
Quando acertou o golpe em si mesmo:
Linha 3 = para o personagem
Linha 4 = para os outros; se vazio assume linha 3
Quando acertou outro personagem:
Linha 5 = para o personagem
Linha 6 = para o alvo; se vazio assume linha 5
Linha 7 = para os outros; se vazio assume linha 5
Quando matou o alvo:
Linha 8 = para o personagem
Linha 9 = para o alvo; se vazio assume linha 8
Linha 10 = para os outros; se vazio assume linha 8
Quando errou o alvo:
Linha 11 = para o personagem
Linha 12 = para o alvo; se vazio assume linha 11
Linha 13 = para os outros; se vazio assume linha 11
Quando o golpe não teve efeito:
Linha 14 = para o personagem
Linha 15 = para o alvo; se vazio assume linha 14
Linha 16 = para os outros; se vazio assume linha 14

func habajuda
arg0 = objeto do personagem, ou nulo se está pedindo informações sobre a aula
Retorna um texto que contém informações, para os comandos hab, magia e
quando o jogador pede informações sobre uma aula.

func escr( personagem, o que escreveu, item, nível )
É chamado quando o jogador digita o comando para usar a hab/magia.
Essa função basicamente obtém o alvo e chama a função exechab.
O argumento é o item que disparou a hab/magia (uma comida, bebida
ou pergaminho), ou nulo se não usou nenhum.
O argumento nível é o nível da hab/magia, quando o item não for nulo.

func exechabperso( personagem, alvo )
Personagem usa uma habilidade ou magia. É uma versão simplificada de exechab.

func exechab( personagem, alvo, quanto sabe, nível, item usado )
Chamado quando personagem usa habilidade ou magia.
O argumento quanto sabe é um número de 0 a 1 que indica quanto sabe da
habilidade ou magia (0=iniciante até 1=perito).
O argumento nível geralmente é o nível do personagem.
O argumento item é o item que disparou a hab/magia (uma comida, bebida
ou pergaminho), ou nulo se não usou nenhum.

func efeitohab( personagem, alvo, quanto sabe, nível )
Aplica o efeito da habilidade ou magia sobre o alvo.
Os argumento quanto sabe, e nível, vide função exechab, acima.

func velgolpe( personagem, alvo )
Acerta o tempo de espera conforme o golpe.
Se baseia na constante vel da hag/magia, que é a velocidade do golpe.

func execgolpe( personagem, alvo, força do ataque )
Realiza um ataque e coloca resultado em result e mudavida.
Na força do ataque deve estar incluído o quanto sabe do golpe.
Se for 0, não calcula os danos.
Se baseia em tipoatk (tipo de ataque) e arma1 (arma usada)

func mensgolpe( personagem, alvo )
Envia mensagens de alvo principal de acordo com o resultado do ataque.
Faz result=10 se o alvo morreu, mas não chama a função morreu.

func mensgolpe2( personagem, alvo )
Envia mensagens de alvo secundário (não envia todas as mensagens)
de acordo com o resultado do ataque.
Faz result=10 se o alvo morreu, mas não chama a função morreu.


17. Efeitos (mud-efeito.int e mud-b-efeito.int)

const e_nome = ""
Nome que aparece no comando efeitos.

const desc = ""
Uma breve descrição do que faz; aparece no comando lef.

const maximo = 1
Quantos efeitos desse tipo um personagem pode ter.

const e_condicao = 1
Em que condições o efeito existe:
0 Nenhuma; permanente
1 Tem pontos de vida
2 Durante a batalha e tem pontos de vida
3 Fora da batalha e tem pontos de vida

const tempo1 = 0
Duração do efeito, em décimos de segundo.

const tempo2 = 0
Duração por nível: em quantos décimos de segundo o nível do personagem
aumenta a duração do efeito.

func recalc_auto
Atributos: função criada automaticamente pelo menu de edição do efeito.
Não deve ser editada por outros meios.

const r_tempo = 0
De quantos em quantos décimos de segundo reduz algo.

const r_vida = 0
Quantos pontos de vida reduz de tempos em tempos.

const r_mana = 0
Quantos pontos de mana reduz de tempos em tempos.

const r_move = 0
Quantos pontos de vigor reduz de tempos em tempos.

const evperso = 0
Se deve receber eventos do dono se o dono for personagem (0=não, 1=sim).

Mensagens ao criar o efeito:
const msgini1       Para o personagem
const msgini2       Para os demais

Mensagens quando o efeito falhou:
const msgfalhou1    Para o personagem
const msgfalhou2    Para os demais

Mensagens quando não teve efeito (o alvo é imune):
const msgnulo1      Para o personagem
const msgnulo2      Para os demais

Mensagens ao apagar o efeito:
const msgfim1       Para o personagem
const msgfim2       Para os demais

Mensagens quando ocorre o evento que reduz algo do personagem:
const msgreduz1     Para o personagem
const msgreduz2     Para os demais

func cmd_ini( personagem )
Função executada quando o efeito é criado.

func cmd_fim( personagem )
Função executada quando o efeito é apagado.

func cmd_reduz( personagem )
Função executada de tempos em tempos quando reduz algo.
Vide também constante r_tempo.

func tempoini
Começa a executar as funções cujo nome é "cmd_tempo" seguido do tempo
decorrido, em décimos de segundo. Exemplo, cmd_tempo10 é executado
10 segundos após a função tempoini ser chamada.
Cada vez que essa função é chamada, a contagem de tempo é reiniciada.


18. Comandos

São classes cujo nome começa com um dos seguintes textos:
cmd_  para comandos normais
cmdfim_ para comandos de baixa prioridade
magia_  para magias (só podem ser lançadas com o comando Lançar)
adm_ para comandos de administração (não existem para não administradores)
Em seguida vem o nome do comando.

Exemplos:
cmd_config  trata do comando Config
cmdfim_chat  trata do comando Chat

Quando o jogador digita algo, primeiro são verificas as classe 'adm_',
caso seja um administrador. Depois, as classes 'magia_' e 'cmd_', e por
último, 'cmdfim_'.

A classe 'comando_comum' é herdada por todos os comandos.
Quando é necessário uma única classe herdada por dois ou mais comandos,
geralmente o nome dessa classe começa com 'comando_'.

Classes de comandos podem ter as seguintes funções e constantes:
const objcmd = este # Objeto que processa o comando, ou nulo se não existe

func escr # Processa o comando
# arg0 = objeto do personagem
# arg1 = texto digitado após o nome do comando

func txtajuda
# arg0 = objeto do personagem
# Deve retornar o texto de ajuda, ou nulo se não houver nenhuma ajuda
# Não depende da constante objcmd

func passo
# Função executada quando a variável passo for o nome da classe
# arg0 = objeto jogsock do jogador (vide arquivo mud-jog.int)
# arg1 = texto digitado
# Deve retornar 1 se processou o que o jogador digitou


19. Criando menus de edição (administração)

Primeiro criar uma classe como a seguinte:

classe menu_config
herda comando_menu

# Título é o nome do menu (aparece antes da lista de opções)
const titulo = "Configuração do MUD"

# Quantos caracteres deve ter o nome de cada opção do menu
# Se tiver menos que isso, são acrescentados espaços
const colunas = 25

# Nome da classe que contém o menu anterior, ou "" se não houver menu anterior
# Quando o usuário escolhe sair do menu (teclando Z), vai para esse menu
const menufim = ""

# Primeira opção do menu:

const nome1 = "Quantidade de animais"
# Nome é o nome da opção

const info1 = "Quantos animais um jogador pode usar em batalha"
# Texto de informações, mostrado quando a opção é escolhida
# Se estiver ausente, não é mostrado nenhum texto

const clas1 = "config"
# Nome da classe

const vari1 = "animal"
# Nome da variável

const tipo1 = "opc_numero--"
# Tipo de dado - nome da classe responsável pelo dado sendo editado:
# "opc_linha" = texto de uma linha (exemplo: título das salas)
# "opc_txtlinha" = uma linha de um texto de várias linhas
# "opc_texto" = texto de uma ou mais linhas (exemplo: descrição das salas)
# "opc_numero" = valor numérico inteiro
# "opc_numreal" = valor numérico que pode ter dígitos após a vírgula
# "opc_opcao" = um valor numérico baseado numa lista de opções
# "opc_txtopcao" = uma lista de opções: texto de várias linhas, sendo que
#                  pode-se mudar uma linha sem mudar as outras
# "opc_vetor" = um valor numérico sendo que cada bit é uma opção de uma lista
# "opc_tipos" = texto contendo uma lista de tipos (raças e classes)
# "opc_tipodep" = texto contendo uma lista de habilidades, magias e/ou idiomas
# "opc_simnao" = uma opção que pode ser apenas 0 (não) ou 1 (sim)
# "opc_sala" = uma sala
# "opc_atribcfg" = alterar atributos base para todos os personagens
# "opc_atribnum" = alterar atributos numéricos de um personagem
# "opc_atribbit" = alterar atributos sim/não de um personagem
# "opc_atribatk" = alterar atributos de ataque de um personagem
# "opc_atribdef" = alterar atributos de defesa de um personagem
# "opc_ajuda" = um texto explicativo, que é mostrado ao usuário
#               nesse caso, só é usada a constante extr (vide abaixo)
# Pode ser também o nome de um submenu
# Se não for possível editar como função, acrescente um sinal de '-' no nome
# Se não for possível apagar, acrescente mais um sinal de '-' no nome

const extr1 = "1 8"
# Opções extras. Os tipos que possuem opções extras são:
# No tipo "opc_txtlinha" é o número da linha (começa no 0)
# No tipo "opc_numero" são os valores mínimo e máximo (nesse caso, vai de 1 a 8)
# No tipo "opc_opcao" é a lista de opções
# No tipo "opc_txtopcao" são a quantidade mínima e a quantidade máxima de linhas
#         e o número da primeira opção que pode ser alterada
# No tipo "opc_ajuda" é o texto que será mostrado ao usuário

const exec1 = "atualiza"
# Se não for nulo, quando o usuário muda a opção, é executada a função
# com esse nome de todos os objetos que foram mudados
# É possível especificar também a classe, da seguinte forma:
# const exec1 = "nomedaclasse:nomedafunção"

const titu1 = "um texto qualquer"
# Título: mensagem que deve ser apresentada antes da opção

# As outras opções seguem o mesmo padrão, apenas mudando o número
# no nome da variável. Exemplo:

const nome2 = "Senha de administração" # Nome da opção
const tipo2 = "opc_linha" # Tipo de variável
const clas2 = "config"
const vari2 = "senhaadm"

const nome3 = "Tipo de ataque"
const tipo3 = "opc_opcao"
const clas3 = "config"
const vari3 = "atktempo"
const extr3 = "manual\nautomático" # 0=manual, 1=automático

Para chamar o menu, basta executar a função m_menu do jogador (classe
jogsock), passando como argumento o nome da classe.
Exemplo: arg0.sock.m_menu("menu_config")

Alguns exemplos de uso dos diversos tipos de dados:

"opc_linha" - usado em títulos de salas, nome do personagem, descrição curta
"opc_texto" - descrição de uma sala, ao olhar para um personagem ou item,
  mensagem de apresentação do mud
"opc_numero" - nível dos personagens e dos itens, tempo de reset de uma área
"opc_numreal" - não foi usado, mas parece lógico existir números que podem
  ter dígitos após a vírgula
"opc_opcao" - tipo de terreno de uma sala, se uma saída não pode ser trancada,
  pode ser trancada ou tranca ao fechar, etc. Qualquer coisa que tenha duas
  opções ou mais, sendo cada uma um número
"opc_simnao" - qualquer coisa que seja 0=não e 1=sim, como permite PNJ,
  sala não permite magia, PNJ é agressivo, PNJ é imortal
"opc_vetor" - em que posições pode vestir um item, quando alguém cria um
  personagem, quais as opções do comando config vêm habilitadas,
  quais tipos de ataque são normais e quais são especiais (exemplo,
  contusão, luta e terra são normais, fogo, água e elétrico são especiais)
"opc_txtlinha" - cada habilidade e cada magia pode ter até 5 mensagens diferentes
  para cada coisa; por exemplo, 5 mensagens diferentes quando matou o alvo.
  Com essa opção são criadas só 5 constantes. Sem, seriam 85, e o código
  das habilidades e magia seria mais complicado
"opc_txtopcao" - tipos de produtos existentes, tipos de ataques (água, fogo,
  etc.), nomes das posições em que pode vestir alguma coisa
"opc_sala" - em que sala os jogadores começam o jogo e para que sala vão
  quando morrem
"opc_atrib*" - um submenu para alterar alguns atributos de itens, personagens
  e classes, como vida por nível, furtividade, ver invisível, porcentagem
  de defesa e de ataque para um elemento (cortante, perfurante, água,
  fogo, terra, etc.)
"opc_tipos" - com que raças e classes um vendedor ou professor não negocia,
  que raças e classes não podem vestir um item
"opc_tipodep" - quais habilidades e magias são necessárias para aprender uma
  determinada habilidade ou magia


20. Funcionamento interno das opções dos menus

Para cada tipo de opção, deve existir uma classe com o mesmo nome,
com duas funções:

func menu
É chamada para mostrar a opção no menu
arg0 = nome da classe (constante clas)
arg1 = nome da variável (constante vari)
arg2 = nomes das opções (constante extr)

func passo
É chamada quando o jogador escolhe a opção do menu
Vide tópico "Comandos"
arg0 = objeto jogsock do jogador (vide arquivo mud-jog.int)
arg1 = texto digitado
Deve retornar 1 se processou o que o jogador digitou

Outras variáveis da função passo:
arg0.var.opcnome = nome da opção (constante nome)
arg0.var.opcclasse = classe da variável (constante clas)
arg0.var.opcvar = nome da variável (constante vari)
arg0.var.opcextra = informações extras (constante extr)
arg0.var.opcpasso = usado para a opção poder voltar ao menu
 Para sair do menu, chamar passosair( personagem ) da classe comando_adm
arg0.var.opcvalido = 1 se a opço pode apagar a variável ou 0 se não pode
arg0.var.opcexec = função executada após alterar as variáveis (constante exec)
 Isso costuma ser feito com a seguinte linha:
 criar("admmudou", arg0.var.opcclasse, arg0.var.opcexec)

Quando a função passo altera o programa, costuma-se salvar o programa e gerar
uma mensagem para os jogadores que estão com o canal admlog habilitado.
São linhas como essas:
config:salvar
admlog(arg0, "mudou " + arg0.var.opcclasse + ":" + arg0.var.opcvar + " " + arg0.var.opcnome)


21. Lista de coisas pendentes

Comando para expulsar todos da casa do jogador
Acrescentar altura/peso/volume mínimo/máximo para jogadores nos tipos (comando etipo)
Opção para os jogadores escolherem altura e peso, ao criar o personagem
   - Volume seria baseado em altura e peso, e o que foi definido na raça
Usar digestão para alguma coisa, exemplo, vomitar em batalha
Tipos de líquidos e containers de líquido
Casa de doações
Comando para jogador informar que está ausente
Leilões
Murais, livros, papéis e caneta/lápis
Lista de novidades do MUD
Veículos fechados
Permitir os jogadores formarem grupos (comandos grupo e gchat)
Reclassear: ao chegar em um determinado nível, poder mudar de classe e talvez de raça
Efeitos de área - afetam uma sala; podem mudar o clima
Poder aprender algo ao subir de nível; para cada linha da lista:
- Nível do personagem
- Aprender ou aperfeiçoar
- Nome da magia/habilidade/idioma
- Nível de aprendizado
Evolução de itens e personagens; para cada linha da lista:
- Nível do item ou personagem
- Evoluir obrigatório ou opcional
- Nome do novo item ou personagem
Acertar itens que produzem luz
(testar) Volume que cabe dentro, ou 0 se não for container
(testar) Ao alterar tipo de container, acertar a variável i_aberto
Volume que cabe dentro em salas
Idiomas
Criar itens genéricos
Sistema de dicas aleatórias
Banco
Montar em animais
Tipo de terreno: em baixo d'água
Propriedade de salas:
* const s_semrastr = 0 # Se o comando de rastrear não passa por essa sala
Propriedades de personagens:
* inttempo tempocair # Quanto tempo leva para cair ou afundar
* const p_ajuda = 0 # Ajuda outros PNJs sendo atacados por jogadores
Propriedade de itens:
* inttempo tempocair # Quanto tempo leva para cair ou afundar
