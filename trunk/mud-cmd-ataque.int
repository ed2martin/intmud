classe comando_ataque
herda comando_comum
const objcmd = arg0.persobat.var.h_[nomehab] ? este
const objajuda = arg0.persobat.var.h_[nomehab] ? este
const posic = 7
const atkcom = 1 # Para indicar que o comando é um ataque editável
const nomehab = "" # Nome do ataque (nome da habilidade)
const tipoatk = 0 # Tipo de golpe
const tipoalvo = 0 # Tipo de alvo: 0=um alvo, 1=todos dividindo a força, 2=todos
const tipoarma = 1 # Requer arma: Nenhuma arma
const precisao = 100 # Precisão do golpe, maior que 100 nunca falha
const ataque = 50 # Força de ataque, 100 significa 100%
const veloc = 50 # Velocidade do golpe, 100 significa 100%
const usavida = 0 # Quanto consome de vida
const usamana = 0 # Quanto consome de mana
const usamove = 0 # Quanto consome de movimento
const msgacertou = "$R ataca $c"
const msgerrou = msgacertou + " mas erra"
const msgnulo = msgacertou + ", nada acontece"
int32 result # Danos de batalha, ou 0=nenhum -1=errou o alvo -2=cancelar ataque
ref arma1 # Arma usada

func txtajuda
  txt100 lin
  lin = "\c2" + txtmaimin(nomehab) + "\b\n"
  lin += "Ataque \"" + txtsublin(misc:atknomes, tipoatk, 1) + "\", força " + ataque + ", \
velocidade " + vel
  ret extra ? lin + "\n" + extra : lin

func escr # Atacar alguém
  ref r
  se !checaatk(arg0)
    ret
  senao arg0.ataqueini
    arg0.msg(arg0.ataqueini)
    ret
  senao arg1
    listaitem i
    nomeobj nome
    nome.ini(arg1, 1)
    epara i = arg0.dono.dentro2.ini, i, i.depois
      sair i.obj.visivel(arg0) && nome.nome(i.obj.nome)
    efim
    r = i.obj
    ret !r, arg0.msg("Você não vê isso.")
    ret r == arg0, arg0.msg("Atacar a si mesmo?")
  senao
    r = arg0.atkenv.objlista
    se !r || r.dono != arg0.dono
      arg0.msg("Atacar quem?")
      ret
    fimse
  fimse
  se !arg0.dono.s_luta
    arg0.msg("Aqui é um lugar pacífico.")
  senao arg0.jog && r.jog && arg0.dono.s_luta < 2
    arg0.msg(r.nome + " é jogador e aqui não é uma arena.")
  senao !r.p_agressivo(arg0)
    arg0.msg(r.nome + " não quer brigar.")
  senao
    ataca(arg0, r)

func checaatk # Checa se personagem (arg0) pode atacar e avisa o personagem
# Retorna verdadeiro se pode atacar
  ref r
  r = arg0.persobat
  se !(r.iempu.0 || r.iempu.1) # Não está usando uma arma
    se !(tipoarma & 1)
      arg0.msg("Não possui a arma necessária.")
      ret
    fimse
  senao r.iempu.0 && tipoarma & 1 << r.iempu.0.obj.armatipo
  senao r.iempu.1 && tipoarma & 1 << r.iempu.1.obj.armatipo
  senao tipoarma == 1
    arg0.msg("Empunhando uma arma?")
    ret
  senao
    arg0.msg("Arma incorreta.")
    ret
  fimse
  se r.pvida <= usavida
    arg0.msg("Pontos de vida insuficientes")
    ret
  senao r.pmana < usamana
    arg0.msg("Mana insuficiente")
    ret
  senao r.pmove < usamove
    arg0.msg("Vigor insuficiente")
    ret
  fimse
  ret 1

func ataca # Chamado quando personagem (arg0) quer atacar alguém (arg1)
  ref r
  r = arg0.persobat
# Obtém a arma usada
  arma1 = ref(r.iempu.0.obj)
  se !arma1 || !(tipoarma & 1 << arma1.armatipo)
    arma1 = ref(r.iempu.1.obj)
  fimse
# Eventos
  listaobj l
  epara l.addfim(arg0.evento, arg1.evento), l, l.ini.remove
    ret l.objini.cmd_atacar(arg0, arg1, este), nulo
  efim
# Custo do ataque
  r.pvida -= usavida, r.pmana -= usamana, r.pmove -= usamove
# Obtém a força do ataque e os alvos secundários
  real atk
  atktipo && l.addfim(arg0.dono.dentro1) + l.remove(arg0, arg1)
  atk = atktipo == 1 ? ataque / l.total : ataque
  se arma1
    real carga
    carga = (arg0.pesoden - arg0.pesovest + arma1.pesoobj * 4) / (arg0.pesomax + 1)
    se carga > 1.2 # Muito pesado
      atk /= carga < 1.4 ? 10 : 100
      arg0.msg("É muito peso!")
    senao carga > 1 # Um pouco pesado
      atk *= 5 - 4 * carga # se carga=1,atk*=1  se carga=1.2,atk*=0.2
      arg0.msg("Bastante peso!")
    fimse
  fimse
# Ataca o alvo escolhido
  velgolpe(arg0, arg1) # Tempo do golpe
  execgolpe(arg0, arg1, atk) # Ataca
  result != -2 && $mens.p(arg0, arg1) + $mens.mtodos1(mensgolpe)
  arg1.persobat.acertapos(1)
# Ataca os alvos secundários
  enquanto l
    r = l.objini, l.ini.remove
    continuar r.jog || r.perso < 3 # Não prossegue se for jogador
    velgolpe(arg0, r) # Tempo do golpe
    execgolpe(arg0, r, atk) # Ataca
    result != -2 && $mens.p(arg0, r) + r.msginv(mensgolpe)
    r.acertapos(1)
  efim
  arg0.persobat.acertapos(1)

func velgolpe # Acerta o tempo de espera conforme o golpe
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# vel = velocidade do golpe
  real tempo
# Se velocidades dos personagens iguais e velocidade do golpe=100: tempo=30
# Fórmula 1
# tempo = arg0.persobat.pveloc + arg1.persobat.pveloc # Tempo total
# tempo = tempo * 1500 / (arg0.persobat.pveloc * veloc + 1)
# Fórmula 2
  tempo = arg1.persobat.pveloc * 3000 / (arg0.persobat.pveloc * veloc + 1)
# Acerta o tempo
  tempo < 8 && (tempo = 8)
  tempo > 70 && (tempo = 70)
  arg0.p_espera < tempo && (arg0.p_espera = tempo)

func execgolpe # Realiza um ataque e coloca resultado em result
# arg0 = personagem que está atacando
# arg1 = personagem alvo
# arg2 = força do ataque, 0=não calcular danos
# tipoatk = tipo de ataque, arma1 = arma usada
  real dano
  ref r # Personagem que ataca
  ref s # Personagem que recebe o ataque
# Checa se pode realmente atacar
  r = arg0.persobat, s = arg1.persobat, result = -2
  listaobj l
  epara l.addfim(r.evento), l, l.ini.remove
    ret l.objini.cmd_atkenv(arg0, arg1, este), nulo
  efim
  epara l.addfim(s.evento), l, l.ini.remove
    ret l.objini.cmd_atkrec(arg0, arg1, este), nulo
  efim
# Indica que atacou, recebe experiência se vencer
  arg0.batalhaini(arg1)
  r.podepegar && exgolpe_i(arg1.var.a_[r.nome]) # Coloca na agenda
# Checa se acertou o alvo
  result = -1
  se precisao <= 100
    dano = rand(1, 20)
    se dano == 20 || arg1.posicao == 4 # Acertou automaticamente
    senao dano == 1 # Errou o alvo automaticamente
      ret
    senao # Checa se acertou
      dano += precisao * r.precisao / 100 - s.evasao
      arma1 && (dano *= arma1.armaprecisao / 100) # Precisão da arma
      !s.visivel(r) && (dano -= 5) # Invisível é mais difícil de acertar
      ret dano <= 0, nulo
    fimse
  fimse
# Checa bônus do tipo de defesa
  dano = s.deftipo.[tipoatk]
  se dano >= 80 # Defesa muito alta
    result = 0
    ret
  fimse
  dano = matexp(dano * 0.34657359) # matexp(dano * matlog(2) / 2)
# Calcula dano com arma
  se arma1
    dano *= rand(arma1.armamin, arma1.armamax) * arg2
    dano *= rand(arma1.armamin, arma1.armamax) + 25
    se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
      dano /= s.defmag * 300
    senao
      dano /= s.defnorm * 300
    fimse
# Calcula dano sem arma; valor do rand é por volta de 300
  senao
    se misc:atkesp(tipoatk) # Checa se golpe normal ou especial
      dano *= r.atkmag * (r.atkmag + 25) * arg2 / (s.defmag * rand(280, 340))
    senao
      dano *= r.atknorm * (r.atknorm + 25) * arg2 / (s.defnorm * rand(280, 340))
    fimse
    dano = intpos(dano + r.pnivel - s.pnivel) # Adiciona diferença de níveis
  fimse
# Modificadores de posição
  casovar s.posicao
  casose "0" # Morto
  casose "1" # Mortalmente ferido
  casose "2" # Incapacitado
    dano *= 2.666
    sair
  casose "3" # Muito fraco
    dano *= 2.333
    sair
  casose "4" # dormindo
    dano *= 2
    sair
  casose "5" # descansando
    dano *= 1.666
    sair
  casose "6" # sentado
    dano *= 1.333
    sair
  casofim
# Atualiza pontos de vida conforme os danos (pelo menos 1 de dano)
  result = dano < 1 ? 1 : dano
  arg2 && (s.pvida -= result)

func exgolpe_i # Chamado internamente por execgolpe para adicionar na agenda
  !arg0 && (arg0 = 1)

func mensgolpe # Retorna mensagem do golpe de acordo com result
  casovar result
  casose "-1" # Errou o alvo
    ret msgerrou
  casose "0" # O golpe não teve efeito
    ret msgnulo
  casose # Acertou o alvo
    ret msgacertou + ", " + -result
  casose "-2" # Ataque foi cancelado
  casofim


classe comando_atkauto
herda comando_ataque
# Para realizar ataques automáticos
const objcmd = nulo
const objajuda = nulo
const nomehab = "Ataque automático"
const msgacertou = "$R dá um golpe em $c"
const msgerrou = "$R tenta dar um golpe em $c mas erra"
const msgnulo = "R$ dá um golpe em $c mas nada acontece"
const tipoatk = 0 # Normal
const ataque = 20
const vel = 50
const extra = "Ataque automático"

func ataca # arg0 ataca arg1
  arma1 = ref(arg0.persobat.iempu.0.obj)
  execgolpe(arg0, arg1, ataque) # Ataca
  result != -2 && $mens.p(arg0, arg1) + $mens.mtodos1(mensgolpe)
  arg1.acertapos(1), arg0.acertapos(1)


classe cmd_resgatar
herda comando_comum, comando_ajuda
const posic = 5
const txtajuda = "\b\c3Resgatar\b\n\
Sintaxe: RESGATAR <personagem>\n\
Resgata um jogador em uma batalha. É como se você se colocasse entre\n\
o jogador e quem está atacando ele."

func escr
  ret arg0.dono.s_naoresg, arg0.msg("Aqui não é possível resgatar.")
  ret !arg1, arg0.msg("Resgatar quem?")
  nomeobj n
  listaitem i
  n.ini(arg1, 1)
  epara i = arg0.dono.dentro2.ini, i, i.depois
    continuar !i.obj.visivel(arg0) || !n.nome(i.obj.ident)
    ref r
    r = i.obj
# Checa se é possível resgatar
    ret arg0 == r, arg0.msg("Resgatar você mesmo?")
    ret !r.jog, arg0.msg(i.obj.nome + " não é jogador.")
    ret !r.atkrec.objini, arg0.msg(i.obj.nome + " não está lutando.")
    ret r.atkenv.objlista == arg0, arg0.msg(i.obj.nome + " está lutando com você.")
# Checa se personagens permitem resgate
    epara i = r.atkrec.ini, i, i.depois
      ret i.obj.p_naoresg, arg0.msg("Não é possível resgatar " + r.nome + " de " + i.obj.nome + \
".")
    efim
# Eventos
    listaobj l
    epara l.addfim(arg0.evento, r.evento), l, l.ini.remove
      ret l.objini.cmd_resgatar(arg0, r), nulo
    efim
# Resgata
    enquanto r.atkrec.objini
      r.atkrec.objini.batalhaini(arg0)
    efim
    $mens.p(arg0, r)
    $mens.mvis1("$P resgata $a.")
    ret
  efim
  arg0.msg("Você não vê " + arg1 + ".")


classe cmd_socar
herda comando_ataque
const nomehab = "Socar"
const msgacertou = "$R soca $c"
const tipoatk = 0 # Normal
const ataque = 40
const vel = 80
const extra = "Golpe físico de força"


classe cmd_chutar
herda comando_ataque
const nomehab = "Chutar"
const msgacertou = "$R chuta $c"
const tipoatk = 0 # Normal
const ataque = 70
const vel = 50
const extra = "Golpe físico de força"


classe cmd_arremessar
herda comando_ataque
const nomehab = "Arremessar"
const msgacertou = "$R se joga contra $c"
const tipoatk = 0 # Normal
const ataque = 80
const vel = 30
const extra = "Golpe físico de força"


classe cmd_morder
herda comando_ataque
const nomehab = "Morder"
const msgacertou = "$R morde $c"
const tipoatk = 0 # Normal
const ataque = 50
const vel = 60
const extra = "Golpe físico de força"


classe cmd_cortar
herda comando_ataque
const nomehab = "Cortar"
const tipoatk = 2 # Tipo de ataque: 2 Cortante
const tipoarma = 2 # Requer arma: Lâmina curta
const usamove = 5
const msgacertou = "$R corta $c"
const msgerrou = "$R tenta cortar $c"
