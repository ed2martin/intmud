classe comando_comum
const posic = 8 # Posição mínima para usar o comando
const objcmd = este # Objeto que processa o comando, ou nulo se não existe
# const ultimo = 1 # Deve estar definido se comando tem baixa prioridade

func escr # Processa o comando
# arg0 = objeto do personagem
# arg1 = texto digitado após o nome do comando

func iniclasse
  criar(arg0)


classe cmd_quem
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Quem\b\n\
Sintaxe: QUEM\n\
Mostra quem está conectado no MUD e jogando."
const posic = 0

func escr
  textotxt t0
  txt100 t1
# Lista de personagens dos jogadores
  indiceitem item
  epara item.ini("pn "), txt1(item.txt) == "pn", item.depois
    continuar item.obj.jogconfig.17 && !arg0.jogconfig.17
    t1 = txt(999000 - item.obj.pnivel) + " N"
    t1 += txt(txt(item.obj.pnivel) + "      ", 0, 6) + item.obj.nome
    item.obj.sock == nulo && (t1 += "  [Desconectado]")
    item.obj.jogconfig.17 && (t1 += "  [Invis]")
    arg0.jogconfig.20 && (t1 += "  " + txt(item.obj.dono, 2))
    t0.addfim(t1)
  efim
# Lista de jogadores sem personagem
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    continuar item.obj.perso.jog # Continuar se personagem é jogador
    continuar item.obj.jogconfig.17 && !arg0.jogconfig.17
    t1 = "999001 NX     " + item.obj.nome
    item.obj.jogconfig.17 && (t1 += "  [Invis]")
    t0.addfim(t1)
  efim
# Ordena e mostra para o jogador
  t0.ordena
  textopos pos
  epara pos = t0.ini, pos, pos.depois
    pos.mudar("", 0, 7)
  efim
  arg0.msg2("Personagens online: " + t0.linhas + "\n" + t0.remove(1000))


classe cmd_fim
herda comando_comum
const posic = 0

func escr
  se arg0.atkenv && arg0.senha
    arg0.msg("Você está ocupad" + misc:sletra[arg0.sexo] + " demais para isso.")
  senao
    arg0.msg("Até mais. Aguardamos o seu retorno.")
    apagar(arg0)


classe cmd_quit
herda cmd_fim


classe comando_var
herda comando_comum

func lista # Lista de itens, como habilidades, idiomas, etc.
# arg0 = personagem
# arg1 = variável textovar
# arg2 = prefixo que identifica o tipo de variável (duas letras)
# arg3 = mensagem se nada for encontrado
# arg4 = mensagem se alguma coisa for encontrada
  textotxt h
  txt100 t1
  txt100 t2
  t1 = arg1.ini(arg2)
  enquanto txt(t1, 0, 2) == arg2
    t2 = txttroca(txt(t1, 2), "_", " ")
    se arg1.valor(t1) == "1"
      h.addfim(t2)
    senao
      h.addfim(arg1.valor(t1) + "x " + t2)
    fimse
    t1 = arg1.depois(t1)
  efim
  se h.linhas
    h.addfim(txttroca(h.remove(1000), "\n", ", "))
    h.addini(arg4)
    arg0.msg(h.remove(1000))
  senao
    arg0.msg(arg3)
  fimse
  ret 1


classe cmd_hab
herda comando_var, comando_ajuda
const txtajuda = "\b\c3Hab\b\n\
Sintaxe: HAB\n\
Mostra as habilidades do seu personagem. Muitas delas são usadas em lutas."

func escr
  txt100 n
  arg0.persoesc != arg0 && (n = " de " + arg0.persoesc.nome)
  lista(arg0, arg0.persoesc.var, "h_", "Nenhuma habilidade" + n, "Habilidades" + n)


classe cmd_idioma
herda comando_var, comando_ajuda
const txtajuda = "\b\c3Idioma\b\n\
Sintaxe: IDIOMA\n\
Mostra os idiomas que o seu personagem conhece."

func escr
  lista(arg0, arg0.var, "i_", "Nenhum idioma", "Idiomas")


classe cmd_extra
herda comando_var, comando_ajuda
const txtajuda = "\b\c3Extra\b\n\
Sintaxe: EXTRA\n\
Mostra os itens extras que o seu personagem possui. Geralmente são itens\n\
permanentes (não se pode pode-se pegar, soltar, dar e vestir)."

func escr
  se !exevento(este, arg0, arg1)
    lista(arg0, arg0.var, "o_", "Nenhum item extra", "Itens extra")


classe cmd_inv
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Inv\b\n\
Sintaxe: INV\n\
Mostra os itens que o seu personagem está carregando."
const posic = 5

func escr
  textotxt t
  listaitem item
  epara item = arg0.dentro1.ini, item, item.depois
    arg0.visivel(item.obj) && t.addfim(txt(item.obj.objtot) + " " + item.obj.nome)
  efim
  t.juntalin("(", "x)")
  se t
    arg0.msg2("Você carrega:\n" + t.remove(1000))
  senao
    arg0.msg("Você não está carregando nada.")
  fimse


classe cmd_equip
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Equip\b\n\
Sintaxe: EQUIP\n\
Mostra os itens que o seu personagem está vestindo ou usando."
const posic = 5

func escr
  textotxt t
  listaitem item
  epara item = arg0.dentro2.ini, item, item.depois
    continuar !item.obj.vestpos || !arg0.visivel(item.obj)
    t.addfim("(" + misc:equip(item.obj.vestpos) + ") " + item.obj.nome)
  efim
  se t.linhas
    arg0.msg2("Equipado com:\n" + t.remove(1000))
  senao
    arg0.msg("Não está vestindo/usando nada.")
  fimse


classe cmd_vida
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Vida\b\n\
Sintaxe: VIDA\n\
Mostra os pontos de vida, mana, vigor, nível e experiência do seu personagem."
const posic = 0

func escr
  txt100 lin
  lin = "Vida " + arg0.pvida + "/" + arg0.pvidamax
  lin += "  Mana " + arg0.pmana + "/" + arg0.pmanamax
  lin += "  Vigor " + arg0.pmove + "/" + arg0.pmovemax
  lin += "  Nível " + arg0.pnivel
  lin += "  Experiência " + arg0.expatual + "/" + arg0.expmax
  arg0.msg(lin)


classe cmd_hora
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Hora\b\n\
Sintaxe: HORA\n\
Mostra a hora atual, no calendário do MUD e no servidor."
const posic = 0

func escr
  txt100 t1
  datahora d
  d.agora
  arg0.msg("Hora atual MUD:      " + misc:hora + ":" + misc:min)
  arg0.msg("Hora atual servidor: " + d.hora + ":" + d.min)
  t1 = "Tempo total de jogo: "
  arg0.tempojogo2 == 1 && (t1 += "1 dia ")
  arg0.tempojogo2 > 1 && (t1 += txt(arg0.tempojogo2) + " dias ")
  t1 += intdiv((864000 - arg0.tempojogo1) / 36000)
  t1 += ":"
  t1 += intdiv((864000 - arg0.tempojogo1) / 600) % 60
  arg0.msg(t1 + " min")


classe cmd_config
herda comando_comum, comando_ajuda
const posic = 0
const txtajuda = arg0.sock.admin ? txtajuda1 + txtajuda2 : txtajuda1
const txtajuda1 = "\b\c3Config\b\n\
Sintaxe: config +<opção>\n\
         config -<opção>\n\
Altera algumas preferências do seu personagem. Um sinal de + ou de -\n\
seguido de uma opção ativa ou desativa a opção. Para saber as atuais\n\
preferências, tecle apenas CONFIG, sem parâmetros.\n\n\
As opções são:\n\
  \c2DESC\b     Mostra descrições completas (como ao digitar VER)\n\
  \c2SAIDAS\b   Mostra as saídas visíveis após a descrição da sala\n\
  \c2CORES\b    Recebe sequência de cores no padrão ANSI (somente Telnet)\n\
  \c2ACENTO\b   Recebe letras com acentuação (codificação ISO8859-1)\n\
  \c2CHAT\b     Participa do canal de comunicação CHAT"
const txtajuda2 = "\n\
  \c2SALA\b     Mostra o nome da sala cadastrada antes do título\n\
  \c2QUEM\b     Ocultar a presença no comando quem\n\
  \c2ONDE\b     O comando QUEM mostra onde cada jogador está no MUD\n\
  \c2INVIS\b    Invisível a não administradores\n\
  \c2AC\b       Participa do canal de comunicação AC (administração)"
# As próximas constantes são as opções do comando CONFIG
# Cada constante contém o índice da variável de jogconfig
# As variáveis "opc_" contém o int1 de jogconfig que correspondente à opção
# Números de 0 a 15 são as opções disponíveis a todos
# Números de 16 a 23 são as opções disponíveis aos administradores
const opc_desc = 0
const opc_saidas = 1
const opc_cores = 2
const opc_acento = 3
const opc_chat = 4
const opc_sala = 16
const opc_quem = 17
const opc_invis = 18
const opc_ac = 19
const opc_onde = 20

func escr
  prog p
  txt512 x
  txt512 y
  int1 opc.32
  opc.bits = arg0.jogconfig.bits
  se !arg1
    epara p.inifunc(este, "opc_"), p.lin, p.depois
      se opc.[[p.texto]]
        x += " +" + txtmai(txt(p.texto, 4))
      senao [p.texto] < 16 || arg0.sock.admin
        y += " -" + txtmai(txt(p.texto, 4))
      fimse
    efim
    arg0.msg("CONFIG" + x + y)
    ret
  fimse
  x = txttroca(arg1, "+", " +")
  x = txttroca(x, "-", " -")
  x = txtremove(x, "EMD")
  txt512 mudou
  enquanto x
    epara p.inifunc(este, "opc_" + txt(txt1(x), 1)), p.lin, p.depois
      sair [p.texto] < 16 || arg0.sock.admin
    efim
    se !p.lin
      y += " " + txt1(x)
    senao txt(x, 0, 1) == "+"
      opc.[[p.texto]] = 1
      mudou += " +" + txtmai(txt(p.texto, 4))
    senao txt(x, 0, 1) == "-"
      opc.[[p.texto]] = 0
      mudou += " -" + txtmai(txt(p.texto, 4))
    senao
      y += " " + txt1(x)
    fimse
    x = txt2(x)
  efim
  ret y, arg0.msg("Opção inexistente:" + y)
  arg0.jogconfig.bits = opc.bits
  arg0.sock.jogconfig.bits = opc.bits
  arg0.msg("Configuração alterada:" + mudou)


classe cmd_ver
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Ver\b\n\
Sintaxe: VER\n\
         VER <personagem ou objeto>\n\
Mostra a descrição completa do lugar aonde você está ou informações\n\
sobre um personagem ou um objeto."
const posic = 5

func escr
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_ver(arg0, arg1), nulo
  efim
  se !arg1
    se arg0.jogconfig.16
      arg0.msg2(txt(arg0.dono, 2) + "  " + arg0.dono.descsala(arg0, 7))
    senao
      arg0.msg2(arg0.dono.descsala(arg0, 7))
    fimse
    ret
  fimse
  ret arg0.dono.ver_[arg1](arg0), nulo
  nomeobj n
  l.addfim(arg0.dono.dentro1, arg0.dono.dentro2, arg0.dentro1)
  n.ini(arg1, 1)
  epara nulo, l, l.ini.remove
    se arg0.visivel(l.objini) && n.nome(l.objini.ident)
      ret arg0 == l.objini, arg0.msg("Olhar para você mesmo?")
      se l.objini.perso
        $mens.p(arg0, l.objini)
        $mens.msgvis2("", "$P olha para $a.")
      fimse
      textotxt t
      listaitem item
      epara item = l.objini.dentro2.ini, item, item.depois
        continuar !item.obj.vestpos || !arg0.visivel(item.obj)
        t.addfim("(" + misc:equip(item.obj.vestpos) + ") " + item.obj.nome)
      efim
      t.linhas && t.addini("Equipado com:")
      t.addini(l.objini.descver)
      se l.objini.jog
        t.addini(txtmaimin(l.objini.nome) + ", jogador nível " + l.objini.pnivel + ".")
      senao txt(l.objini.pnivel)
        t.addini(txtmaimin(l.objini.nome) + ", nível " + l.objini.pnivel + ".")
      senao
        t.addini(txtmaimin(l.objini.nome) + ".")
      fimse
      arg0.msg2(t.remove(1000))
      ret
    fimse
  efim
  arg0.msg("Você não vê isso.")


classe cmd_falar
herda comando_comum, comando_ajuda
const posic = 5
const txtajuda = "\b\c3Falar\b\n\
Sintaxe: FALAR <mensagem>\n\
Envia mensagem para todos os personagens que estiverem na mesma sala.\n\
A mensagem pode aparecer diferente se for iniciada com reticências ou\n\
terminada com reticências, interrogação ou exclamação."

func escr
  $mens.p(arg0)
  se !arg1
    arg0.msg("Tecle a mensagem após FALAR.")
    ret
  senao txt(arg1, 0, 3) == "..."
    $mens.mtodos1("$P continuou: " + txttroca(arg1, "$", "$$"))
  senao txtfim(arg1, 1) == "?"
    $mens.mtodos1("$P perguntou: " + txttroca(arg1, "$", "$$"))
  senao txtfim(arg1, 1) == "!"
    $mens.mtodos1("$P exclamou: " + txttroca(arg1, "$", "$$"))
  senao txtfim(arg1, 3) == "..."
    $mens.mtodos1("$P ponderou: " + txttroca(arg1, "$", "$$"))
  senao
    $mens.mtodos1("$P disse: " + txttroca(arg1, "$", "$$"))
  fimse
# Executa eventos
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_falou(arg0, arg1)
  efim


classe cmd_chat
herda comando_comum, comando_ajuda
const posic = 0
const ultimo = 1 # Tem baixa prioridade
const txtajuda = "\b\c3Canal chat\b\n\
Sintaxe: CHAT <mensagem>\n\
Envia mensagem para os jogadores que estiverem com o canal CHAT habilitado.\n\
Para habilitar ou desabilitar esse canal, use o comando CONFIG."

func escr
  $mens.p(arg0)
  se !arg0.jogconfig.4
    arg0.msg("Canal CHAT está desabilitado.")
  senao !arg1
    arg0.msg("Tecle a mensagem após CHAT.")
  senao
    indiceitem item
    epara item.ini("un "), txt1(item.txt) == "un", item.depois
      item.obj.jogconfig.4 && item.obj.msg("(chat) " + arg0.sock.nome + ": " + arg1)
    efim


classe cmd_debug
herda comando_comum
const posic = 0

func escr
  arg0.msg("Sala: " + arg0.dono)
  listaobj l0
  l0.addfim(arg0.dono.dentro1, arg0.dono.dentro2)
  l0.remove(arg0)
  enquanto l0
    arg0.msg(" usr: " + l0.objini + "/" + l0.objini.jog)
    l0.ini.remove
  efim
  arg0.msg("ver=" + arg0.bitver + " inv=" + arg0.bitinv)
  arg0.msg("visível? " + !(~bitver & bitinv))
  arg0.msg("JOGADORES:")
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    arg0.msg("> " + item.obj.nome + " (" + item.obj.perso.nome + ")")
  efim
  listar("jogolocal", arg0)
  listar("jogoserv", arg0)
  listar("jogobot_usr", arg0)
  arg0.msg("PERSONAGENS:")
  epara item.ini("pn "), txt1(item.txt) == "pn", item.depois
    arg0.msg("> " + item.obj.nome + " (" + item.obj.sock.nome + ")")
  efim
