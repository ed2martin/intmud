classe jog_admtipo
# Tipos de personagens (incluindo raça e classe)
#
const adm_tipo = "\b\c3Comandos para tipos de personagens (raças e classes)\b\n\
\c2LTIPO\b [nome]\n\
  Lista tipos de personagens que começam com o nome especificado.\n\
\c2CTIPO\b <nome>\n\
  Cria um tipo de personagem. Nome deve ser o nome do tipo, e deve ser\n\
  composto de letras, mas pode ter espaços no meio.\n\
\c2ETIPO\b <nome>\n\
  Edita um tipo de personagem.\n\
\c2ATIPO\b <nome>\n\
  Apaga um tipo de personagem."

func cmd_ltipo # Listar tipos
  prog p
  textotxt t
  txt100 lin
  se !p.iniclasse("tipo_" + arg0)
    msg("\bNenhum tipo encontrado.")
    ret 1
  fimse
  t.addfim("raça\nclasse")
  epara nulo, p.lin && t.linhas < 499, p.depois
    lin = txts([p.texto]:menu)
    lin = (lin ? lin + " " : "{{{{{{{ ") + txt(p.texto, 5) + ", " + [p.texto]:nome
    t.addfim(lin)
  efim
  t.ordena
# t.addini("\bTipo de personagem, Menu, Texto do menu")
  txt100 lin
  txtmais.limpar
  textopos pos
  epara pos = t.ini, pos, pos.depois
    se lin != txt1(pos.texto)
      lin = txt1(pos.texto)
      txtmais.addfim(lin == "{{{{{{{" ? "Não pertencem a menus:" : "Menu " + lin + ":")
    fimse
    txt2(pos.texto) && txtmais.addfim("  " + txt2(pos.texto))
  efim
  txtmostra
  ret 1

func cmd_ctipo # Criar tipo
  prog p
  txt80 nome
  uint16 num
# Checa se digitou nome do ataque
  se arg0 == ""
    msg("Tecle o nome do ataque após CTIPO")
    ret 1
  fimse
# Checa se nome válido
  nome = txte(txtremove(arg0, EMDSA))
  se txtsepara(nome, "O+DOL,DOL+O") != nome
    msg("Nome inválido para tipo de personagem: " + nome)
    ret 1
  senao p.existe("tipo_" + nome)
    msg("Já existe o tipo: " + nome)
    ret 1
  fimse
# Cria tipo
  txt200 lin
  lin = "tipo_" + txts(nome) + "\nb-config\nherda comum_tipo"
  lin += "\nconst nome = \"" + txtcopiamai(txte(nome), "A") + "\""
  p.criar(lin)
  config:salvar
  msg("\bTipo criado: " + nome)
  admlog("criou tipo " + nome)
  ret 1

func cmd_atipo # Apagar tipo
  prog p
  se arg0 == ""
    msg("Tecle um nome após LTIPO")
  senao !p.existe("tipo_" + arg0)
    msg("Tipo não existe: " + arg0)
  senao
    tpasso = arg0, p_atipo
  efim
  ret 1

func p_atipo # Confirmar que quer apagar tipo
  passo = ""
  se arg0 == "n"
    msg("Cancelado")
  senao arg0 == "s"
    prog p
    p.apagar("tipo_" + tpasso)
    config:salvar
    msg("Tipo apagado: " + tpasso)
    admlog("apagou tipo " + tpasso)
  senao
    passo = "atipo"
    msg("Apagar tipo " + tpasso + "? Tecle S ou N")
  fimse
  ret 1

func cmd_etipo # Editar tipo
  prog p
  se arg0 == ""
    msg("Tecle o nome do tipo após ETIPO")
  senao !p.existe("tipo_" + arg0)
    msg("Tipo não existe: " + arg0)
  senao
    var.classe1 = "tipo_" + txts(txtmin(arg0))
    m_menu("adm_tipo")
  fimse
  ret 1


classe adm_tipo
const titulo = "Tipo " + txt(var.classe1, 5)
#
const nome1 = "Texto do menu"
const tipo1 = "linha"
const classe1 = var.classe1
const var1 = "nome"
#
const nome2 = "Descrição"
const info2 = "Aparece quando o jogador escolhe raça ou classe"
const tipo2 = "texto"
const classe2 = var.classe1
const var2 = "desc"
#
const nome3 = "É uma opção de"
const info3 = "As palavras raça e classe são os menus de escolha de raça e de classe.\n\
Outra palavra: esse tipo é uma sub-raça ou sub-classe do tipo especificado.\n\
Quando o jogador escolher o tipo espeficado aqui, abrirá um segundo menu."
const tipo3 = "linha"
const classe3 = var.classe1
const var3 = "menu"
#
const nome4 = "Somente raças"
const info4 = "Se esse tipo for uma classe que não existe em todas as raças,\n\
escreva aqui em quais raças existe (uma raça por linha)"
const tipo4 = "texto"
const classe4 = var.classe1
const var4 = "racas"
#
const nome5 = "Atributos comuns"
const tipo5 = "atribcomum"
const classe5 = var.classe1
const var5 = "recalc_auto"
const mudou5 = "recalc_ajusta"
#
const nome6 = "Atributos ataque"
const info6 = "Afetam os danos quando o personagem ataca alguém"
const tipo6 = "atribatk"
const classe6 = var.classe1
const var6 = "recalc_auto"
const mudou6 = "recalc_ajusta"
#
const nome7 = "Atributos defesa"
const info7 = "Afetam os danos quando alguém ataca o personagem"
const tipo7 = "atribdef"
const classe7 = var.classe1
const var7 = "recalc_auto"
const mudou7 = "recalc_ajusta"


classe comum_tipo
func iniclasse
  criar(arg0)

func recalc_ajusta # Ajusta variáveis quando algum atributo foi mudado
  txt100 nome
  ref r
  prog p
  nome = txt(este, 5)
  recalc_ajusta2(nome, p, r)

func recalc_ajusta2 # Chamado internamente por recalc_ajusta para mais eficiência
# arg0 = nome do tipo
# arg1 = variável prog
# arg2 = variável ref
  epara arg2 = $jogador, arg2, arg2 = objdepois(arg2)
    (arg2.tipo1 == arg0 || arg2.tipo2 == arg0 || arg2.tipo3 == arg0) && (arg2.recalc = 1)
  efim
  epara arg1.iniclasse("p_"), arg1.lin, arg1.depois
    epara arg2 = $[arg1.texto], arg2, arg2 = objdepois(arg2)
      (arg2.tipo1 == arg0 || arg2.tipo2 == arg0 || arg2.tipo3 == arg0) && (arg2.recalc = 1)
    efim
  efim
