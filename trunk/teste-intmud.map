[teste]
herda bom dia
comum int8 x1
int1 x2
int1 x3
int1 x4
const nn = arg0*2+args
#func iniclasse
#teste:x1 = teste:f1(10,20)
#2
#"abc" + teste:nn(4)
#teste:var + teste:var
#teste:var = 10
#ret teste:var
#args(teste:var)
func f1
  ret arg0+1
varfunc var
  ret 4

[bom dia]
int1 y1
int1 y2
int1 y3

[abc def]
#herda teste, bom dia
int8 inteiro8
uint16 teste1
int1 z1
int1 z2
# bom dia
const c1 = (1 | 2) & 3
comum int1 n1
comum uint8 n2
func f
x=1
se x=0
  bom_dia:n(1)
  n("teste")
  $teste.n1("abc" "def")
  $teste.n2("abc" + "def")
fimse #teste
saidas = ds1("norte", "n") + ds1("sul", "s")
prg.var("comandos", txt1(arg0))
abc = -0.0000415+-x-(3+!"teste")*(!1+2)

[teste2]
int8 x2
int1 x3
int1 x4
func iniclasse
  ref r
#criar(arg0, 5).x2 += 5
  ret
  r = criar(arg0, 2)
# r.x2 += 10
 teste2:f1.x2 += teste2:var + 3 + 2
  apagar(r)
func f1
  int8 lixo
  ref nn
  nn = $teste2
  ret nn
varfunc var
  ret 8
func ini
  x2 = arg0
func fim
  10

[x]
comum serv servidor
socket conec
const msg = conec.msg(arg0)
uint16 xvar
func iniclasse
  se ![arg0]:servidor.abrir("", 2000)
    terminar
func servidor_socket
  ref novo
  novo = criar("x")
  novo.conec = arg0
  novo.conec.cores = 3
  novo.conec.msg("Benvindo\n")
  novo.conec.msg("Tecle um número de 0 a 12 ou qualquer outra coisa\n")
func conec_msg
  conec.msg("Você escreveu \cA\d4" + arg0 + "\b\n")
  escr_[txt1(arg0)](txt2(arg0))
func escr_0
  msg("intpos(1) = " + intpos(1) + "\n")
  msg("intpos(-1) = " + intpos(-1) + "\n")
  msg("intabs(4) = " + intabs(4) + "\n")
  msg("intabs(-5.8) = " + intabs(-5.8) + "\n")
  msg("int(4.3) = " + int(4.3) + "\n")
  msg(txt(1.4 + "3.84") + "\n")
func escr_1
  msg("rand(10) = " + rand(10) + "\n")
func escr_2
  msg("txt(\"abcdef\", 2, 3) = " + txt("abcdef", 2, 3) + "\n")
func escr_3
  msg("Texto após '3': " + arg0 + "\n")
  msg("txt1 - " + txt1(arg0) + "\n")
  msg("txt2 - " + txt2(arg0) + "\n")
  msg("inttotal - " + inttotal(arg0) + "\n")
  msg("txtmai - " + txtmai(arg0) + "\n")
  msg("txtmin - " + txtmin(arg0) + "\n")
  msg("txtmai2 - " + txtmai2(arg0) + "\n")
  msg("txtmaimin - " + txtmaimin(arg0) + "\n")
  msg("txtfiltro - " + txtfiltro(arg0) + "\n")
  msg("txtshs - " + txtshs(arg0) + "\n")
  msg("txtnome - " + txtnome(arg0) + "\n")
  msg("intnome - " + intnome(arg0) + "\n")
  msg("intsenha - " + intsenha(arg0) + "\n")
func escr_4
  ref r
  msg("Objetos mm: " + inttotal($mm) + "\n")
  r = $mm
  enquanto r
    msg(r.texto + "\n")
    r = objdepois(r)
  efim
func escr_5
  msg("Volte sempre\n")
  apagar(este)
func escr_6
  msg("Encerrando o IntMUD\n")
  terminar
func escr_7
  se("A"="a")
    msg("1\n")
  senão
    msg("0\n")
  fimse
  se("A"=="a")
    msg("1\n")
  senão
    msg("0\n")
  fimse
func escr_8
  txt20 tt
  uint8 x
  tt = " \d4  bom   dia \b  "
  msg("Texto \"" + tt + "\"\n")
  enquanto x<16
    msg(txt(x) + "=\"" + txtremove(tt,x) + "\"\n")
    x += 1
  efim
func escr_9
  msg(vartroca("$A $a $B $b\n", "$", "teste_"))
  msg(vartroca("$1 falou com $2\n", "$", "t_"))
  msg(vartroca("bom $da $de $di $do $du dia\n", "$", "var_"))
  msg(vartroca("total %t %T valor %r% %var %\n", "%", "x"))
func teste_a
  se arg0 == "A"
    ret "A maiúsculo"
  senão
    ret "A minúsculo"
const teste_b = teste2_b[arg0=="B"]
const teste2_b0 = "B maiúsculo"
const teste2_b1 = "B minúsculo"
const t_1 = "joão"  # $1 = joão
const t_2 = "maria" # $2 = maria
const var_d = "D"
const var_di = "DI"
const var_dia = "DIA"
const var_des = "DES"
const var_do = "DO"
const var_du = $x
func xt
  xvar += 1
  ret xvar
varfunc xr
  ret rand(101)
const x_ = "%"
const x = "???"
func escr_10
  uint8 teste.3
  teste.0 = 5
  teste.1 = 2
  teste.2 = 8
  msg(">" + teste.0 + " " + teste.1 + " " + teste.2 + "\n")
func escr_11
  msg(txtnum(10, "e") + "\n")
  msg(txtnum(4.5, "e") + "\n")
  msg(txtnum(10, "3") + "\n")
  msg(txtnum(4.5, "3") + "\n")
  msg(txtnum(10, ".") + "\n")
  msg(txtnum(4.5, ",") + "\n")
  msg(txtnum(1045234.7, ".5") + "\n")
  msg(txtnum(-2328913.8, ",5") + "\n")
const cores = "0123456789ABCDEF"
func escr_12
  uint8 frente
  uint8 fundo
  txt1 texto
  enquanto fundo<8
    msg("\d" + fundo)
    enquanto frente<16
      texto = txt(cores, frente, 1)
      msg("\c" + texto + texto + " ")
      frente += 1
    efim
    msg("\b\n")
    frente = 0, fundo += 1
  efim
func escr_eco
  se conec.eco
    conec.eco=0
    msg("Eco desabilitado\n")
  senão
    conec.eco=1
    msg("Eco habilitado\n")
func escr_flood
  se conec.aflooder
    conec.aflooder=0
    msg("Anti-flooder desabilitado\n")
  senão
    conec.aflooder=1
    msg("Anti-flooder habilitado\n")

[mm]
txt20 texto
func iniclasse
  criar(arg0, "bom dia")
  criar(arg0, "boa tarde")
  criar(arg0, "boa noite")
# enquanto(1)
# efim
func ini
  texto = arg0

[testeinttempo]
# Teste com intinc, intdec e inttempo
comum serv servidor
socket conec
const msg = conec.msg(arg0)
inttempo tempo.40
inttempo fim
intinc inc
intdec dec
func iniclasse
  se ![arg0]:servidor.abrir("", 2010)
    terminar
func servidor_socket
  criar("testeinttempo", arg0)
func ini
  uint8 x
  conec = arg0
  msg("Benvindo\n")
#inc = 65483, dec = 57
#fim = 410
fim = 50
  enquanto x < 40
    tempo.[x] = x * 10
     x += 1
  efim
  x = 0
  enquanto x < 40
    msg(" " + tempo.[x])
    x += 1
  efim
  conec.msg("\nAguarde\n")
func conec_msg
  msg("Você escreveu " + arg0 + "\n")
func tempo_exec
  msg("" + arg0 + " / " + inc + " / " + dec + " / " + fim + "\n")
func fim_exec
  msg("Fim\n")
  apagar(este)

[servtermina]
# Quando conectar-se na porta 2001 pelo endereço localhost ou 127.0.0.1
# o programa termina
serv servidor.3
func iniclasse
  criar(arg0)
func ini
  servidor.0.abrir("localhost", 2001)
  servidor.1.abrir("localhost", 2002)
  servidor.2.abrir("localhost", 2003)
func servidor_socket
  arg0.msg("Encerrando o IntMUD (arg1=" + arg1 + ")\n")
  terminar


[teste1]
comum serv servidor
socket conec
inttempo t1
inttempo f2
const msg = conec.msg(arg0)
func iniclasse
  se ![arg0]:servidor.abrir("", 2011)
    terminar
func servidor_socket
  criar("teste1", arg0)
func ini
  conec = arg0
  t1 = 12
  t2 = 10
  msg("ini\n")
t1_exec
  msg("" + t1 + "\n")
  apagar(este)
t2_exec
  msg("" + t2 + "\n")
  apagar(este)
