classe jog_admsala
# Comandos de sala e de área
#
const txt_terreno = "Dentro, lugar fechado - 1mv\n\
Rua de uma cidade - 2mv\n\
Campo, um campo aberto - 2mv\n\
Pântano, itens afundam - 3mv\n\
Floresta densa - 3mv\n\
Colina - 4mv\n\
Montanha, excessivamente montanhoso - 6mv\n\
Água, pode nadar - 4mv\n\
Água, requer barco para passar - 50mv\n\
Em baixo d'água - 5mv\n\
Ar, itens e personagens caem - 1mv"
#
const txt_luta = "Pacífico\nExceto entre jogadores\nQualquer luta"
#
const txt_luz = "Claro com eventos de tempo\n\
Claro sem eventos de tempo\n\
Luz do sol\nEscuro"
#
const txt_porta = "Sem porta\nPorta aberta\nPorta fechada\nPorta trancada"
#
const adm_area = "\b\c3Comandos de áreas\b\n\
\c2LAREA\b [nome]\n\
  Lista áreas que começam com o nome especificado. Nome pode ser omitido.\n\
\c2CAREA\b <nome>\n\
  Cria área. Nomes de área devem ter de 2 a 16 letras de A a Z.\n\
\c2EAREA\b [nome]\n\
  Edita área. Se o nome for omitido, edita a área em que você está.\n\
\c2AAREA\b <nome>\n\
  Apaga área, desde que não tenha nenhuma sala."
const adm_sala = "\b\c3Comandos de salas\b\n\
\c2TELE\b <sala ou jogador>\n\
  Teletransporta para uma sala específica ou para aonde um jogador está.\n\
\c2TELE\b <jogador> <sala>\n\
  Transporta um jogador para uma sala.\n\
\c2LSALA\b [sala]\n\
  Lista salas que começam com o nome especificado.\n\
\c2CSALA\b <sala>\n\
  Cria sala. Nome deve ser o nome de uma área ou da sala\n\
  (nome da área seguido de um número de três dígitos de 001 a 999).\n\
\c2CDIR\b <direção>\n\
  Cria sala na direção especificada. Cria automaticamente uma saída\n\
  com a sala em que você está. Exemplo: cdir ne\n\
\c2ESALA\b [sala]\n\
  Edita sala. Se o nome for omitido, edita a sala em que você está.\n\
\c2ASALA\b <um ou mais nomes de sala>\n\
  Apaga uma ou mais salas. Atenção: não apaga as saídas das outras salas\n\
  para as que forem apagadas."
const adm_sai = "\b\c3Comandos de saídas das sala\b\n\
\c2LSAI\b\n\
  Mostra saídas da sala em que você está.\n\
\c2CSAI\b <direção> <sala>\n\
  Cria saída na direção especificada.\n\
\c2CSAI2\b <direção> <sala>\n\
  Mesmo que CSAI, mas cria também uma saída no sentido contrário.\n\
\c2ESAI\b <direção>\n\
  Edita tipo de saída na direção especificada.\n\
\c2ASAI\b <direção>\n\
  Apaga saída na direção especificada."

func cmd_larea # Listar áreas
  prog p
  se !p.iniclasse("a_" + arg0)
    msg("\bNenhuma área encontrada.")
  senao
    textotxt t
    t.addfim("\bÁreas (prefixo, nome, autor):")
    enquanto p.lin
      t.addfim(txt(p.texto, 2) + ", " + [p.texto]:a_nome + ", " + [p.texto]:a_autor)
      p.depois
    efim
    msg2(t.remove(1000))
  fimse
  ret 1

func cmd_carea # Criar área
  txt100 prefixo
  prefixo = txtmin(arg0)
  se $a_[prefixo]
    msg("\bÁrea já existe: " + prefixo)
  senao inttotal(prefixo) < 2 || inttotal(prefixo) > 10
    msg("\bNome de área deve ter de 2 a 10 caracteres")
  senao
    uint8 pos
    enquanto pos < inttotal(prefixo)
      se txt(prefixo, pos, 1) < "a" || txt(prefixo, pos, 1) > "z"
        msg("\bNome de área deve ter apenas letras de a a z.")
        ret 1
      fimse
      pos += 1
    efim
    prog p
    p.criar("a_" + prefixo + "\na-" + prefixo + "\nherda area")
    p.criar("b_" + prefixo + "\na-" + prefixo + "\nherda sala\nconst s_area=\"" + prefixo + \
"\"")
    config:salvar, msg("\bÁrea criada: " + prefixo)
    admlog("criou área " + prefixo)
  fimse
  ret 1

func cmd_aarea # Apagar área
  txt100 prefixo
  prog p
  prefixo = txtmin(arg0)
  se !$a_[prefixo]
    msg("\bÁrea não existe: " + prefixo)
# senao p.iniherdainv("b_" + prefixo)
# msg("\bÁrea contém pelo menos uma sala: " + txt(p.texto, 2))
  senao
    epara p.iniarq("a-" + prefixo), p.lin, p.depois
      se p.texto != "a_" + prefixo && p.texto != "b_" + prefixo
        casovar txt(p.texto, 0, 2)
        casose "s_"
          msg("\bÁrea " + prefixo + " contém pelo menos uma sala")
          ret 1
        casose "p_"
          msg("\bÁrea " + prefixo + " contém pelo menos um personagem")
          ret 1
        casose "i_"
          msg("\bÁrea " + prefixo + " contém pelo menos um item")
          ret 1
        casofim
        msg("\bÁrea " + prefixo + " contém pelo menos uma classe do IntMUD")
        ret 1
      fimse
    efim
    p.apagar("a_" + prefixo)
    p.apagar("b_" + prefixo)
    config:salvar, msg("\bÁrea apagada: " + prefixo)
    admlog("apagou área " + prefixo)
  fimse
  ret 1

func cmd_earea # Editar área
  txt100 prefixo
  prog p
  prefixo = txtmin(arg0)
  se prefixo == ""
    prefixo = txt(perso.dono, 2, inttotal(txt(perso.dono)) - 5)
  fimse
  se !$a_[prefixo]
    msg("\bÁrea não existe: " + prefixo)
  senao
    var.classe1 = "a_" + prefixo
    var.classe2 = "b_" + prefixo
    m_menu("menu_area")
  fimse
  ret 1

func cmd_lsala # Listar salas
  prog p
  se !p.iniclasse("s_" + arg0)
    msg("\bNenhuma sala encontrada.")
  senao
    textotxt t
    t.addfim("\bSalas:")
    enquanto p.lin && t.linhas < 500
      t.addfim(txt(p.texto, 2) + "  " + $[p.texto].s_titulo)
      p.depois
    efim
    msg2(t.remove(500))
  fimse
  ret 1

func cmd_tele # Ir para uma sala específica
  ref p # Personagem
  ref s # Sala destino
  indiceitem item
# Transportar um jogador para uma sala
  se txt2(arg0)
    item.ini("pn " + txtnome(txt1(arg0)))
    p = item.obj, s = $s_[txt2(arg0)]
    se !p
      msg("Jogador inexistente ou ausente: " + txt1(arg0))
    senao !s
      msg("\bSala não existe: " + txt2(arg0))
    senao s == p.dono
      msg(p.nome + " já está em " + txt(s, 2) + ".")
      s = nulo
    fimse
# Transportar-se para uma sala
  senao arg0
    p = perso, s = $s_[arg0]
    se !p
      msg("Você deve estar controlando um personagem para isso")
    senao !s
      item.ini("pn " + txtnome(arg0))
      s = item.obj.dono
      !s && msg("\bSala ou jogador não existe: " + arg0)
    fimse
    se s && s == p.dono
      msg("Você já está em " + txt(s, 2) + ".")
      s = nulo
    fimse
  senao
    msg("Teletransportar quem? Para onde?")
  fimse
# Realiza o teletransporte
  se p && s
    $mens.p(p, perso)
    p != perso && p.msginv("$A teletransporta você.")
    !(p.bitver & 256) && $mens.mvis2("", "$P some em um redemoinho de fumaça.")
    p.mudadono(s)
    !(p.bitver & 256) && $mens.mvis2("", "$P aparece de um redemoinho de fumaça.")
  fimse
  ret 1

func cmd_cdir # Criar sala na direção especificada
  se arg0 == ""
    msg("Tecle o nome da sala ou a direção após CDIR")
    ret 1
  senao !misc:d1[arg0]
    msg("Direção inválida: " + arg0)
    ret 1
  fimse
  prog p
  uint16 num
  txt40 nome
  txt20 dir
  dir = misc:d1[arg0]
# Obtém prefixo da área
  nome = txt(perso.dono, 0, inttotal(txt(perso.dono)) - 3)
  se txt(nome, 0, 2) != "s_"
    msg("Você não está em uma sala")
    ret 1
  fimse
# Checa se já existe sala nessa direção
  se p.existe(perso.dono, "dir_" + dir) == 1
    msg("Já existe sala na direção " + dir)
    ret 1
  fimse
# Obtém número da sala
  epara num = 1001, p.existe(nome + txtfim(num, 3)), num += 1
    continuar num < 2000
    msg("Atingido limite de salas na área " + txt(nome, 2))
    ret 1
  efim
# Cria sala
  txt300 nome2
  nome2 = nome + txtfim(num, 3) + "\n" # Nome da classe
  nome2 += "a-" + txt(nome, 2) + "\n" # Nome do arquivo
  nome2 += "herda b_" + txt(nome, 2) + "\n" # Herda propriedades da área
  nome2 += "const s_titulo=\"Sem nome\"\nconst s_desc=\"\"\n"
  nome2 += "const dir_" + misc:d2[dir] + "=$" + perso.dono # Saída da sala
  p.criar(nome2)
  p.criar(perso.dono, "const dir_" + dir + "=$" + nome + txtfim(num, 3))
  config:salvar
  msg("\bSala criada em " + dir + ": " + txt(nome, 2) + txtfim(num, 3))
  admlog("criou sala " + txt(nome, 2) + txtfim(num, 3))
  ret 1

func cmd_csala # Criar sala
  prog p
  txt40 nome
  uint16 num
# Checa se digitou nome da sala
  se arg0 == ""
    msg("Tecle o nome da sala ou área após CSALA")
    ret 1
  fimse
# Checa nome completo
  nome = arg0
  num = int(txtfim(nome, 3)) + 1000
  se num > 1000 && txtfim(num, 3) == txtfim(arg0, 3)
    se !p.existe("a_" + txt(nome, 0, inttotal(nome) - 3))
      msg("Área não existe: " + txt(nome, 0, inttotal(nome) - 3))
      ret 1
    senao p.existe("s_" + nome)
      msg("Sala já existe: " + nome)
      ret 1
    fimse
# Checa nome de área
  senao !p.existe("a_" + nome)
    msg("Área não existe: " + nome)
    ret 1
  senao
    epara num = 1001, p.existe("s_" + nome + txtfim(num, 3)), num += 1
      continuar num < 2000
      msg("Atingido limite de salas na área " + nome)
      ret 1
    efim
    nome += txtfim(num, 3)
  fimse
# Cria sala
  txt200 area
  area = txt(nome, 0, inttotal(nome) - 3)
  area = "s_" + nome + "\na-" + area + "\nherda b_" + area
  p.criar(area + "\nconst s_titulo=\"Sem nome\"\nconst s_desc=\"\"")
  config:salvar
  msg("\bSala criada: " + nome)
  admlog("criou sala " + nome)
  ret 1

func cmd_asala # Apagar sala
  prog p
  se arg0 == ""
    msg("Tecle um ou mais nomes da sala após ASALA")
    ret 1
  fimse
  uint16 x
  enquanto txtsub(arg0, x, 1)
    se !p.existe("s_" + txtsub(arg0, x, 1))
      msg("Sala não existe: " + txtsub(arg0, x, 1))
      ret 1
    fimse
    x += 1
  efim
  tpasso = arg0, p_asala
  ret 1

func p_asala # Confirmar que quer apagar sala
  passo = ""
  se arg0 == "n"
    msg("Cancelado")
  senao arg0 == "s"
    prog p
    uint16 x
    enquanto txtsub(tpasso, x, 1)
      p.apagar("s_" + txtsub(tpasso, x, 1))
      x += 1
    efim
    config:salvar
    se x < 2
      msg("Sala apagada: " + tpasso)
      admlog("apagou sala " + tpasso)
    senao
      msg("Salas apagadas: " + tpasso)
      admlog("apagou salas " + tpasso)
    fimse
  senao
    txt10 m1
    passo = "asala"
    txt2(tpasso) && (m1 = "s")
    msg("Apagar sala" + m1 + " " + tpasso + "? Tecle S ou N")
  fimse
  ret 1

func cmd_esala # Editar sala
  txt100 nome
  prog p
  nome = txtmin(arg0)
  nome == "" && (nome = txt(perso.dono, 2))
  se !$s_[nome]
    msg("\bSala não existe: " + nome)
  senao
    var.classe1 = "s_" + nome
    m_menu("menu_sala")
  fimse
  ret 1

func cmd_lsai # Listar saídas
  se !perso.dono
    msg("\bVocê não está em uma sala")
    ret 1
  fimse
  prog p
  txt80 dir
  txt80 lin
  tpasso = perso.dono
  msg("\bSaídas de " + txt(tpasso, 2) + ":")
  epara dir = "n s l o ne no se so c b entrar sair", dir, dir = txt2(dir)
    continuar !p.existe(tpasso, "dir_" + txt1(dir))
    lin = txtmai(txt1(dir)) + "  "
    lin += t_sala(tpasso, "dir_" + txt1(dir))
    msg(lin)
  efim
  !lin && msg("Nenhuma")
  ret 1

func cmd_asai # Apagar saída
  prog p
  txt10 dir
  dir = misc:d1[txt1(arg0)]
  se !perso.dono
    msg("\bVocê não está em uma sala")
  senao !arg0
    msg("\bDigite a direção após ASAI")
  senao !dir
    msg("\bSaída não existe: " + arg0)
  senao
    p.apagar(perso.dono, "dir_" + dir)
    p.apagar(perso.dono, "portaini_" + dir)
    p.apagar(perso.dono, "inv_" + dir)
    p.apagar(perso.dono, "tranc_" + dir)
    p.apagar(perso.dono, "fechadura_" + dir)
    p.apagar(perso.dono, "portanome_" + dir)
    config:salvar, msg("\bSaída apagada: " + dir)
    admlog("apagou saída " + dir + " de " + txt(perso.dono, 2))
  fimse
  ret 1

func cmd_csai # Criar saída
  prog p
  txt10 dir
  dir = misc:d1[txt1(arg0)]
  se !perso.dono
    msg("\bVocê não está em uma sala")
  senao !arg0
    msg("\bDigite a direção após CSAI" + arg1)
  senao !dir
    msg("\bSaída não existe: " + txt1(arg0))
  senao !txt2(arg0)
    msg("\bDigite a sala após CSAI" + arg1 + " " + arg0)
  senao !p.existe("s_" + txt2(arg0))
    msg("\bSala não existe: " + txt2(arg0))
  senao
    p.criar(perso.dono, "const dir_" + dir + "=$s_" + txtmin(txt2(arg0)))
    se arg1
      p.criar("s_" + txt2(arg0), "const dir_" + misc:d2[dir] + "=$" + perso.dono)
      msg("\bSaída completa criada: " + dir + " para " + txtmin(txt2(arg0)))
    senao
      msg("\bSaída criada: " + dir + " para " + txtmin(txt2(arg0)))
    fimse
    config:salvar
    admlog("criou saída " + dir + " de " + txt(perso.dono, 2))
  fimse
  ret 1

const cmd_csai2 = cmd_csai(arg0, "2") # Criar saída completa

func cmd_esai # Editar saída
  prog p
  txt10 dir
  dir = misc:d1[txt1(arg0)]
  se !perso.dono
    msg("\bVocê não está em uma sala")
  senao !arg0
    msg("\bDigite a direção após ESAI")
  senao !dir
    msg("\bSaída não existe: " + arg0)
  senao !p.existe(perso.dono, "dir_" + dir)
    msg("Não existe saída na direção " + txtmai(dir))
  senao
    var.classe1 = perso.dono
    var.saida1 = txtmin(dir)
    m_menu("menu_saida")
  fimse
  ret 1

const t_saiinicio = t_opcao(arg0, arg1, arg2)

func p_saiinicio
  p_opcao(arg0)
  se passo == "opcao"
    passo = "saiinicio"
  senao arg0 != "z" && passo != "saiinicio"
    $[var.classe1].mudaporta(var.saida1, arg0)
  fimse
  ret 1

const t_saiagora = t_opcaomostra($[arg0].[arg1], txt_porta)

func p_saiagora # Mudar o estado atual
  casovar arg0
  casose "z"
    sair
  casose "0"
  casose "1"
  casose "2"
  casose "3"
    se $[var.classe1].mudaporta(var.saida1, arg0)
      textotxt t
      t.addfim(txt_porta), t.remove(arg0)
      msg("Saída mudou para: " + arg0 + " " + t.remove)
    senao
      msg("Não foi possível mudar a saída")
    fimse
    sair
  casose
    passo = "saiagora"
    msg("Escolha: 0 Sem porta, 1 Aberto, 2 Fechado, 3 Trancado, Z Cancela")
    ret 1
  casofim
  passo = var.opcpasso, p_[passo]("\b")
  ret 1

const t_resettempo = t_numero(arg0, arg1)

func p_resettempo # Mudar o estado atual
  $[var.opcclasse].resetcheca = 1
  p_numero(arg0)
  passo == "numero" && (passo = "resettempo")
  ret 1


classe menu_area
# Vide arquivo mud.txt, tópico "Criando menus de edição (administração)"
const titulo = "Área " + txt(var.classe1, 2)
const colunas = 23
#
const nome1 = "Nome"
const tipo1 = "linha-"
const clas1 = var.classe1
const vari1 = "a_nome"
#
const nome2 = "Autor"
const tipo2 = "linha-"
const clas2 = var.classe1
const vari2 = "a_autor"
#
const nome3 = "Tempo de reset"
const tipo3 = "resettempo"
const clas3 = var.classe1
const vari3 = "a_tempo"
#
const nome4 = "Modo de reset"
const tipo4 = "opcao"
const clas4 = var.classe1
const vari4 = "a_reset"
const extr4 = "Nunca\nQuando não há jogadores\nNormal"
#
const nome5 = "Mensagem de reset"
const tipo5 = "linha"
const clas5 = var.classe1
const vari5 = "a_txtreset"
const extr5 = "Enviada para os jogadores na área quando ocorre reset"
#
const nome6 = "Terreno"
const tipo6 = "opcao"
const clas6 = var.classe2
const vari6 = "s_terreno"
const extr6 = txt_terreno
#
const nome7 = "Luz"
const tipo7 = "opcao"
const clas7 = var.classe2
const vari7 = "s_luz"
const extr7 = txt_luz
#
const nome8 = "Apagar itens"
const info8 = "Em quantos minutos sem jogador na sala deve começar a apagar os itens"
const tipo8 = "numero"
const clas8 = var.classe2
const vari8 = "s_item"
#
const nome9 = "Morre ao entrar"
const tipo9 = "simnao"
const clas9 = var.classe2
const vari9 = "s_morre"
#
const nome10 = "Ao tentar falar"
const info10 = "Mensagem recebida ao usar o comando falar; se nulo permite falar"
const tipo10 = "linha"
const clas10 = var.classe2
const vari10 = "s_falar"
#
const nome11 = "Batalha"
const tipo11 = "opcao"
const clas11 = var.classe2
const vari11 = "s_luta"
const extr11 = txt_luta
#
const nome12 = "Sem resgate"
const info12 = "Se não é possível resgatar outro jogador"
const tipo12 = "simnao"
const clas12 = var.classe2
const vari12 = "s_naoresg"
#
const nome13 = "Sem magia"
const tipo13 = "simnao"
const clas13 = var.classe2
const vari13 = "s_semmagia"
#
const nome14 = "Comando retornar"
const tipo14 = "opcao"
const clas14 = var.classe2
const vari14 = "s_retornar"
const extr14 = "Permitido\n\
Não permitido\n\
Muda o ponto de retorno para essa sala\n\
Muda o ponto de retorno se não possuir"
#
const nome15 = "PNJs entram"
const tipo15 = "simnao"
const clas15 = var.classe2
const vari15 = "s_pnj"
#
const nome16 = "Soltar itens"
const tipo16 = "opcao"
const clas16 = var.classe2
const vari16 = "s_soltar"
const extr16 = "Permitido\n\
Não permitido\n\
Destrói afundando\n\
Destrói caindo\n\
Desintegra"
#
const nome17 = "Volume dentro"
const tipo17 = "numero"
const clas17 = var.classe2
const vari17 = "volmax"
#
const nome18 = "Objetos máximo"
const tipo18 = "numero"
const clas18 = var.classe2
const vari18 = "objmax"


classe menu_sala
const titulo = "Sala " + txt(var.classe1, 2)
const colunas = 23
#
const nome1 = "Título"
const tipo1 = "linha"
const clas1 = var.classe1
const vari1 = "s_titulo"
#
const nome2 = "Descrição"
const tipo2 = "texto"
const clas2 = var.classe1
const vari2 = "s_desc"
#
const nome3 = "Desc de noite"
const info3 = "Se quiser uma descrição diferentes quando etiver de noite"
const tipo3 = "texto"
const clas3 = var.classe1
const vari3 = "s_noite"
#
const nome4 = "Desc completa"
const info4 = "Se quiser substituir a descrição completa, mostrada ao teclar 'olhar'"
const tipo4 = "texto"
const clas4 = var.classe1
const vari4 = "descsala"
#
const nome5 = "Ocultar desc"
const info5 = "Se não deve mostrar descrição ao entrar na sala"
const tipo5 = "simnao"
const clas5 = var.classe1
const vari5 = "s_ocultar"
#
const nome6 = "Terreno"
const tipo6 = "opcao"
const clas6 = var.classe1
const vari6 = "s_terreno"
const extr6 = txt_terreno
#
const nome7 = "Luz"
const tipo7 = "opcao"
const clas7 = var.classe1
const vari7 = "s_luz"
const extr7 = txt_luz
#
const nome8 = "Apagar itens"
const info8 = "Em quantos minutos sem jogador na sala deve começar a apagar os itens"
const tipo8 = "numero"
const clas8 = var.classe1
const vari8 = "s_item"
#
const nome9 = "Morre ao entrar"
const tipo9 = "simnao"
const clas9 = var.classe1
const vari9 = "s_morre"
#
const nome10 = "Ao tentar falar"
const info10 = "Mensagem recebida ao usar o comando falar; se nulo permite falar"
const tipo10 = "linha"
const clas10 = var.classe1
const vari10 = "s_falar"
#
const nome11 = "Batalha"
const tipo11 = "opcao"
const clas11 = var.classe1
const vari11 = "s_luta"
const extr11 = txt_luta
#
const nome12 = "Sem resgate"
const info12 = "Se não é possível resgatar outro jogador"
const tipo12 = "simnao"
const clas12 = var.classe1
const vari12 = "s_naoresg"
#
const nome13 = "Sem magia"
const tipo13 = "simnao"
const clas13 = var.classe1
const vari13 = "s_semmagia"
#
const nome14 = "Comando retornar"
const tipo14 = "opcao"
const clas14 = var.classe1
const vari14 = "s_retornar"
const extr14 = "Permitido\n\
Não permitido\n\
Muda o ponto de retorno para essa sala\n\
Muda o ponto de retorno se não possuir"
#
const nome15 = "PNJs entram"
const tipo15 = "simnao"
const clas15 = var.classe1
const vari15 = "s_pnj"
#
const nome16 = "Soltar itens"
const tipo16 = "opcao"
const clas16 = var.classe1
const vari16 = "s_soltar"
const extr16 = "Permitido\n\
Não permitido\n\
Destrói afundando\n\
Destrói caindo\n\
Desintegra"
#
const nome17 = "Volume dentro"
const tipo17 = "numero"
const clas17 = var.classe1
const vari17 = "volmax"
#
const nome18 = "Objetos máximo"
const tipo18 = "numero"
const clas18 = var.classe1
const vari18 = "objmax"
#
const nome19 = "Eventos sala"
const info19 = "Se recebe eventos da própria sala"
const tipo19 = "simnao"
const clas19 = var.classe1
const vari19 = "eveste"
const exec19 = "ajustaev"


classe menu_saida
const titulo = "Saída " + txtmai(var.saida1) + " de " + txt(var.classe1, 2)
const colunas = 23
#
const nome1 = "Estado inicial"
const tipo1 = "saiinicio"
const clas1 = var.classe1
const vari1 = "portaini_" + var.saida1
const extr1 = txt_porta
#
const nome2 = "Estado atual"
const tipo2 = "saiagora--"
const clas2 = var.classe1
const vari2 = "porta_" + var.saida1
#
const nome3 = "Invisível"
const tipo3 = "simnao"
const clas3 = var.classe1
const vari3 = "inv_" + var.saida1
#
const nome4 = "Trancar"
const tipo4 = "opcao"
const clas4 = var.classe1
const vari4 = "tranc_" + var.saida1
const extr4 = "Não pode ser trancado\nPode ser trancado\nTranca ao fechar"
#
const nome5 = "Fechadura"
const info5 = "Código da chave que tranca e destranca a porta"
const tipo5 = "linha"
const clas5 = var.classe1
const vari5 = "fechadura_" + var.saida1
#
const nome6 = "Nome da porta"
const tipo6 = "linha"
const clas6 = var.classe1
const vari6 = "portanome_" + var.saida1
