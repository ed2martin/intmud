[A]
herda b,c
comum serv servidor
socket conec
txt16 nomeclasse

const msg = conec.msg(arg0)
func iniclasse
  se ![arg0]:servidor.abrir("localhost", 2000)
    terminar
func servidor_socket
  criar("a", arg0)
func ini
  conec = arg0
  msg("Digite o nome de uma variável ou:\n")
  msg("E para encerrar o programa\n")
  msg("A, B ou C para selecionar a classe\n")
  msg("0 a 6 para escolher uma função\n")
func conec_msg
  prog p
  int16 i
  se p.existe(este, "p" + txt1(arg0))
    p[txt1(arg0)](txt2(arg0))
  senao
    msg("Classe " + nomeclasse + existe[p.existe(nomeclasse)])
    msg(" Variável " + arg0 + existe[p.existe(nomeclasse, arg0)] + "\n")
    se p.varnum(nomeclasse, arg0)
      msg("constante numérica\n")
    fimse
    se p.vartexto(nomeclasse, arg0)
      msg("constante de texto\n")
    fimse
    se p.varlocal(nomeclasse, arg0)
      msg("(local) ")
    fimse
    se p.varcomum(nomeclasse, arg0)
      msg("(comum) ")
    fimse
    se p.varsav(nomeclasse, arg0)
      msg("(sav) ")
    fimse
    msg(p.vartipo(nomeclasse, arg0) + " " + arg0)
    i = p.varvetor(nomeclasse, arg0)
    se i
      msg("." + i)
    fimse
    msg("\n")
const existe0 = " (não existe)"
const existe1 = " (existe)"
func pE
  msg("Programa encerrado\n")
  terminar
func pA
  msg("Classe A\n")
  nomeclasse = "A"
func pB
  msg("Classe B\n")
  nomeclasse = "B"
func pC
  msg("Classe C\n")
  nomeclasse = "C"
func p0
  prog p
  msg("iniclasse=" + p.iniclasse + " (lista de classes)\n")
  mostra(p)
func p1
  prog p
  msg("inifunc=" + p.inifunc(nomeclasse) + " (funções definidas)\n")
  mostra(p)
func p2
  prog p
  msg("inifunc2=" + p.inifunc2(nomeclasse) + " (todas as funções)\n")
  mostra(p)
func p3
  prog p
  msg("iniherda=" + p.iniherda(nomeclasse) + " (herança)\n")
  mostra(p)
func p4
  prog p
  msg("iniherda2=" + p.iniherda2(nomeclasse) + " (todas as classes hedadas)\n")
  mostra(p)
func p5
  prog p
  msg("iniherdainv=" + p.iniherdainv(nomeclasse) + " (herança inversa)\n")
  mostra(p)
func p6
  prog p
  msg("iniclasselin=" + p.iniclasselin(nomeclasse) + " (instruções da classe)\n")
  mostra(p)
func mostra
  enquanto arg0.lin
    msg(txtesp(1 + arg0.nivel * 2) + arg0.texto + "\n")
    arg0.depois
  efim
func pteste12345
  msg("funcionou 1\n")
func pteste12345teste12345
  msg("funcionou 2\n")
func pteste12345teste12345teste12345
  msg("funcionou 3\n")
func pteste12345teste12345teste12345teste12345
  msg("funcionou 4\n")
func pteste12345teste12345teste12345teste12345teste12345
  msg("funcionou 5\n")
func pteste12345teste12345teste12345teste12345teste12345teste12345
  msg("funcionou 6\n")
func pteste12345teste12345teste12345teste12345teste12345teste12345teste12345
  msg("funcionou 7\n")
func pteste12345teste12345teste12345teste12345teste12345teste12345teste12345teste123
  msg("funcionou 8\n")

[B]
int8 var1
int8 v.10
sav txt10 teste
const c1 = 10
const c2 = "10"

[C]
herda teste

[teste]
