classe jog_admitem
# Comandos de itens
#
const adm_item = "\b\c3Comandos de itens\b\n\
\c2LITEM\b [nome]\n\
  Lista itens que começam com o nome especificado.\n\
\c2CITEM\b <nome>\n\
  Cria item. Nome deve ser o nome de uma área ou do item\n\
  (nome da área seguido de um número de três dígitos de 001 a 999).\n\
\c2EITEM\b <nome>\n\
  Edita item.\n\
\c2AITEM\b <nome>\n\
  Apaga item."

func cmd_litem # Listar itens
  prog p
  se !p.iniclasse("i_" + arg0)
    msg("\bNenhum item encontrado.")
  senao
    textotxt t
    txt100 lin
    t.addfim("\bItem Tipo Quantidade Nome")
    enquanto p.lin && t.linhas < 500
      lin = txt(p.texto, 2) + "  " + txt(" SGC", [p.texto]:item, 1)
      t.addfim(lin + " " + inttotal($[p.texto]) + "  " + [p.texto]:nome)
      p.depois
    efim
    msg2(t.remove(500))
  fimse
  ret 1

func cmd_citem # Criar item
  prog p
  txt40 nome
  uint16 num
# Checa se digitou nome da sala
  se arg0 == ""
    msg("Tecle o nome do item ou da área após CITEM")
    ret 1
  fimse
# Checa nome completo
  nome = arg0
  num = int(txtfim(nome, 3)) + 1000
  se num > 1000 && txtfim(num, 3) == txtfim(arg0, 3)
    se !p.existe("a_" + txt(nome, 0, inttotal(nome) - 3))
      msg("Área não existe: " + txt(nome, 0, inttotal(nome) - 3))
      ret 1
    senao p.existe("i_" + nome)
      msg("Item já existe: " + nome)
      ret 1
    fimse
# Checa nome de área
  senao !p.existe("a_" + nome)
    msg("Área não existe: " + nome)
    ret 1
  senao
    epara num = 1001, p.existe("i_" + nome + txtfim(num, 3)), num += 1
      continuar num < 2000
      msg("Atingido limite de itens na área " + nome)
      ret 1
    efim
    nome += txtfim(num, 3)
  fimse
# Pergunta que tipo de item criar
  var.opcclasse = nome
  ret p_citem("\b")

func p_citem # Escolher o tipo de item ao criar
  txt40 deriv
  casovar txtmin(arg0)
  casose
    msg("Opção inválida")
  casose "\b"
  casose ""
    passo = "citem"
    msg("Entre com o tipo de item, O mostra as opções, Z cancela")
    ret 1
  casose "z"
    msg("Retornando ao jogo")
    passo = "", var.opcclasse = ""
    ret 1
  casose "o"
    txtmais.limpar
    txtmais.addfim("S Simples")
    txtmais.addfim("G Agrupa vários em um único objeto")
    txtmais.addfim("C Completo")
    txtmostra
    ret 1
  casose "s"
    deriv = "comum_item"
    sair
  casose "g"
    deriv = "comum_itemgrupo"
    sair
  casose "c"
    deriv = "comum_itemperso"
    sair
  casofim
# Cria item
  prog p
  txt100 area
  area = txt(var.opcclasse, 0, inttotal(var.opcclasse) - 3)
  p.criar("i_" + var.opcclasse + "\na-" + area + "\nherda " + deriv)
  config:salvar
  msg("\bItem criado: " + var.opcclasse)
  passo = "", var.opcclasse = ""
  ret 1

func cmd_aitem # Apagar item
  prog p
  se arg0 == ""
    msg("Tecle um ou mais nomes de itens após AITEM")
    ret 1
  fimse
  uint16 x
  enquanto txtsub(arg0, x, 1)
    se !p.existe("i_" + txtsub(arg0, x, 1))
      msg("Item não existe: " + txtsub(arg0, x, 1))
      ret 1
    fimse
    x += 1
  efim
  tpasso = arg0, p_aitem
  ret 1

func p_aitem # Confirmar que quer apagar item
  passo = ""
  se arg0 == "n"
    msg("Cancelado")
  senao arg0 == "s"
    prog p
    uint16 x
    enquanto txtsub(tpasso, x, 1)
      p.apagar("i_" + txtsub(tpasso, x, 1))
      x += 1
    efim
    config:salvar
    se x < 2
      msg("Item apagado: " + tpasso)
    senao
      msg("Itens apagados: " + tpasso)
    fimse
  senao
    txt20 m1
    passo = "aitem"
    m1 = txt2(tpasso) ? "itens" : "item"
    msg("Apagar " + m1 + " " + tpasso + "? Tecle S ou N")
  fimse
  ret 1

func cmd_eitem # Editar item
  prog p
  uint8 num
  se arg0 == ""
    msg("Tecle o nome do item após EITEM")
  senao !p.existe("i_" + arg0)
    msg("\bItem não existe: " + arg0)
  senao !p.existe("adm_item" + (num = i_[arg0]:item))
    msg("\bItem não pode ser editado: " + arg0)
  senao
    var.classe1 = "i_" + txtmin(arg0)
    m_menu("adm_item" + num)
  fimse
  ret 1


classe adm_icomum
const nome1 = "Nome"
const tipo1 = "linha"
const classe1 = var.classe1
const var1 = "nome"
#
const nome2 = "Palavras chave"
const info2 = "Palavras que os jogadores digitam para se referir ao item"
const tipo2 = "linha"
const classe2 = var.classe1
const var2 = "ident"
#
const nome3 = "Sexo"
const tipo3 = "opcao"
const classe3 = var.classe1
const var3 = "sexo"
const extra3 = "Feminino\nMasculino"
#
const nome4 = "Descrição padrão"
const info4 = "Descrição quando está na sala"
const tipo4 = "linha"
const classe4 = var.classe1
const var4 = "descpos"
#
const nome5 = "Descrição ao ver"
const tipo5 = "texto"
const classe5 = var.classe1
const var5 = "descver"
#
const nome6 = "Peso"
const info6 = "Em gramas"
const tipo6 = "numero"
const classe6 = var.classe1
const var6 = "pesoobj"
const extra6 = "1 1000000000"
const mudou6 = "ajustapeso"
#
const nome7 = "Volume"
const tipo7 = "numero"
const extra7 = "1 1000000000"
const classe7 = var.classe1
const var7 = "volobj"
const mudou7 = "ajustapeso"
#
const nome11 = "Nível"
const tipo11 = "numero"
const classe11 = var.classe1
const var11 = "nivel"
#
const nome12 = "Mantém na sala"
const info12 = "Como a opção \"Apagar itens\" da sala ou área afeta o item"
const tipo12 = "simnao"
const classe12 = var.classe1
const var12 = "mantersala"
#
const nome13 = "Quanto vale"
const tipo13 = "numero"
const classe13 = var.classe1
const var13 = "valor"
#
const nome14 = "Vestir posição 1"
const tipo14 = "opcao"
const classe14 = var.classe1
const var14 = "vestir1"
const extra14 = adm_item1:equip
#
const nome15 = "Vestir posição 2"
const tipo15 = "opcao"
const classe15 = var.classe1
const var15 = "vestir2"
const extra15 = adm_item1:equip
#
const nome16 = "Vestir posição 3"
const tipo16 = "opcao"
const classe16 = var.classe1
const var16 = "vestir3"
const extra16 = adm_item1:equip
#
const nome17 = "Pega animais nível"
const info17 = "Nível médio dos animais que podem ser capturados com esse item,\n\
ou 0 se não puder capturar"
const tipo17 = "numero"
const classe17 = var.classe1
const var17 = "i_captura"
#
const nome41 = "Variáveis"
const tipo41 = "linha"
const classe41 = var.classe1
const var41 = "inivar"
#
const nome42 = "Eventos item"
const info42 = "Receber eventos do próprio item"
const tipo42 = "simnao"
const classe42 = var.classe1
const var42 = "eveste"
const mudou42 = "ajustaev"
#
const nome43 = "Eventos em perso"
const info43 = "Se recebe eventos do dono se for personagem"
const tipo43 = "simnao"
const classe43 = var.classe1
const var43 = "evperso"
const mudou43 = "ajustaev"
#
const nome44 = "Eventos em item"
const info44 = "Se recebe eventos do dono se for item"
const tipo44 = "simnao"
const classe44 = var.classe1
const var44 = "evitem"
const mudou44 = "ajustaev"
#
const nome45 = "Eventos em sala"
const info45 = "Se recebe eventos da sala se estiver em uma sala"
const tipo45 = "simnao"
const classe45 = var.classe1
const var45 = "evsala"
const mudou45 = "ajustaev"


classe adm_item1
herda adm_icomum
const titulo = "Item simples " + txt(var.classe1, 2)
#
const nome8 = "Volume dentro"
const tipo8 = "numero"
const classe8 = var.classe1
const var8 = "volmax"
#
const nome9 = "Expande"
const info9 = "Volume aumenta se tiver itens dentro"
const tipo9 = "simnao"
const classe9 = var.classe1
const var9 = "volexp"
const mudou9 = "ajustapeso"
#
const nome10 = "Objetos máximo"
const tipo10 = "numero"
const classe10 = var.classe1
const var10 = "objmax"
#
comum textotxt t # Lista das posições aonde pode vestir
const equip = adm_item1:t.ini.textolin(100) # Texto da variável t

func iniclasse
  uint8 n
  [arg0]:t.addfim("Não")
  epara n = 1, misc:equip(n) != "desconhecido", n += 1
    [arg0]:t.addfim(txtmaimin(misc:equip(n)))
  efim


classe adm_item2
herda adm_icomum
const titulo = "Item grupo " + txt(var.classe1, 2)
#
const nome11 = "Nível"
const info11 = "Todos os itens " + txt(var.classe1, 2) + " possuem o mesmo nível"
const tipo11 = "numero"
const classe11 = var.classe1
const var11 = "pnivel"


classe adm_item3
herda adm_item1
const titulo = "Item " + txt(var.classe1, 2)
#
const nome18 = "Mobília"
const tipo18 = "opcao"
const classe18 = var.classe1
const var18 = "i_movel"
const extra18 = "Não\nPodem sentar\nPodem sentar e deitar"
#
const nome19 = "Lugares"
const tipo19 = "numero"
const classe19 = var.classe1
const var19 = "i_lugar"
#
const nome20 = "Container"
const tipo20 = "opcao"
const classe20 = var.classe1
const var20 = "i_abertoini"
const mudou20 = "recalc_exec"
const extra20 = "Não\n\
Sempre aberto\n\
Inicialmente aberto\n\
Inicialmente fechado\n\
Inicialmente trancado"
