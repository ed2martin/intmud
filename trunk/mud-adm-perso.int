classe adm_perso
# Comandos de personagem
#
const adm_perso = "\b\c3Comandos de personagens não jogador\b\n\
\c2LPERSO\b [nome]\n\
  Lista personagens que começam com o nome especificado.\n\
\c2CPERSO\b <nome>\n\
  Cria personagem. Nome deve ser o nome de uma área ou do personagem\n\
  (nome da área seguido de um número de três dígitos de 001 a 999).\n\
\c2EPERSO\b <nome>\n\
  Edita personagem.\n\
\c2APERSO\b <nome>\n\
  Apaga personagem."

func cmd_lperso # Listar personagens
  prog p
  se !p.iniclasse("p_" + arg0)
    msg("\bNenhum personagem encontrado.")
  senao
    textotxt t
    txt100 lin
    t.addfim("\b\c6Personagem Tipo Quantidade Nome\b")
    enquanto p.lin && t.linhas < 500
      lin = txt(p.texto, 2) + " " + txt(" SBA", [p.texto]:perso, 1)
      se inttotal($[p.texto]) == [p.texto]:objsolto.total
        lin += " " + inttotal($[p.texto])
      senao
        lin += " " + [p.texto]:objsolto.total + "/" + inttotal($[p.texto])
      fimse
      t.addfim(lin + "  " + [p.texto]:nome)
      p.depois
    efim
    msg2(t.remove(500))
  fimse
  ret 1

func cmd_cperso # Criar personagem
  prog p
  txt40 nome
  uint16 num
# Checa se digitou nome da sala
  se arg0 == ""
    msg("Tecle o nome do personagem ou da área após CPERSO")
    ret 1
  fimse
# Checa nome completo
  nome = txtmin(txtremove(arg0, "EMDCT7"))
  num = int(txtfim(nome, 3)) + 1000
  se num > 1000 && txtfim(num, 3) == txtfim(arg0, 3)
    se !p.existe("a_" + txt(nome, 0, inttotal(nome) - 3))
      msg("Área não existe: " + txt(nome, 0, inttotal(nome) - 3))
      ret 1
    senao p.existe("p_" + nome)
      msg("Personagem já existe: " + nome)
      ret 1
    fimse
# Checa nome de área
  senao !p.existe("a_" + nome)
    msg("Área não existe: " + nome)
    ret 1
  senao
    epara num = 1001, p.existe("p_" + nome + txtfim(num, 3)), num += 1
      continuar num < 2000
      msg("Atingido limite de personagens na área " + nome)
      ret 1
    efim
    nome += txtfim(num, 3)
  fimse
# Pergunta que tipo de personagem criar
  var.opcclasse = nome
  ret p_cperso("\b")

func p_cperso # Escolher o tipo de personagem ao criar
  txt40 deriv
  casovar txtmin(arg0)
  casose
    msg("Opção inválida")
  casose "\b"
  casose ""
    passo = "cperso"
    msg("Entre com o tipo de personagem, O mostra as opções, Z cancela")
    ret 1
  casose "z"
    msg("Retornando ao jogo")
    passo = "", var.opcclasse = ""
    ret 1
  casose "o"
    txtmais.limpar
    txtmais.addfim("S Simples/pacífico")
    txtmais.addfim("B Pode batalhar")
    txtmais.addfim("A Pode usar animais")
    txtmostra
    ret 1
  casose "s"
    deriv = "comum_perso"
    sair
  casose "b"
    deriv = "comum_persobat"
    sair
  casose "a"
    deriv = "comum_persoanimal"
    sair
  casofim
# Cria personagem
  prog p
  txt100 area
  area = txt(var.opcclasse, 0, inttotal(var.opcclasse) - 3)
  p.criar("p_" + var.opcclasse + "\na-" + area + "\nherda " + deriv)
  criar("admordena", "a-" + area)
# config:salvar
  msg("\bPersonagem criado: " + var.opcclasse)
  admlog("criou personagem " + var.opcclasse)
  passo = "", var.opcclasse = ""
  ret 1

func cmd_aperso # Apagar personagem
  prog p
  refvar nome = txtmin(txtremove(arg0, "EMDCT7"))
  se nome == ""
    msg("Tecle um ou mais nomes de personagens após APERSO")
    ret 1
  fimse
  uint16 x
  enquanto txtsub(nome, x, 1)
    se !p.existe("p_" + txtsub(nome, x, 1))
      msg("Personagem não existe: " + txtsub(nome, x, 1))
      ret 1
    fimse
    x += 1
  efim
  tpasso = nome, p_aperso
  ret 1

func p_aperso # Confirmar que quer apagar personagem
  passo = ""
  se arg0 == "n"
    msg("Cancelado")
  senao arg0 == "s"
    prog p
    uint16 x
    enquanto txtsub(tpasso, x, 1)
      p.apagar("p_" + txtsub(tpasso, x, 1))
      x += 1
    efim
    config:salvar
    se x < 2
      msg("Personagem apagado: " + tpasso)
      admlog("apagou personagem " + tpasso)
    senao
      msg("Personagens apagados: " + tpasso)
      admlog("apagou personagens " + tpasso)
    fimse
  senao
    txt20 m1
    passo = "aperso"
    m1 = txt2(tpasso) ? "personagens" : "personagem"
    msg("Apagar " + m1 + " " + tpasso + "? Tecle S ou N")
  fimse
  ret 1

func cmd_eperso # Editar personagem
  prog p
  uint8 num
  refvar nome = txtmin(txtremove(arg0, "EMDCT7"))
  se nome == ""
    msg("Tecle o nome do personagem após EPERSO")
  senao !p.existe("p_" + nome)
    msg("\bPersonagem não existe: " + nome)
  senao !p.existe("menu_perso" + (num = p_[nome]:perso))
    msg("\bPersonagem não pode ser editado: " + nome)
  senao
    var.classe1 = "p_" + txtmin(nome)
    var.menufim = "menu_perso" + num
    m_menu("menu_perso" + num)
  fimse
  ret 1

func t_menuprod # Retorna quantidade de produtos
# arg0=nome da classe, arg1=nome da variável
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    ret p.vartexto(arg0, arg1), t_menuprod2([arg0]:[arg1])
    p.inilinha(arg0, arg1)
    ret "<" + txt1(p.texto) + ">"
  casose "2" # Em uma classe herdada
    ret p.vartexto(arg0, arg1), "<herda> " + t_menuprod2([arg0]:[arg1])
    p.inilinha(arg0, arg1)
    ret "<herda " + txt1(p.texto) + ">"
  casose # Não foi definido
    ret "<nulo> " + t_menuprod2
  casofim

func t_menuprod2 # Usado por t_menuprod
  txt10 x
  x = intsublin(arg0)
  ret x == "0" ? "\c6Nenhum produto\b" : x == "1" ? "\c6Um produto\b" : "\c6" + x + " produtos\b"

func t_menuaula # Retorna quantidade de aulas
# arg0=nome da classe, arg1=nome da variável
  prog p
  casovar p.existe(arg0, arg1)
  casose "1" # Na própria classe
    ret p.vartexto(arg0, arg1), t_menuaula2([arg0]:[arg1])
    p.inilinha(arg0, arg1)
    ret "<" + txt1(p.texto) + ">"
  casose "2" # Em uma classe herdada
    ret p.vartexto(arg0, arg1), "<herda> " + t_menuaula2([arg0]:[arg1])
    p.inilinha(arg0, arg1)
    ret "<herda " + txt1(p.texto) + ">"
  casose # Não foi definido
    ret "<nulo> " + t_menuaula2
  casofim

func t_menuaula2 # Usado por t_menuaula
  txt10 x
  x = intsublin(arg0)
  ret x == "0" ? "\c6Nenhuma aula\b" : x == "1" ? "\c6Uma aula\b" : "\c6" + x + " aulas\b"

func p_menuaula # Menu de aulas
  ret p_menuprod(arg0, "aula")

func p_menuprod # Menu de produtos
# msg(arg1 ? ">aula" : ">produto")
  var.opcinserir = ""
  casovar txtmin(txt(arg0, 0, 1))
  casose "\b"
  casose ""
    passo = arg1 ? "menuaula" : "menuprod"
    msg(var.opcnome + " " + txt(var.opcclasse, 2) + ", tecle O para saber as opções")
    ret 1
  casose "o"
    textopos pos
    txtmais.addfim(var.opcnome + " " + txt(var.opcclasse, 2))
    txtmais.addfim([var.opcclasse]:[var.opcvar])
    pos = txtmais.ini, pos.depois
    !pos.texto && pos.remove
    se !pos.texto
      pos.apagar
    senao !arg1 # Produtos
      txt100 lin
      prog p
      enquanto pos
        lin = "\c2" + pos.linha + (pos.linha < 10 ? "\b. " : "\b.") + txt1(pos.texto)
        p.existe("i_" + txt1(pos.texto)) && (lin += "(" + i_[txt1(pos.texto)]:nome + ")")
        se txt2(pos.texto) != "0"
          lin += txtesp(20 - inttotal(pos.texto)) + " Nível: " + txt2(pos.texto)
        fimse
        pos.mudar(lin, 0, 1000), pos.depois
      efim
    senao # Habilidades
      txt100 lin
      enquanto pos
        lin = "\c2" + pos.linha + (pos.linha < 10 ? "\b. " : "\b.")
        casovar pos.texto(0, 2)
        casose "h_"
          lin += "H " + txte(txt1(pos.texto(2)))
          sair
        casose "i_"
          lin += "I " + txte(txt1(pos.texto(2)))
          sair
        casose "m_"
          lin += "M " + txte(txt1(pos.texto(2)))
          sair
        casose "o_"
          lin += "E " + txte(txt1(pos.texto(2)))
          sair
        casose
          lin += txt1(pos.texto)
          sair
        casofim
        lin += txtesp(20 - inttotal(pos.texto)) + " Aulas: " + txt2(pos.texto)
        lin += " " + txtsublin(misc:aulas, txt2(pos.texto), 1)
        pos.mudar(lin, 0, 1000), pos.depois
      efim
    fimse
    txtmais.addfim("\c2" + pos.linha + (pos.linha < 10 ? ".\b Linha vazia" : ".\bLinha vazia"))
    txtmais.addfim("Tecle E editar, I inserir ou A apagar, seguido do número da linha")
    txtmais.addfim("Z Sair, M seguido de um texto executa comando do MUD")
    txtmostra
    ret 1
  casose "m"
    perso.teclou(txtremove(txt(arg0, 1), "E"))
    ret 1
  casose "z"
    passo = var.opcpasso
    ret p_[passo]("\b")
  casose "a"
    uint16 lin
    uint16 total
    lin = txt(arg0, 1), total = intsublin([var.opcclasse]:[var.opcvar])
    se lin > 0 && lin <= total
      var.opclin = lin
      arg1 ? p_menuaula_a("\b") : p_menuprod_a("\b")
    senao total == 0
      msg("Não há nenhuma linha")
    senao total == 1
      msg("Só existe a linha 1")
    senao
      msg("A linha deve ser um número de 1 a " + total)
    fimse
    ret 1
  casose "e"
  casose "i"
    uint16 lin
    uint16 total
    lin = txt(arg0, 1), total = intsublin([var.opcclasse]:[var.opcvar])
    se lin > 0 && lin <= total + 1
      var.opclin = lin
      var.opcinserir_ = txt(arg0, 0, 1) == "i"
      arg1 ? p_menuaula1("\b") : p_menuprod1("\b")
    senao total == 0
      msg("Só existe a linha 1")
    senao
      msg("A linha deve ser um número de 1 a " + (total + 1))
    fimse
    ret 1
  casofim
  msg("Opção inválida: " + arg0)
  ret 1

func p_menuaula_a # Apagar uma aula
  casovar txtmin(arg0)
  casose
    msg("Apagar linha " + var.opclin + "? N não, S sim")
    passo = "menuaula_a"
    ret 1
  casose "s"
    msg("Linha " + var.opclin + " apagada")
    textotxt t
    textopos pos
    t.addfim([var.opcclasse]:[var.opcvar])
    pos = t.ini, pos.linha = var.opclin - 1, pos.remove
    prog p
    se t.bytes <= 1
      p.apagar(var.opcclasse, var.opcvar)
    senao
      p.criar(var.opcclasse, "const " + var.opcvar + "=\"" + txttroca(t.remove(1000), "\n", \
"\\n") + "\"")
    fimse
    config:salvar
    admlog("alterou aulas: " + var.opcclasse + ":" + var.opcvar)
  casose "n"
    ret p_menuaula("")
  casofim

func p_menuprod_a # Apagar um produto
  casovar txtmin(arg0)
  casose
    msg("Apagar linha " + var.opclin + "? N não, S sim")
    passo = "menuprod_a"
    ret 1
  casose "s"
    msg("Linha " + var.opclin + " apagada")
    textotxt t
    textopos pos
    t.addfim([var.opcclasse]:[var.opcvar])
    pos = t.ini, pos.linha = var.opclin - 1, pos.remove
    prog p
    se t.bytes <= 1
      p.apagar(var.opcclasse, var.opcvar)
    senao
      p.criar(var.opcclasse, "const " + var.opcvar + "=\"" + txttroca(t.remove(1000), "\n", \
"\\n") + "\"")
    fimse
    config:salvar
    admlog("alterou produtos: " + var.opcclasse + ":" + var.opcvar)
  casose "n"
    ret p_menuprod("")
  casofim

func p_menuaula1 # Inserir ou editar aula
  uint16 x
  ret arg0 == "z", p_menuaula("")
  x = arg0, passo = "menuaula1"
  casovar intsub(var.opclin)
  casose "1" # Escolher o tipo de aula
    se arg0 == "h" || arg0 == "i" || arg0 == "m"
      var.opclin += " " + txtmin(arg0), p_menuaula1("")
    senao arg0 == "e"
      var.opclin += " o", p_menuaula1("")
    senao arg0 == "o"
      txtmais.limpar
      txtmais.addfim("Opções:")
      txtmais.addfim("H Ensinar habilidade, comando hab")
      txtmais.addfim("M Ensinar magia, comando magia")
      txtmais.addfim("I Ensinar idioma, comando idioma")
      txtmais.addfim("E Extra: ensinar algo que aparece no comando outros")
      txtmostra
    senao
      msg("Entre com o tipo, O mostra as opções, Z cancela")
    fimse
    ret 1
  casose "2" # Escolher o que aprender
    se arg0 == ""
      msg("Entre com o nome da prática, Z cancela")
    senao txtproc(txtsepara(arg0, "DO+DOLE,DOLE+DO", "\b"), "\b") >= 0
      msg("Digite apenas letras e espaço")
    senao
      var.opclin += " " + txts(txtremove(arg0, "EMD")), p_menuaula1("")
    fimse
    ret 1
  casose "3" # Escolher a quantidade de aulas
    se arg0 == "o"
      txtmais.limpar
      txtmais.addfim("Opções:")
      uint8 n
      epara n = 1, n < intsublin(misc:aulas), n += 1
        txtmais.addfim(txt(n) + " " + txtsublin(misc:aulas, n, 1))
      efim
      txtmostra
    senao x < 1 || x >= intsublin(misc:aulas)
      msg("Entre com a quantidade de aulas, O mostra as opções, Z cancela")
    senao
      var.opclin += " " + x
      textotxt t
      textopos pos
      t.addfim([var.opcclasse]:[var.opcvar]), t.bytes == 1 && t.limpar
      pos = t.ini, pos.linha = int(txt1(var.opclin)) - 1
      !var.opcinserir && pos.remove
      pos.add(txtsub(var.opclin, 1, 1) + "_" + txtsub(var.opclin, 2))
      prog p
      p.criar(var.opcclasse, "const " + var.opcvar + "=\"" + txttroca(t.remove(1000), "\n", \
"\\n") + "\"")
      config:salvar
      admlog("alterou aulas: " + var.opcclasse + ":" + var.opcvar)
      sair
    fimse
    ret 1
  casofim
  ret p_menuaula("")

func p_menuprod1 # Inserir ou editar produto
  uint16 x
  ret arg0 == "z", p_menuprod("")
  x = arg0, passo = "menuprod1"
  casovar intsub(var.opclin)
  casose "1" # Escolher o item
    prog p
    se arg0 == "" || arg0 == "\b"
      msg("Entre com o item, Z cancela")
    senao !p.existe("i_" + txts(arg0))
      msg("Item não existe: " + txts(arg0) + "; entre com outro")
    senao
      var.opclin += " " + txts(arg0), p_menuprod1("")
    fimse
    ret 1
  casose "2" # Escolher o nível
    se txt(x) != arg0
      msg("Entre com o nível, 0=manter, Z cancela")
    senao
      var.opclin += " " + x
      textotxt t
      textopos pos
      t.addfim([var.opcclasse]:[var.opcvar]), t.bytes == 1 && t.limpar
      pos = t.ini, pos.linha = int(txt1(var.opclin)) - 1
      !var.opcinserir && pos.remove
      pos.add(txt2(var.opclin))
      prog p
      p.criar(var.opcclasse, "const " + var.opcvar + "=\"" + txttroca(t.remove(1000), "\n", \
"\\n") + "\"")
      config:salvar
      var.opclin = txtsub(var.opclin, 1, 1)
      msg("Produto adicionado: " + var.opclin + "(" + i_[var.opclin]:nome + ")")
      admlog("alterou produtos: " + var.opcclasse + ":" + var.opcvar)
      sair
    fimse
    ret 1
  casofim
  ret p_menuprod("")


classe menu_pcomum1
const nome1 = "Nome"
const tipo1 = "linha"
const clas1 = var.classe1
const vari1 = "nome"
#
const nome2 = "Palavras chave"
const info2 = "Palavras que os jogadores digitam para se referir ao item"
const tipo2 = "linha"
const clas2 = var.classe1
const vari2 = "ident"
#
const nome3 = "Descrição curta"
const info3 = "Descrição usada na maioria dos comandos"
const tipo3 = "linha"
const clas3 = var.classe1
const vari3 = "descnome"
#
const nome4 = "Descrição sala"
const info4 = "Descrição quando está na sala na posição padrão"
const tipo4 = "linha"
const clas4 = var.classe1
const vari4 = "descpadr"
#
const nome5 = "Descrição ao ver"
const tipo5 = "texto"
const clas5 = var.classe1
const vari5 = "descver"
#
const nome6 = "Descrição ident"
const info6 = "Texto adicionado após identificar (com magia de identificação)"
const tipo6 = "texto"
const clas6 = var.classe1
const vari6 = "descident"
#
const nome7 = "Sexo Msg"
const info7 = "Usado nas mensagens com o personagem"
const tipo7 = "opcao"
const clas7 = var.classe1
const vari7 = "msexo"
const extr7 = "Feminino\nMasculino"
#
const nome8 = "Sexo Perso"
const info8 = "Se estiver como <herda const>, assume o mesmo valor de Sexo Msg\n\
Aleatório escolhe um quando o personagem é criado"
const tipo8 = "opcao"
const clas8 = var.classe1
const vari8 = "sexoini"
const extr8 = "Feminino\nMasculino\nAleatório"
#
const nome9 = "Peso"
const info9 = "Em gramas"
const tipo9 = "numero"
const clas9 = var.classe1
const vari9 = "pesoobj"
const extr9 = "1 1000000000"
const exec9 = "ajustapeso"
#
const nome10 = "Volume"
const tipo10 = "numero"
const extr10 = "1 1000000000"
const clas10 = var.classe1
const vari10 = "volobj"
const exec10 = "ajustapeso"
#
const nome11 = "Volume dentro"
const tipo11 = "numero"
const clas11 = var.classe1
const vari11 = "volmax"
#
const nome12 = "Expande"
const info12 = "Volume aumenta se tiver itens dentro"
const tipo12 = "simnao"
const clas12 = var.classe1
const vari12 = "volexp"
const exec12 = "ajustapeso"
#
const nome13 = "Objetos máximo"
const tipo13 = "numero"
const clas13 = var.classe1
const vari13 = "objmax"
#
const nome14 = "Nível"
const tipo14 = "numero"
const clas14 = var.classe1
const vari14 = "nivel"
#
const nome15 = "Posição padrão"
const tipo15 = "opcao"
const clas15 = var.classe1
const vari15 = "pospadr"
const extr15 = "Morto (não usar essa opção)\n\
Mortalmente ferido\n\
Incapacitado\n\
Fraco\n\
Dormindo\n\
Descansando\n\
Sentado\n\
Lutando (não usar essa opção)\nEm pé"
#
const nome16 = "Tipo 1"
const info16 = "Nome da raça ou classe; o comando que mostra os tipos é adm tipo"
const tipo16 = "linha"
const clas16 = var.classe1
const vari16 = "tipo1"
#
const nome17 = "Tipo 2"
const info17 = "Nome da raça ou classe; o comando que mostra os tipos é adm tipo"
const tipo17 = "linha"
const clas17 = var.classe1
const vari17 = "tipo2"
#
const nome18 = "Tipo 3"
const info18 = "Nome da raça ou classe; o comando que mostra os tipos é adm tipo"
const tipo18 = "linha"
const clas18 = var.classe1
const vari18 = "tipo3"
#
const nome19 = "Equip posições"
const info19 = "Se não estiver vazio, são as posições aonde pode usar equipamentos"
const tipo19 = "vetor"
const clas19 = var.classe1
const vari19 = "equip1"
const extr19 = config:equip_txt
#
const nome20 = "Equip adicionar"
const info20 = "Adicionar essas posições no personagem"
const tipo20 = "vetor"
const clas20 = var.classe1
const vari20 = "equip2"
const extr20 = config:equip_txt
#
const nome21 = "Equip remover"
const info21 = "Remover essas posições do personagem"
const tipo21 = "vetor"
const clas21 = var.classe1
const vari21 = "equip3"
const extr21 = config:equip_txt
#
const nome22 = "Loja e aulas"
const tipo22 = "menu--"
const clas22 = "menu_ploja"
#
const nome23 = "Recebe itens"
const info23 = "Se outros personagens podem dar itens para este"
const tipo23 = "simnao"
const clas23 = var.classe1
const vari23 = "p_recebe"
#
const nome24 = "Não podem seguir"
const tipo24 = "simnao"
const clas24 = var.classe1
const vari24 = "p_naoseguir"
#
const nome50 = "Variáveis"
const tipo50 = "linha"
const clas50 = var.classe1
const vari50 = "inivar"
#
const nome51 = "Eventos perso"
const info51 = "Receber eventos do próprio personagem"
const tipo51 = "simnao"
const clas51 = var.classe1
const vari51 = "eveste"
const exec51 = "ajustaev"
#
const nome52 = "Eventos em perso"
const info52 = "Se recebe eventos do dono se for personagem"
const tipo52 = "simnao"
const clas52 = var.classe1
const vari52 = "evperso"
const exec52 = "ajustaev"
#
const nome53 = "Eventos em item"
const info53 = "Se recebe eventos do dono se for item"
const tipo53 = "simnao"
const clas53 = var.classe1
const vari53 = "evitem"
const exec53 = "ajustaev"
#
const nome54 = "Eventos em sala"
const info54 = "Se recebe eventos da sala se estiver em uma sala"
const tipo54 = "simnao"
const clas54 = var.classe1
const vari54 = "evsala"
const exec54 = "ajustaev"


classe menu_pcomum2
const nome25 = "Atributos números"
const tipo25 = "atribnum"
const clas25 = var.classe1
const vari25 = "recalc_auto"
const exec25 = "recalc_exec"
#
const nome26 = "Atributos sim/não"
const tipo26 = "atribbit"
const clas26 = var.classe1
const vari26 = "recalc_auto"
const exec26 = "recalc_exec"
#
const nome27 = "Atributos ataque"
const info27 = "Afetam os danos quando o personagem ataca alguém"
const tipo27 = "atribatk"
const clas27 = var.classe1
const vari27 = "recalc_auto"
const exec27 = "recalc_exec"
#
const nome28 = "Atributos defesa"
const info28 = "Afetam os danos quando alguém ataca o personagem"
const tipo28 = "atribdef"
const clas28 = var.classe1
const vari28 = "recalc_auto"
const exec28 = "recalc_exec"
#
const nome29 = "Tipo de ataque"
const info29 = "Que habilidade usa em ataques automáticos"
const tipo29 = "opcao"
const clas29 = var.classe1
const vari29 = "p_atktipo"
const extr29 = config:atk_txt
#
const nome30 = "Quando morre"
const tipo30 = "menu--"
const clas30 = "menu_pmorreu"
#
const nome31 = "Comportamento"
const tipo31 = "menu--"
const clas31 = "menu_pcomportamento"


classe menu_ploja
const titulo = "Loja e aulas"
const menufim = var.menufim
const colunas = 23
#
const nome1 = "Hora que abre"
const info1 = "Que horas a loja abre ou o PNJ começa a ensinar"
const tipo1 = "numero"
const clas1 = var.classe1
const vari1 = "lojaini"
const extr1 = "0 23"
#
const nome2 = "Hora que fecha"
const info2 = "Que horas a loja abre ou o PNJ pára de ensinar\n\
Se for igual ao horário de abertura, nunca fecha"
const tipo2 = "numero"
const clas2 = var.classe1
const vari2 = "lojafim"
const extr2 = "0 23"
#
const nome3 = "Lucro na venda"
const info3 = "Em porcentagem (0=sem lucro; paga o valor do item)"
const tipo3 = "numero"
const clas3 = var.classe1
const vari3 = "taxavenda"
const extr3 = "0 10000"
#
const nome4 = "Lucro na compra"
const info4 = "Em porcentagem (0=preço normal e 100=não paga pelo item)"
const tipo4 = "numero"
const clas4 = var.classe1
const vari4 = "taxacompra"
const extr4 = "0 100"
#
const nome5 = "Preço da aula"
const info5 = "Preço da aula em porcentagem (exemplo, 0=de graça e 100=preço da aula)"
const tipo5 = "numero"
const clas5 = var.classe1
const vari5 = "taxaaula"
const extr5 = "0 10000"
#
const nome6 = "Produtos"
const tipo6 = "menuprod"
const clas6 = var.classe1
const vari6 = "lojaitem"
#
const nome7 = "Compra produtos"
const info7 = "Vide tipos de produtos, no comando ECONFIG"
const tipo7 = "vetor"
const clas7 = var.classe1
const vari7 = "tipoitem"
const extr7 = config:produtos
#
const nome8 = "Aulas"
const tipo8 = "menuaula"
const clas8 = var.classe1
const vari8 = "lojaaula"
#
const nome9 = "Não negocia com"
const tipo9 = "tipos"
const clas9 = var.classe1
const vari9 = "lojanao"


classe menu_pmorreu
const titulo = "Quando morre"
const menufim = var.menufim
const colunas = 23
#
const nome1 = "Imortal"
const tipo1 = "simnao"
const clas1 = var.classe1
const vari1 = "p_imortal"
#
const nome2 = "Corpo"
const tipo2 = "opcao"
const clas2 = var.classe1
const vari2 = "p_corpo"
const extr2 = "Não deixa corpo\nDeixa corpo vazio\nDeixa corpo com itens e moedas"
#
const nome3 = "Experiência"
const info3 = "Quanta experiência dá quando morre, em porcentagem"
const tipo3 = "numero"
const clas3 = var.classe1
const vari3 = "p_exp"
const extr3 = "0 1000"
#
const nome4 = "Morreu"
const info4 = "Quando não tem dono"
const tipo4 = "linha"
const clas4 = var.classe1
const vari4 = "p_morreu1"
#
const nome5 = "Desmaiou"
const info5 = "Quando pertence a outro personagem"
const tipo5 = "linha"
const clas5 = var.classe1
const vari5 = "p_morreu2"


classe menu_pcomportamento
const titulo = "Comportamento"
const menufim = var.menufim
const colunas = 23
#
const nome1 = "Movimentar"
const tipo1 = "opcao"
const clas1 = var.classe1
const vari1 = "p_mover"
const extr1 = "Não sai do lugar\nSomente na área\nQualquer lugar"
#
const nome2 = "Tempo move"
const info2 = "Tempo médio em décimos de segundo para ir para outra sala"
const tipo2 = "numero"
const clas2 = var.classe1
const vari2 = "p_movervel"
const extr2 = "5 1000"
#
const nome3 = "Agressivo"
const tipo3 = "opcao"
const clas3 = var.classe1
const vari3 = "p_agressivo"
const extr3 = "Pacífico\nSe atacarem\nSim"
#
const nome4 = "Sem resgate"
const info4 = "Se não permite resgatar jogadores lutando com esse personagem"
const tipo4 = "simnao"
const clas4 = var.classe1
const vari4 = "p_naoresg"
#
const nome5 = "Come corpos"
const tipo5 = "simnao"
const clas5 = var.classe1
const vari5 = "p_comecorpo"


classe menu_perso1
herda menu_pcomum1
const titulo = "Perso simples " + txt(var.classe1, 2)
const colunas = 23


classe menu_perso2
herda menu_pcomum1, menu_pcomum2
const titulo = "Perso batalha " + txt(var.classe1, 2)
const colunas = 23
#
const nome32 = "Capturar"
const info32 = "Se pode ser capturado"
const tipo32 = "opcao"
const clas32 = var.classe1
const vari32 = "p_captura"
const extr32 = "Não\nMuito fácil\nFácil\nNormal\nDifícil\nMuito difícil"
#
const nome33 = "Dar e soltar"
const info33 = "Se esse personagem pode ser dado ou solto"
const tipo33 = "opcao"
const clas33 = var.classe1
const vari33 = "p_soltar"
const extr33 = "Pode-se dar e soltar\nPode-se apenas soltar\nNão se pode dar nem soltar"


classe menu_perso3
herda menu_pcomum1, menu_pcomum2
const titulo = "Perso completo " + txt(var.classe1, 2)
const colunas = 23
