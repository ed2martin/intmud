classe cmd_lista
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Lista\b\n\
Sintaxe: LISTA [item]\n\
Sem argumentos mostra a lista de produtos sendo vendidos.\n\
Seguido de um nome ou número mostra informações sobre um produto."
const posic = 5
txt200 lin
uint32 valor # Usado internamente: valor do item
uint32 nivel # Usado internamente: nível do item
int8 abre # Usado internamente: horário de abertura
int8 fecha # Usado internamente: horário de fechamento
real lucro # Para calcular o lucro do vendedor
int32 linha
txt30 tipo1 # arg0.tipo1
txt30 tipo2 # arg0.tipo2
txt30 tipo3 # arg0.tipo3

func escr
  tipo1 = arg0.tipo1 ? "\n" + arg0.tipo1 + "\n" : ""
  tipo2 = arg0.tipo2 ? "\n" + arg0.tipo2 + "\n" : ""
  tipo3 = arg0.tipo3 ? "\n" + arg0.tipo3 + "\n" : ""
  arg1 ? escr2(arg0, arg1) : escr1(arg0)

func escr1 # Consultar a lista de itens
  textotxt t
  listaobj l
  linha = 1, l.addfim(arg0.dono.dentro2)
  epara l.remove(arg0), l, l.ini.remove
    continuar l.objini.atkenv || !l.objini.lojaitem(arg0)
    lin = l.objini.cmd_loja(arg0)
    se lin
      t.addfim(txtcopiamai(l.objini.descnome, "A") + ": " + lin)
      continuar
    senao tipo1 && txtproc("\n" + l.objini.lojanao + "\n", tipo1) >= 0
      t.addfim(txtcopiamai(l.objini.descnome, "A") + ": Não negocio com " + arg0.tipo1)
      continuar
    senao tipo2 && txtproc("\n" + l.objini.lojanao + "\n", tipo2) >= 0
      t.addfim(txtcopiamai(l.objini.descnome, "A") + ": Não negocio com " + arg0.tipo2)
      continuar
    senao tipo3 && txtproc("\n" + l.objini.lojanao + "\n", tipo3) >= 0
      t.addfim(txtcopiamai(l.objini.descnome, "A") + ": Não negocio com " + arg0.tipo3)
      continuar
    fimse
    abre = l.objini.lojaini - misc:hora, fecha = l.objini.lojafim - misc:hora
    se abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0
      t.addfim(txtcopiamai(l.objini.descnome, "A") + ": Volte outra hora")
      continuar
    senao
      txt200 lin
      listaobj e
      epara e.addfim(arg0.evento, l.objini.evento), e, e.ini.remove
        lin = e.objini.cmd_negociar(arg0, l.objini, "comprar")
        sair lin
      efim
      se lin
        t.addfim(txtcopiamai(l.objini.descnome, "A") + ": " + lin)
        continuar
      fimse
    fimse
    t.addfim("\b\c6" + txtcopiamai(l.objini.descnome, "A") + " vende:\b")
    lucro = (100 + l.objini.taxavenda) / 100
    textotxt t2
    t2.addfim(l.objini.lojaitem(arg0))
    enquanto t2.linhas
      continuar !(lin = t2.remove)
      nivel = txt2(lin), lin = "i_" + txt1(lin)
      nivel == 0 && (nivel = [lin]:nivel)
      valor = lucro * [lin]:valor
      lin = "\b\c2" + linha + (linha < 10 ? "\b. " : "\b.") + [lin]:nome
      lin += txtesp(40 - inttotal(lin + valor)) + "$" + valor
      nivel && (lin += "   N" + nivel)
      t.addfim(lin), linha += 1
    efim
  efim
  se t.linhas
    arg0.msg2(t.remove(1000))
  senao
    arg0.msg("Ninguém vende nada aqui.")

func escr2 # Consultar um item
  listaobj l
  nomeobj n
  linha = 0, l.addfim(arg0.dono.dentro2), n.ini(arg1, 1)
  epara l.remove(arg0), l, l.ini.remove
    continuar l.objini.atkenv || !l.objini.lojaitem(arg0) || l.objini.cmd_loja(arg0)
    continuar tipo1 && txtproc("\n" + l.objini.lojanao + "\n", tipo1) >= 0
    continuar tipo2 && txtproc("\n" + l.objini.lojanao + "\n", tipo2) >= 0
    continuar tipo3 && txtproc("\n" + l.objini.lojanao + "\n", tipo3) >= 0
    abre = l.objini.lojaini - misc:hora, fecha = l.objini.lojafim - misc:hora
    continuar abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0
    listaobj e
    epara e.addfim(arg0.evento, l.objini.evento), e, e.ini.remove
      sair e.objini.cmd_negociar(arg0, l.objini, "comprar")
    efim
    continuar e
    textotxt t2
    epara t2.addfim(l.objini.lojaitem(arg0)), t2.linhas, t2.remove
      continuar !t2.ini.texto
      lin = "i_" + txt1(t2.ini.texto), linha += 1
      continuar !n.nome([lin]:nome, 1) && txt(linha) != arg1
      lucro = (100 + l.objini.taxavenda) / 100
      nivel = txt2(t2.ini.texto)
      nivel == 0 && (nivel = [lin]:nivel)
      valor = lucro * [lin]:valor
      t2.limpar
      t2.addfim("\b\c6" + txtcopiamai(l.objini.descnome, "A") + " mostra:\b")
      t2.addfim([lin]:nome + ", nível " + nivel + ", custa $" + valor + ".")
      se [lin]:descver(arg0)
        t2.addfim([lin]:descver(arg0))
      senao
        t2.addfim("Você não vê nada de especial.")
      fimse
      ret arg0.msg2(t2.remove(1000))
    efim
  efim
  arg0.msg("Ninguém vende isso aqui.")


classe cmd_aulas
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Aulas\b\n\
Sintaxe: AULAS [nome ou número do curso]\n\
Sem argumentos mostra quem dá aulas e o que ensina.\n\
Seguido de um nome ou o número na lista mostra informações sobre um curso.\n\
Para aprender, tecle APRENDER seguido do nome ou número do curso."
const posic = 5
txt200 lin
int8 abre # Usado internamente: horário de abertura
int8 fecha # Usado internamente: horário de fechamento
uint32 aulas # Usado internamente: quantas aulas ensina
uint32 valor # Usado internamente: preço da aula
real lucro # Para calcular o lucro do vendedor
int32 linha
txt30 tipo1 # arg0.tipo1
txt30 tipo2 # arg0.tipo2
txt30 tipo3 # arg0.tipo3

func escr
  tipo1 = arg0.tipo1 ? "\n" + arg0.tipo1 + "\n" : ""
  tipo2 = arg0.tipo2 ? "\n" + arg0.tipo2 + "\n" : ""
  tipo3 = arg0.tipo3 ? "\n" + arg0.tipo3 + "\n" : ""
  arg1 ? escr2(arg0, arg1) : escr1(arg0)

func escr1 # Consultar a lista de aulas
  textotxt t
  listaobj l
  linha = 1, l.addfim(arg0.dono.dentro2)
  epara l.remove(arg0), l, l.ini.remove
    continuar l.objini.atkenv || !l.objini.lojaaula(arg0)
    lin = l.objini.cmd_ensinar(arg0)
    se lin
      t.addfim(txtcopiamai(l.objini.descnome, "A") + ": " + lin)
      continuar
    senao tipo1 && txtproc("\n" + l.objini.lojanao + "\n", tipo1) >= 0
      t.addfim(txtcopiamai(l.objini.descnome, "A") + ": Não negocio com " + arg0.tipo1)
      continuar
    senao tipo2 && txtproc("\n" + l.objini.lojanao + "\n", tipo2) >= 0
      t.addfim(txtcopiamai(l.objini.descnome, "A") + ": Não negocio com " + arg0.tipo2)
      continuar
    senao tipo3 && txtproc("\n" + l.objini.lojanao + "\n", tipo3) >= 0
      t.addfim(txtcopiamai(l.objini.descnome, "A") + ": Não negocio com " + arg0.tipo3)
      continuar
    fimse
    abre = l.objini.lojaini - misc:hora, fecha = l.objini.lojafim - misc:hora
    se abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0
      t.addfim(txtcopiamai(l.objini.descnome, "A") + ": Volte outra hora")
      continuar
    senao
      txt200 lin
      listaobj e
      epara e.addfim(arg0.evento, l.objini.evento), e, e.ini.remove
        lin = e.objini.cmd_negociar(arg0, l.objini, "aprender")
        sair lin
      efim
      se lin
        t.addfim(txtcopiamai(l.objini.descnome, "A") + ": " + lin)
        continuar
      fimse
    fimse
    t.addfim("\b\c6" + txtcopiamai(l.objini.descnome, "A") + " ensina:\b")
    lucro = l.objini.taxaaula / 100
    textotxt t2
    t2.addfim(l.objini.lojaaula(arg0))
    enquanto t2.linhas
      continuar !(lin = t2.remove)
      aulas = txt2(lin)
      valor = lucro * $[misc:objvar(lin)].valor(arg0)
      lin = "\b\c2" + linha + (linha < 10 ? "\b. " : "\b.") + misc:nomevar(lin)
      lin += txtesp(40 - inttotal(lin + valor)) + "$" + valor
      aulas && (lin += "   (" + txtsublin(misc:aulas, aulas, 1) + ")")
      t.addfim(lin), linha += 1
    efim
  efim
  se t.linhas
    arg0.msg2(t.remove(1000))
  senao
    arg0.msg("Não há professores aqui.")

func escr2 # Consultar uma aula
  listaobj l
  nomeobj n
  linha = 0, l.addfim(arg0.dono.dentro2), n.ini(arg1, 1)
  epara l.remove(arg0), l, l.ini.remove
    continuar l.objini.atkenv || !l.objini.lojaaula(arg0) || l.objini.cmd_ensinar(arg0)
    continuar tipo1 && txtproc("\n" + l.objini.lojanao + "\n", tipo1) >= 0
    continuar tipo2 && txtproc("\n" + l.objini.lojanao + "\n", tipo2) >= 0
    continuar tipo3 && txtproc("\n" + l.objini.lojanao + "\n", tipo3) >= 0
    abre = l.objini.lojaini - misc:hora, fecha = l.objini.lojafim - misc:hora
    continuar abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0
    listaobj e
    epara e.addfim(arg0.evento, l.objini.evento), e, e.ini.remove
      sair e.objini.cmd_negociar(arg0, l.objini, "aprender")
    efim
    continuar e
    textotxt t2
    epara t2.addfim(l.objini.lojaaula(arg0)), t2.linhas, t2.remove
      continuar !(lin = t2.ini.texto)
      lin = misc:nomevar(lin), linha += 1
      continuar !n.nome(lin, 1) && txt(linha) != arg1
      ref r
      r = $[misc:objvar(t2.ini.texto)]
      valor = r.valor(arg0) * l.objini.taxaaula / 100
      aulas = txt2(t2.ini.texto)
      t2.limpar
      t2.addfim(r.txtajuda)
      se t2.bytes <= 1
        t2.limpar
        t2.addfim("\b\c3" + lin + "\b")
      fimse
      t2.addini("\b\c6" + txtcopiamai(l.objini.descnome, "A") + " explica:\b")
      lin = "Ensino até o nível " + txtmin(txtsublin(misc:aulas, aulas, 1))
      lin += valor <= 0 ? ", não cobro nada." : ", cobro $" + valor + " por aula."
      t2.addfim(lin)
      ret arg0.msg2(t2.remove(1000))
    efim
  efim
  arg0.msg("Ninguém ensina isso aqui.")


classe cmd_aprender
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Aprender\b\n\
Sintaxe: APRENDER <nome ou número do curso>\n\
Aprende um pouco sobre uma habilidade ou idioma.\n\
Para saber o que é ensinado em algum lugar, tecle AULAS."
txt200 lin
int8 abre # Usado internamente: horário de abertura
int8 fecha # Usado internamente: horário de fechamento
uint32 aulas # Usado internamente: quantas aulas ensina
uint32 valor # Usado internamente: preço da aula
int32 linha
txt30 tipo1 # arg0.tipo1
txt30 tipo2 # arg0.tipo2
txt30 tipo3 # arg0.tipo3

func escr
  se config:aulas && !arg0.var.z_aulas
    ret arg0.msg("Você não possui pontos de aula.")
  fimse
  ret !arg1, arg0.msg("Aprender o quê?")
  tipo1 = arg0.tipo1 ? "\n" + arg0.tipo1 + "\n" : ""
  tipo2 = arg0.tipo2 ? "\n" + arg0.tipo2 + "\n" : ""
  tipo3 = arg0.tipo3 ? "\n" + arg0.tipo3 + "\n" : ""
  listaobj l
  nomeobj n
  linha = 0, l.addfim(arg0.dono.dentro2), n.ini(arg1, 1)
  epara l.remove(arg0), l, l.ini.remove
    continuar l.objini.atkenv || !l.objini.lojaaula(arg0) || l.objini.cmd_ensinar(arg0)
    continuar tipo1 && txtproc("\n" + l.objini.lojanao + "\n", tipo1) >= 0
    continuar tipo2 && txtproc("\n" + l.objini.lojanao + "\n", tipo2) >= 0
    continuar tipo3 && txtproc("\n" + l.objini.lojanao + "\n", tipo3) >= 0
    abre = l.objini.lojaini - misc:hora, fecha = l.objini.lojafim - misc:hora
    continuar abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0
    listaobj e
    epara e.addfim(arg0.evento, l.objini.evento), e, e.ini.remove
      sair e.objini.cmd_negociar(arg0, l.objini, "aprender")
    efim
    continuar e
    textotxt t2
    epara t2.addfim(l.objini.lojaaula(arg0)), t2.linhas, t2.remove
      continuar !(lin = t2.ini.texto)
      lin = misc:nomevar(lin), linha += 1
      continuar !n.nome(lin, 1) && txt(linha) != arg1
# Obtém variáveis
      ref r
      r = $[misc:objvar(t2.ini.texto)]
      valor = r.valor(arg0) * l.objini.taxaaula / 100
      aulas = txt2(t2.ini.texto)
# Checa número de aulas
      txt100 nomevar
      nomevar = txt1(t2.ini.texto)
      se arg0.var.[nomevar]_ >= aulas
        lin = "Não tenho mais o que ensinar sobre " + lin + "."
        ret arg0.msg(txtcopiamai(l.objini.descnome, "A") + ": " + lin)
      fimse
# Checa se está limitado a alguns tipos (raças/classes)
      se !r.tipoperso
      senao tipo1 && txtproc("\n" + r.tipoperso + "\n", tipo1) >= 0
      senao tipo2 && txtproc("\n" + r.tipoperso + "\n", tipo2) >= 0
      senao tipo3 && txtproc("\n" + r.tipoperso + "\n", tipo3) >= 0
      senao
        lin = "Não tem como ensinar " + lin + " para sua raça e classe."
        ret arg0.msg(txtcopiamai(l.objini.descnome, "A") + ": " + lin)
      fimse
# Checa se possui o nível necessário
      se arg0.pnivel < int(r.aulaini)
        lin = "Você não possui o nível necessário."
        ret arg0.msg(txtcopiamai(l.objini.descnome, "A") + ": " + lin)
      senao arg0.pnivel >= int(r.aulafim)
      senao
        linha = arg0.pnivel - r.aulaini + 1
        linha *= inttotal(misc:aulas) / (r.aulafim - r.aulaini + 1)
        se arg0.var.[nomevar]_ < linha
          lin = "Você não possui o nível necessário."
          ret arg0.msg(txtcopiamai(l.objini.descnome, "A") + ": " + lin)
        fimse
      fimse
# Checa se conhece as habilidades necessárias
      t2.limpar
      epara t2.addfim(r.depende), t2.linhas, t2.remove
        continuar !t2.ini.texto
        continuar arg0.var.[t2.ini.texto]_ > arg0.var.[nomevar]_
        lin = misc:nomevar(t2.ini.texto)
        lin = "Você não conhece o suficiente sobre " + lin + "."
        ret arg0.msg(txtcopiamai(l.objini.descnome, "A") + ": " + lin)
      efim
# Checa se personagem pode pagar
      se valor >= 0 && arg0.var.z_moedas_ < valor
        lin = "Você não tem $" + valor + " e eu não ensino " + lin + " de graça."
        ret arg0.msg(txtcopiamai(l.objini.descnome, "A") + ": " + lin)
      fimse
# Ensina
      config:aulas && (arg0.var.z_aulas_ -= 1)
      arg0.var.z_moedas_ -= valor
      arg0.var.[nomevar]_ += 1
      $mens.p(arg0, l.objini)
      se valor
        $mens.mtodos1("$P entrega algumas moedas e $A dá uma aula de " + lin + ".")
      senao
        $mens.mtodos1("$A dá uma aula de " + lin + " para $P.")
      fimse
      ret
    efim
  efim
  arg0.msg("Ninguém ensina isso aqui.")


classe cmd_comprar
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Comprar\b\n\
Sintaxe: COMPRAR <nome ou número do objeto>\n\
         COMPRAR <quantidade>  <nome ou número do objeto>\n\
Compra objetos de um vendedor.\n\
Para saber o que é vendido em algum lugar, tecle LISTA."
txt200 lin
int8 abre # Usado internamente: horário de abertura
int8 fecha # Usado internamente: horário de fechamento
uint32 valor # Usado internamente: preço da aula
uint32 nivel # Usado internamente: nível do item
real lucro # Para calcular o lucro do vendedor
int32 linha
txt100 nomeitem # O nome do item que está procurando
uint16 total # Quantos itens quer combrar
txt30 tipo1 # arg0.tipo1
txt30 tipo2 # arg0.tipo2
txt30 tipo3 # arg0.tipo3

func escr
  ret !arg1, arg0.msg("Comprar o quê?")
  tipo1 = arg0.tipo1 ? "\n" + arg0.tipo1 + "\n" : ""
  tipo2 = arg0.tipo2 ? "\n" + arg0.tipo2 + "\n" : ""
  tipo3 = arg0.tipo3 ? "\n" + arg0.tipo3 + "\n" : ""
  listaobj l
  nomeobj n
  total = txt1(arg1)
  se intsub(arg1) < 2 || total == 0 || txt(total) != txt1(arg1)
    total = 1, nomeitem = arg1
  senao
    nomeitem = txt2(arg1)
  fimse
  linha = 0, l.addfim(arg0.dono.dentro2), n.ini(nomeitem, total)
  epara l.remove(arg0), l, l.ini.remove
    continuar l.objini.atkenv || !l.objini.lojaitem(arg0) || l.objini.cmd_loja(arg0)
    continuar tipo1 && txtproc("\n" + l.objini.lojanao + "\n", tipo1) >= 0
    continuar tipo2 && txtproc("\n" + l.objini.lojanao + "\n", tipo2) >= 0
    continuar tipo3 && txtproc("\n" + l.objini.lojanao + "\n", tipo3) >= 0
    abre = l.objini.lojaini - misc:hora, fecha = l.objini.lojafim - misc:hora
    continuar abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0
    listaobj e
    epara e.addfim(arg0.evento, l.objini.evento), e, e.ini.remove
      sair e.objini.cmd_negociar(arg0, l.objini, "comprar")
    efim
    continuar e
    textotxt t2
    epara t2.addfim(l.objini.lojaitem(arg0)), t2.linhas, t2.remove
      continuar !t2.ini.texto
      lin = "i_" + txt1(t2.ini.texto), linha += 1
      continuar !n.nome([lin]:nome, 1) && txt(linha) != nomeitem
# Obtém variáveis
      lucro = (100 + l.objini.taxavenda) / 100
      nivel = txt2(t2.ini.texto)
      nivel == 0 && (nivel = [lin]:nivel)
      valor = lucro * [lin]:valor
# Checa a quantidade de itens
      se [lin]:item == 2
        total > 100 && (total = 100), linha = 1
      senao
        total > 10 && (total = 10), linha = total
      fimse
# Checa se pode carregar os itens
      se arg0.dentro1.total + linha > arg0.objmax
        ret arg0.msg("Você não consegue carregar tanta coisa nada.")
      senao arg0.volden + [lin]:volobj * total > [lin]:volmax
        ret arg0.msg("Você não consegue carregar tanta coisa.")
      senao arg0.pesoden - arg0.pesoveste + [lin]:pesoobj * total > arg0.pesomax
        ret arg0.msg("Você não consegue carregar tanto peso.")
      fimse
# Checa se tem dinheiro suficiente
      se arg0.var.z_moedas_ < valor * total
        lin = "Você não tem $" + valor * total + "."
        ret arg0.msg(txtcopiamai(l.objini.descnome, "A") + ": " + lin)
      fimse
# Cria o item
      ref r
      se [lin]:item == 2
        r = criar(lin, arg0, total)
      senao
        epara linha = 0, linha < total, linha += 1
          r = criar(lin, arg0, nivel)
        efim
      fimse
      arg0.var.z_moedas_ -= valor * total
# Avisa que comprou o item
      $mens.p(arg0, l.objini, r)
      se total == 1
        $mens.mtodos1("$P compra $o de $A.")
      senao
        $mens.mtodos1("$P compra " + total + "x $o de $A.")
      fimse
      ret
    efim
  efim
  arg0.msg("Ninguém vende isso aqui.")


classe cmd_avaliar
herda comando_comum, comando_ajuda
const txtajuda = "\b\c3Avaliar\b\n\
Sintaxe: AVALIAR <nome do objeto>\n\
Pergunta a um vendedor quanto ele paga por um item que você está carregando."
int8 abre # Usado internamente: horário de abertura
int8 fecha # Usado internamente: horário de fechamento
txt30 tipo1 # arg0.tipo1
txt30 tipo2 # arg0.tipo2
txt30 tipo3 # arg0.tipo3
const vender = 0

func escr
  ret !arg1, arg0.msg(vender ? "Vender o que?" : "Avaliar o que?")
  listaobj l
  nomeobj n # Para reconhecer os itens
  n.ini(arg1, 1000000)
  epara l.addfim(arg0.dentro1), l, l.ini.remove
    continuar !l.objini.visivel(arg0) || !n.nome(l.objini.ident, l.objini.objtot)
    ret exec(arg0, l.objini, int(n))
  efim
# Não encontrou o item
  arg0.msg("Você não vê isso.")

func exec # Avalia ou vende um item
# arg0 = personagem
# arg1 = item
# arg2 = quantidade de itens
  tipo1 = arg0.tipo1 ? "\n" + arg0.tipo1 + "\n" : ""
  tipo2 = arg0.tipo2 ? "\n" + arg0.tipo2 + "\n" : ""
  tipo3 = arg0.tipo3 ? "\n" + arg0.tipo3 + "\n" : ""
  listaobj l
  linha = 0, l.addfim(arg0.dono.dentro2)
  epara l.remove(arg0), l, l.ini.remove
    continuar arg1.tipoitem & l.objini.tipoitem == 0 # Checa se tem interesse
    continuar tipo1 && txtproc("\n" + l.objini.lojanao + "\n", tipo1) >= 0
    continuar tipo2 && txtproc("\n" + l.objini.lojanao + "\n", tipo2) >= 0
    continuar tipo3 && txtproc("\n" + l.objini.lojanao + "\n", tipo3) >= 0
    abre = l.objini.lojaini - misc:hora, fecha = l.objini.lojafim - misc:hora
    continuar abre < fecha ? abre > 0 || fecha <= 0 : abre > 0 && fecha <= 0
    listaobj e
    epara e.addfim(arg0.evento, l.objini.evento), e, e.ini.remove
      sair e.objini.cmd_negociar(arg0, l.objini, "vender")
    efim
    continuar e
    int32 valor # Valor do item
    valor = intpos(arg1.valor * (100 - l.objini.taxacompra) / 100)
    txt100 lin
    se vender
      valor *= arg2
      arg1.apagar(arg2)
      arg0.var.z_moedas_ += valor
      $mens.p(arg0, l.objini, arg1)
      se arg2 == 1
        lin = "$P vende $o para $a"
      senao
        lin = "$P vende " + arg2 + "x $o para $a"
      fimse
      se valor == 1
        $mens.mvis2(lin + " por uma moeda.", lin + ".")
      senao valor == 2
        $mens.mvis2(lin + " por duas moedas.", lin + ".")
      senao
        $mens.mvis2(lin + " por " + valor + " moedas.", lin + ".")
      fimse
      ret
    senao
      se valor == 0
        lin = "Não pagaria nenhuma moeda por isso."
      senao valor == 1
        lin = "Eu pagaria uma única moeda por isso."
      senao
        lin = "Eu pagaria " + valor + " moedas por isso."
      fimse
      ret arg0.msg(txtcopiamai(l.objini.descnome, "A") + ": " + lin)
    fimse
  efim
# Ninguém quer comprar
  arg0.msg("Ninguém quer comprar " + arg1.descnome + ".")


classe cmd_vender
herda cmd_avaliar
const txtajuda = "\b\c3Vender\b\n\
Sintaxe: VENDER <nome do objeto>\n\
         VENDER <quantidade> <nome do objeto>\n\
Vende objetos que você está carregando para um vendedor.\n\
Somente em alguns casos é possível vender mais de um objeto de uma vez."
const vender = 1
